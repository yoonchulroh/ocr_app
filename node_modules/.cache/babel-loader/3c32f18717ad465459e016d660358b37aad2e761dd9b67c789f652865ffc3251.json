{"ast":null,"code":"var _jsxFileName = \"/Users/yoonchulroh/Projects/ocr-app/src/App.js\",\n  _s = $RefreshSig$();\n// src/App.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport Tesseract from 'tesseract.js';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  var _images$currentImageI5, _images$currentImageI6, _images$currentImageI7, _images$currentImageI8, _images$currentImageI9, _images$currentImageI10;\n  const [images, setImages] = useState([]);\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\n  const [text, setText] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [batchProgress, setBatchProgress] = useState({\n    current: 0,\n    total: 0\n  });\n  const [imageDimensions, setImageDimensions] = useState({\n    width: 0,\n    height: 0\n  });\n  const [coordinates, setCoordinates] = useState({\n    minX: 0,\n    maxX: 0,\n    minY: 0,\n    maxY: 0\n  });\n  const [currentRegionIndex, setCurrentRegionIndex] = useState(0);\n  // Shared regions across all images\n  const [regions, setRegions] = useState([{\n    coordinates: {\n      minX: 0,\n      maxX: 0,\n      minY: 0,\n      maxY: 0\n    },\n    text: '',\n    croppedImageData: null\n  }]);\n  const canvasRef = useRef(null);\n\n  // Draw rectangles on image\n  const drawRectangles = img => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Set canvas size to match image\n    canvas.width = img.width;\n    canvas.height = img.height;\n\n    // Draw the image\n    ctx.drawImage(img, 0, 0);\n\n    // Draw all regions with different colors\n    if (regions.length > 0) {\n      regions.forEach((region, index) => {\n        // Different color for current region\n        ctx.strokeStyle = index === currentRegionIndex ? 'red' : 'blue';\n        ctx.lineWidth = 2;\n        ctx.strokeRect(region.coordinates.minX, region.coordinates.minY, region.coordinates.maxX - region.coordinates.minX, region.coordinates.maxY - region.coordinates.minY);\n\n        // Add region number label\n        ctx.fillStyle = index === currentRegionIndex ? 'red' : 'blue';\n        ctx.font = '14px Arial';\n        ctx.fillText(`Region ${index + 1}`, region.coordinates.minX, region.coordinates.minY - 5);\n      });\n    }\n  };\n\n  // Update rectangles when coordinates or regions change\n  useEffect(() => {\n    if (images[currentImageIndex]) {\n      const img = new Image();\n      img.src = images[currentImageIndex].url;\n      img.onload = () => {\n        drawRectangles(img);\n        setImageDimensions({\n          width: img.width,\n          height: img.height\n        });\n      };\n    }\n  }, [coordinates, currentImageIndex, images, currentRegionIndex, regions]);\n\n  // Handle image upload\n  const handleImageChange = e => {\n    if (e.target.files) {\n      const newImages = Array.from(e.target.files).map(file => ({\n        url: URL.createObjectURL(file),\n        results: Array(regions.length).fill(null).map(() => ({\n          text: '',\n          croppedImageData: null\n        }))\n      }));\n      setImages(prev => [...prev, ...newImages]);\n      setCurrentImageIndex(prev => prev + newImages.length - 1);\n    }\n  };\n\n  // Handle image selection\n  const handleImageSelect = index => {\n    var _images$index;\n    setCurrentImageIndex(index);\n    setCurrentRegionIndex(0);\n\n    // Update text if available for the current region\n    if ((_images$index = images[index]) !== null && _images$index !== void 0 && _images$index.results && images[index].results[0]) {\n      setText(images[index].results[0].text || '');\n    } else {\n      setText('');\n    }\n  };\n\n  // Add a new region\n  const addRegion = () => {\n    // Create new region object\n    const newRegion = {\n      coordinates: {\n        minX: 0,\n        maxX: 0,\n        minY: 0,\n        maxY: 0\n      },\n      text: '',\n      croppedImageData: null\n    };\n\n    // Add the new region to shared regions\n    setRegions(prev => [...prev, newRegion]);\n\n    // Update the images to include results for the new region\n    setImages(prev => {\n      return prev.map(img => ({\n        ...img,\n        results: [...(img.results || []), {\n          text: '',\n          croppedImageData: null\n        }]\n      }));\n    });\n\n    // Set the current region to the new one\n    setCurrentRegionIndex(regions.length);\n    setCoordinates({\n      minX: 0,\n      maxX: 0,\n      minY: 0,\n      maxY: 0\n    });\n    setText('');\n  };\n\n  // Delete current region\n  const deleteRegion = () => {\n    var _images$currentImageI, _images$currentImageI2;\n    // Don't allow deleting if only one region\n    if (regions.length <= 1) {\n      alert(\"Can't delete the only region. At least one region is required.\");\n      return;\n    }\n    const regionIndexToDelete = currentRegionIndex;\n\n    // Remove the region from shared regions\n    setRegions(prev => {\n      const updatedRegions = [...prev];\n      updatedRegions.splice(regionIndexToDelete, 1);\n      return updatedRegions;\n    });\n\n    // Update images to remove results for the deleted region\n    setImages(prev => {\n      return prev.map(img => {\n        const updatedResults = [...(img.results || [])];\n        updatedResults.splice(regionIndexToDelete, 1);\n        return {\n          ...img,\n          results: updatedResults\n        };\n      });\n    });\n\n    // Set the current region index\n    setCurrentRegionIndex(prev => prev >= regions.length - 1 ? regions.length - 2 : prev);\n\n    // Update coordinates to the new current region\n    if (regions.length > 1) {\n      const newIndex = currentRegionIndex >= regions.length - 1 ? regions.length - 2 : currentRegionIndex;\n      setCoordinates(regions[newIndex].coordinates);\n    }\n\n    // Update text\n    const newIndex = currentRegionIndex >= regions.length - 1 ? regions.length - 2 : currentRegionIndex;\n    if ((_images$currentImageI = images[currentImageIndex]) !== null && _images$currentImageI !== void 0 && (_images$currentImageI2 = _images$currentImageI.results) !== null && _images$currentImageI2 !== void 0 && _images$currentImageI2[newIndex]) {\n      setText(images[currentImageIndex].results[newIndex].text || '');\n    } else {\n      setText('');\n    }\n  };\n\n  // Handle region selection\n  const handleRegionSelect = index => {\n    var _images$currentImageI3, _images$currentImageI4;\n    setCurrentRegionIndex(index);\n    setCoordinates(regions[index].coordinates);\n\n    // Update text based on the selected region for the current image\n    if ((_images$currentImageI3 = images[currentImageIndex]) !== null && _images$currentImageI3 !== void 0 && (_images$currentImageI4 = _images$currentImageI3.results) !== null && _images$currentImageI4 !== void 0 && _images$currentImageI4[index]) {\n      setText(images[currentImageIndex].results[index].text || '');\n    } else {\n      setText('');\n    }\n  };\n\n  // Crop image using coordinates\n  const cropImage = (imageElement, coords) => {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n\n    // Set canvas size to the specified dimensions\n    canvas.width = coords.maxX - coords.minX;\n    canvas.height = coords.maxY - coords.minY;\n\n    // Draw the cropped region\n    ctx.drawImage(imageElement, coords.minX, coords.minY, coords.maxX - coords.minX, coords.maxY - coords.minY, 0, 0, coords.maxX - coords.minX, coords.maxY - coords.minY);\n    return canvas.toDataURL('image/png');\n  };\n\n  // Process single region with OCR\n  const processRegionOCR = (imageUrl, regionCoords) => {\n    return new Promise((resolve, reject) => {\n      const img = new Image();\n      img.src = imageUrl;\n      img.onload = () => {\n        const croppedImageData = cropImage(img, regionCoords);\n        Tesseract.recognize(croppedImageData, 'eng', {\n          logger: m => console.log(m)\n        }).then(({\n          data: {\n            text\n          }\n        }) => {\n          resolve({\n            text,\n            croppedImageData\n          });\n        }).catch(reject);\n      };\n    });\n  };\n\n  // Process image and run OCR for current region\n  const handleRunOCR = () => {\n    if (!images[currentImageIndex]) {\n      alert('Please upload an image first');\n      return;\n    }\n    setIsLoading(true);\n    processRegionOCR(images[currentImageIndex].url, regions[currentRegionIndex].coordinates).then(({\n      text,\n      croppedImageData\n    }) => {\n      setText(text);\n\n      // Update regions with the coordinates\n      setRegions(prev => {\n        const newRegions = [...prev];\n        newRegions[currentRegionIndex] = {\n          ...newRegions[currentRegionIndex],\n          coordinates: regions[currentRegionIndex].coordinates\n        };\n        return newRegions;\n      });\n\n      // Update the current image's results for the current region\n      setImages(prev => {\n        const newImages = [...prev];\n        if (!newImages[currentImageIndex].results) {\n          newImages[currentImageIndex].results = Array(regions.length).fill(null).map(() => ({\n            text: '',\n            croppedImageData: null\n          }));\n        }\n        newImages[currentImageIndex].results[currentRegionIndex] = {\n          text,\n          croppedImageData\n        };\n        return newImages;\n      });\n      setIsLoading(false);\n    }).catch(error => {\n      console.error(error);\n      setIsLoading(false);\n    });\n  };\n\n  // Process all regions in current image\n  const handleRunOCRAllRegions = async () => {\n    if (!images[currentImageIndex]) {\n      alert('Please upload an image first');\n      return;\n    }\n    if (regions.length === 0) {\n      alert('No regions defined');\n      return;\n    }\n    setIsLoading(true);\n    setBatchProgress({\n      current: 0,\n      total: regions.length\n    });\n    try {\n      const results = await Promise.all(regions.map(async (region, idx) => {\n        const {\n          text,\n          croppedImageData\n        } = await processRegionOCR(images[currentImageIndex].url, region.coordinates);\n        setBatchProgress(prev => ({\n          ...prev,\n          current: idx + 1\n        }));\n        return {\n          text,\n          croppedImageData\n        };\n      }));\n\n      // Update the current image's results\n      setImages(prev => {\n        const newImages = [...prev];\n        newImages[currentImageIndex].results = results;\n        return newImages;\n      });\n\n      // Update text for current region\n      setText(results[currentRegionIndex].text);\n      setIsLoading(false);\n      setBatchProgress({\n        current: 0,\n        total: 0\n      });\n    } catch (error) {\n      console.error(error);\n      setIsLoading(false);\n      setBatchProgress({\n        current: 0,\n        total: 0\n      });\n    }\n  };\n\n  // Process all images with OCR (all regions)\n  const handleRunOCRAll = async () => {\n    if (images.length === 0) {\n      alert('Please upload images first');\n      return;\n    }\n    setIsLoading(true);\n    const totalOperations = images.length * regions.length;\n    setBatchProgress({\n      current: 0,\n      total: totalOperations\n    });\n    let processedCount = 0;\n    try {\n      var _updatedImages$curren, _updatedImages$curren2;\n      const updatedImages = await Promise.all(images.map(async img => {\n        const results = await Promise.all(regions.map(async region => {\n          const {\n            text,\n            croppedImageData\n          } = await processRegionOCR(img.url, region.coordinates);\n          processedCount++;\n          setBatchProgress({\n            current: processedCount,\n            total: totalOperations\n          });\n          return {\n            text,\n            croppedImageData\n          };\n        }));\n        return {\n          ...img,\n          results\n        };\n      }));\n      setImages(updatedImages);\n\n      // Update text for current image and region\n      if ((_updatedImages$curren = updatedImages[currentImageIndex]) !== null && _updatedImages$curren !== void 0 && (_updatedImages$curren2 = _updatedImages$curren.results) !== null && _updatedImages$curren2 !== void 0 && _updatedImages$curren2[currentRegionIndex]) {\n        setText(updatedImages[currentImageIndex].results[currentRegionIndex].text || '');\n      }\n      setIsLoading(false);\n      setBatchProgress({\n        current: 0,\n        total: 0\n      });\n    } catch (error) {\n      console.error(error);\n      setIsLoading(false);\n      setBatchProgress({\n        current: 0,\n        total: 0\n      });\n    }\n  };\n\n  // Handle coordinate changes for current region\n  const handleCurrentRegionCoordinatesChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    const newCoordinates = {\n      ...coordinates,\n      [name]: parseInt(value) || 0\n    };\n    setCoordinates(newCoordinates);\n\n    // Update coordinates in the regions array\n    setRegions(prev => {\n      const newRegions = [...prev];\n      newRegions[currentRegionIndex].coordinates = newCoordinates;\n      return newRegions;\n    });\n  };\n\n  // Export results as CSV\n  const exportToCSV = () => {\n    // Create CSV header\n    let csvContent = \"Image Name,Region,OCR Result\\n\";\n\n    // Add each image and region data as rows\n    images.forEach((img, imgIndex) => {\n      if (img.results) {\n        img.results.forEach((result, regionIndex) => {\n          // Clean text data by escaping quotes and removing line breaks\n          const cleanedText = result.text ? result.text.replace(/\"/g, '\"\"').replace(/\\n/g, ' ') : '';\n          // Add row to CSV\n          csvContent += `\"Image ${imgIndex + 1}\",\"Region ${regionIndex + 1}\",\"${cleanedText}\"\\n`;\n        });\n      }\n    });\n\n    // Create a blob with the CSV content\n    const blob = new Blob([csvContent], {\n      type: 'text/csv;charset=utf-8;'\n    });\n    const url = URL.createObjectURL(blob);\n\n    // Create a link element to trigger download\n    const link = document.createElement('a');\n    link.setAttribute('href', url);\n    link.setAttribute('download', 'ocr_results.csv');\n    link.style.visibility = 'hidden';\n\n    // Add to document, click to download, then remove\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"OCR Image to Text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        multiple: true,\n        onChange: handleImageChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 7\n    }, this), images.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-selection\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Select Image:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-thumbnails\",\n        children: images.map((img, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `image-thumbnail ${index === currentImageIndex ? 'selected' : ''}`,\n          onClick: () => handleImageSelect(index),\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: img.url,\n            alt: `Thumbnail ${index + 1}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 449,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Image \", index + 1]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 450,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 444,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 9\n    }, this), images.length > 0 && regions.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"region-selection\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Regions (Shared Across All Images):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"region-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addRegion,\n          className: \"control-button\",\n          children: \"Add Region\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: deleteRegion,\n          className: \"control-button\",\n          children: \"Delete Region\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"region-tabs\",\n        children: regions.map((region, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `region-tab ${index === currentRegionIndex ? 'selected' : ''}`,\n          onClick: () => handleRegionSelect(index),\n          children: [\"Region \", index + 1]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 9\n    }, this), images.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"coordinates-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Enter Coordinates for Region \", currentRegionIndex + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"coordinate-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Min X:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 485,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            name: \"minX\",\n            value: coordinates.minX,\n            onChange: handleCurrentRegionCoordinatesChange,\n            placeholder: \"Min X\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 486,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 484,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Max X:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 495,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            name: \"maxX\",\n            value: coordinates.maxX,\n            onChange: handleCurrentRegionCoordinatesChange,\n            placeholder: \"Max X\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 496,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 494,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Min Y:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 505,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            name: \"minY\",\n            value: coordinates.minY,\n            onChange: handleCurrentRegionCoordinatesChange,\n            placeholder: \"Min Y\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 506,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Max Y:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 515,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            name: \"maxY\",\n            value: coordinates.maxY,\n            onChange: handleCurrentRegionCoordinatesChange,\n            placeholder: \"Max Y\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 516,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 481,\n      columnNumber: 9\n    }, this), images.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"run-ocr\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRunOCR,\n        disabled: isLoading,\n        children: isLoading ? 'Processing...' : 'Run OCR on Current Region'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 531,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRunOCRAllRegions,\n        disabled: isLoading,\n        className: \"run-regions-button\",\n        children: isLoading ? 'Processing...' : 'Run OCR on All Regions'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 534,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRunOCRAll,\n        disabled: isLoading,\n        className: \"run-all-button\",\n        children: isLoading ? `Processing ${batchProgress.current}/${batchProgress.total}...` : 'Run OCR on All Images'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 537,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 530,\n      columnNumber: 9\n    }, this), images.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-preview-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-preview\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Original Image:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 548,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: canvasRef,\n          style: {\n            maxWidth: '400px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 549,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image-dimensions\",\n          children: [\"Size: \", imageDimensions.width, \" x \", imageDimensions.height, \" pixels\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 550,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 11\n      }, this), ((_images$currentImageI5 = images[currentImageIndex]) === null || _images$currentImageI5 === void 0 ? void 0 : (_images$currentImageI6 = _images$currentImageI5.results) === null || _images$currentImageI6 === void 0 ? void 0 : (_images$currentImageI7 = _images$currentImageI6[currentRegionIndex]) === null || _images$currentImageI7 === void 0 ? void 0 : _images$currentImageI7.croppedImageData) && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-preview\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Cropped Region \", currentRegionIndex + 1, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 558,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: images[currentImageIndex].results[currentRegionIndex].croppedImageData,\n          alt: \"Cropped\",\n          style: {\n            maxWidth: '400px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 557,\n        columnNumber: 13\n      }, this), ((_images$currentImageI8 = images[currentImageIndex]) === null || _images$currentImageI8 === void 0 ? void 0 : (_images$currentImageI9 = _images$currentImageI8.results) === null || _images$currentImageI9 === void 0 ? void 0 : (_images$currentImageI10 = _images$currentImageI9[currentRegionIndex]) === null || _images$currentImageI10 === void 0 ? void 0 : _images$currentImageI10.text) && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Extracted Text from Region \", currentRegionIndex + 1, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 570,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: images[currentImageIndex].results[currentRegionIndex].text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 571,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 569,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 545,\n      columnNumber: 9\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Processing image...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 578,\n      columnNumber: 21\n    }, this), images.length > 0 && images.some(img => img.results && img.results.some(result => result === null || result === void 0 ? void 0 : result.text)) && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"export-container\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: exportToCSV,\n        className: \"export-button\",\n        children: \"Export Results as CSV\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 583,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 582,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 425,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"rnaTGVMrOzled1vtO5e/uNx4OP4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Tesseract","jsxDEV","_jsxDEV","App","_s","_images$currentImageI5","_images$currentImageI6","_images$currentImageI7","_images$currentImageI8","_images$currentImageI9","_images$currentImageI10","images","setImages","currentImageIndex","setCurrentImageIndex","text","setText","isLoading","setIsLoading","batchProgress","setBatchProgress","current","total","imageDimensions","setImageDimensions","width","height","coordinates","setCoordinates","minX","maxX","minY","maxY","currentRegionIndex","setCurrentRegionIndex","regions","setRegions","croppedImageData","canvasRef","drawRectangles","img","canvas","ctx","getContext","drawImage","length","forEach","region","index","strokeStyle","lineWidth","strokeRect","fillStyle","font","fillText","Image","src","url","onload","handleImageChange","e","target","files","newImages","Array","from","map","file","URL","createObjectURL","results","fill","prev","handleImageSelect","_images$index","addRegion","newRegion","deleteRegion","_images$currentImageI","_images$currentImageI2","alert","regionIndexToDelete","updatedRegions","splice","updatedResults","newIndex","handleRegionSelect","_images$currentImageI3","_images$currentImageI4","cropImage","imageElement","coords","document","createElement","toDataURL","processRegionOCR","imageUrl","regionCoords","Promise","resolve","reject","recognize","logger","m","console","log","then","data","catch","handleRunOCR","newRegions","error","handleRunOCRAllRegions","all","idx","handleRunOCRAll","totalOperations","processedCount","_updatedImages$curren","_updatedImages$curren2","updatedImages","handleCurrentRegionCoordinatesChange","name","value","newCoordinates","parseInt","exportToCSV","csvContent","imgIndex","result","regionIndex","cleanedText","replace","blob","Blob","type","link","setAttribute","style","visibility","body","appendChild","click","removeChild","className","children","fileName","_jsxFileName","lineNumber","columnNumber","accept","multiple","onChange","onClick","alt","placeholder","disabled","ref","maxWidth","some","_c","$RefreshReg$"],"sources":["/Users/yoonchulroh/Projects/ocr-app/src/App.js"],"sourcesContent":["// src/App.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport Tesseract from 'tesseract.js';\nimport './App.css';\n\nfunction App() {\n  const [images, setImages] = useState([]);\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\n  const [text, setText] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [batchProgress, setBatchProgress] = useState({ current: 0, total: 0 });\n  const [imageDimensions, setImageDimensions] = useState({ width: 0, height: 0 });\n  const [coordinates, setCoordinates] = useState({\n    minX: 0,\n    maxX: 0,\n    minY: 0,\n    maxY: 0\n  });\n  const [currentRegionIndex, setCurrentRegionIndex] = useState(0);\n  // Shared regions across all images\n  const [regions, setRegions] = useState([{\n    coordinates: { minX: 0, maxX: 0, minY: 0, maxY: 0 },\n    text: '',\n    croppedImageData: null\n  }]);\n  const canvasRef = useRef(null);\n\n  // Draw rectangles on image\n  const drawRectangles = (img) => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    \n    // Set canvas size to match image\n    canvas.width = img.width;\n    canvas.height = img.height;\n    \n    // Draw the image\n    ctx.drawImage(img, 0, 0);\n    \n    // Draw all regions with different colors\n    if (regions.length > 0) {\n      regions.forEach((region, index) => {\n        // Different color for current region\n        ctx.strokeStyle = index === currentRegionIndex ? 'red' : 'blue';\n        ctx.lineWidth = 2;\n        ctx.strokeRect(\n          region.coordinates.minX,\n          region.coordinates.minY,\n          region.coordinates.maxX - region.coordinates.minX,\n          region.coordinates.maxY - region.coordinates.minY\n        );\n        \n        // Add region number label\n        ctx.fillStyle = index === currentRegionIndex ? 'red' : 'blue';\n        ctx.font = '14px Arial';\n        ctx.fillText(`Region ${index + 1}`, region.coordinates.minX, region.coordinates.minY - 5);\n      });\n    }\n  };\n\n  // Update rectangles when coordinates or regions change\n  useEffect(() => {\n    if (images[currentImageIndex]) {\n      const img = new Image();\n      img.src = images[currentImageIndex].url;\n      img.onload = () => {\n        drawRectangles(img);\n        setImageDimensions({ width: img.width, height: img.height });\n      };\n    }\n  }, [coordinates, currentImageIndex, images, currentRegionIndex, regions]);\n\n  // Handle image upload\n  const handleImageChange = (e) => {\n    if (e.target.files) {\n      const newImages = Array.from(e.target.files).map(file => ({\n        url: URL.createObjectURL(file),\n        results: Array(regions.length).fill(null).map(() => ({\n          text: '',\n          croppedImageData: null\n        }))\n      }));\n      setImages(prev => [...prev, ...newImages]);\n      setCurrentImageIndex(prev => prev + newImages.length - 1);\n    }\n  };\n\n  // Handle image selection\n  const handleImageSelect = (index) => {\n    setCurrentImageIndex(index);\n    setCurrentRegionIndex(0);\n    \n    // Update text if available for the current region\n    if (images[index]?.results && images[index].results[0]) {\n      setText(images[index].results[0].text || '');\n    } else {\n      setText('');\n    }\n  };\n\n  // Add a new region\n  const addRegion = () => {\n    // Create new region object\n    const newRegion = {\n      coordinates: { minX: 0, maxX: 0, minY: 0, maxY: 0 },\n      text: '',\n      croppedImageData: null\n    };\n    \n    // Add the new region to shared regions\n    setRegions(prev => [...prev, newRegion]);\n    \n    // Update the images to include results for the new region\n    setImages(prev => {\n      return prev.map(img => ({\n        ...img,\n        results: [...(img.results || []), { text: '', croppedImageData: null }]\n      }));\n    });\n    \n    // Set the current region to the new one\n    setCurrentRegionIndex(regions.length);\n    setCoordinates({ minX: 0, maxX: 0, minY: 0, maxY: 0 });\n    setText('');\n  };\n\n  // Delete current region\n  const deleteRegion = () => {\n    // Don't allow deleting if only one region\n    if (regions.length <= 1) {\n      alert(\"Can't delete the only region. At least one region is required.\");\n      return;\n    }\n    \n    const regionIndexToDelete = currentRegionIndex;\n    \n    // Remove the region from shared regions\n    setRegions(prev => {\n      const updatedRegions = [...prev];\n      updatedRegions.splice(regionIndexToDelete, 1);\n      return updatedRegions;\n    });\n    \n    // Update images to remove results for the deleted region\n    setImages(prev => {\n      return prev.map(img => {\n        const updatedResults = [...(img.results || [])];\n        updatedResults.splice(regionIndexToDelete, 1);\n        return {\n          ...img,\n          results: updatedResults\n        };\n      });\n    });\n    \n    // Set the current region index\n    setCurrentRegionIndex(prev => \n      prev >= regions.length - 1 ? regions.length - 2 : prev\n    );\n    \n    // Update coordinates to the new current region\n    if (regions.length > 1) {\n      const newIndex = currentRegionIndex >= regions.length - 1 ? \n        regions.length - 2 : currentRegionIndex;\n      setCoordinates(regions[newIndex].coordinates);\n    }\n    \n    // Update text\n    const newIndex = currentRegionIndex >= regions.length - 1 ? \n      regions.length - 2 : currentRegionIndex;\n    if (images[currentImageIndex]?.results?.[newIndex]) {\n      setText(images[currentImageIndex].results[newIndex].text || '');\n    } else {\n      setText('');\n    }\n  };\n\n  // Handle region selection\n  const handleRegionSelect = (index) => {\n    setCurrentRegionIndex(index);\n    setCoordinates(regions[index].coordinates);\n    \n    // Update text based on the selected region for the current image\n    if (images[currentImageIndex]?.results?.[index]) {\n      setText(images[currentImageIndex].results[index].text || '');\n    } else {\n      setText('');\n    }\n  };\n\n  // Crop image using coordinates\n  const cropImage = (imageElement, coords) => {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    \n    // Set canvas size to the specified dimensions\n    canvas.width = coords.maxX - coords.minX;\n    canvas.height = coords.maxY - coords.minY;\n    \n    // Draw the cropped region\n    ctx.drawImage(\n      imageElement,\n      coords.minX, coords.minY,\n      coords.maxX - coords.minX, coords.maxY - coords.minY,\n      0, 0,\n      coords.maxX - coords.minX, coords.maxY - coords.minY\n    );\n    \n    return canvas.toDataURL('image/png');\n  };\n\n  // Process single region with OCR\n  const processRegionOCR = (imageUrl, regionCoords) => {\n    return new Promise((resolve, reject) => {\n      const img = new Image();\n      img.src = imageUrl;\n      \n      img.onload = () => {\n        const croppedImageData = cropImage(img, regionCoords);\n        \n        Tesseract.recognize(\n          croppedImageData,\n          'eng',\n          {\n            logger: (m) => console.log(m)\n          }\n        )\n          .then(({ data: { text } }) => {\n            resolve({ text, croppedImageData });\n          })\n          .catch(reject);\n      };\n    });\n  };\n\n  // Process image and run OCR for current region\n  const handleRunOCR = () => {\n    if (!images[currentImageIndex]) {\n      alert('Please upload an image first');\n      return;\n    }\n\n    setIsLoading(true);\n    processRegionOCR(images[currentImageIndex].url, regions[currentRegionIndex].coordinates)\n      .then(({ text, croppedImageData }) => {\n        setText(text);\n        \n        // Update regions with the coordinates\n        setRegions(prev => {\n          const newRegions = [...prev];\n          newRegions[currentRegionIndex] = {\n            ...newRegions[currentRegionIndex],\n            coordinates: regions[currentRegionIndex].coordinates\n          };\n          return newRegions;\n        });\n        \n        // Update the current image's results for the current region\n        setImages(prev => {\n          const newImages = [...prev];\n          if (!newImages[currentImageIndex].results) {\n            newImages[currentImageIndex].results = Array(regions.length).fill(null).map(() => ({\n              text: '',\n              croppedImageData: null\n            }));\n          }\n          newImages[currentImageIndex].results[currentRegionIndex] = {\n            text,\n            croppedImageData\n          };\n          return newImages;\n        });\n        \n        setIsLoading(false);\n      })\n      .catch(error => {\n        console.error(error);\n        setIsLoading(false);\n      });\n  };\n\n  // Process all regions in current image\n  const handleRunOCRAllRegions = async () => {\n    if (!images[currentImageIndex]) {\n      alert('Please upload an image first');\n      return;\n    }\n\n    if (regions.length === 0) {\n      alert('No regions defined');\n      return;\n    }\n\n    setIsLoading(true);\n    setBatchProgress({ current: 0, total: regions.length });\n\n    try {\n      const results = await Promise.all(\n        regions.map(async (region, idx) => {\n          const { text, croppedImageData } = await processRegionOCR(\n            images[currentImageIndex].url, \n            region.coordinates\n          );\n          setBatchProgress(prev => ({ ...prev, current: idx + 1 }));\n          return { text, croppedImageData };\n        })\n      );\n\n      // Update the current image's results\n      setImages(prev => {\n        const newImages = [...prev];\n        newImages[currentImageIndex].results = results;\n        return newImages;\n      });\n      \n      // Update text for current region\n      setText(results[currentRegionIndex].text);\n      setIsLoading(false);\n      setBatchProgress({ current: 0, total: 0 });\n    } catch (error) {\n      console.error(error);\n      setIsLoading(false);\n      setBatchProgress({ current: 0, total: 0 });\n    }\n  };\n\n  // Process all images with OCR (all regions)\n  const handleRunOCRAll = async () => {\n    if (images.length === 0) {\n      alert('Please upload images first');\n      return;\n    }\n\n    setIsLoading(true);\n    const totalOperations = images.length * regions.length;\n    setBatchProgress({ current: 0, total: totalOperations });\n    \n    let processedCount = 0;\n\n    try {\n      const updatedImages = await Promise.all(\n        images.map(async (img) => {\n          const results = await Promise.all(\n            regions.map(async (region) => {\n              const { text, croppedImageData } = await processRegionOCR(\n                img.url, \n                region.coordinates\n              );\n              processedCount++;\n              setBatchProgress({ current: processedCount, total: totalOperations });\n              return { text, croppedImageData };\n            })\n          );\n          return { ...img, results };\n        })\n      );\n\n      setImages(updatedImages);\n      \n      // Update text for current image and region\n      if (updatedImages[currentImageIndex]?.results?.[currentRegionIndex]) {\n        setText(updatedImages[currentImageIndex].results[currentRegionIndex].text || '');\n      }\n      \n      setIsLoading(false);\n      setBatchProgress({ current: 0, total: 0 });\n    } catch (error) {\n      console.error(error);\n      setIsLoading(false);\n      setBatchProgress({ current: 0, total: 0 });\n    }\n  };\n\n  // Handle coordinate changes for current region\n  const handleCurrentRegionCoordinatesChange = (e) => {\n    const { name, value } = e.target;\n    const newCoordinates = {\n      ...coordinates,\n      [name]: parseInt(value) || 0\n    };\n    setCoordinates(newCoordinates);\n    \n    // Update coordinates in the regions array\n    setRegions(prev => {\n      const newRegions = [...prev];\n      newRegions[currentRegionIndex].coordinates = newCoordinates;\n      return newRegions;\n    });\n  };\n\n  // Export results as CSV\n  const exportToCSV = () => {\n    // Create CSV header\n    let csvContent = \"Image Name,Region,OCR Result\\n\";\n    \n    // Add each image and region data as rows\n    images.forEach((img, imgIndex) => {\n      if (img.results) {\n        img.results.forEach((result, regionIndex) => {\n          // Clean text data by escaping quotes and removing line breaks\n          const cleanedText = result.text ? result.text.replace(/\"/g, '\"\"').replace(/\\n/g, ' ') : '';\n          // Add row to CSV\n          csvContent += `\"Image ${imgIndex + 1}\",\"Region ${regionIndex + 1}\",\"${cleanedText}\"\\n`;\n        });\n      }\n    });\n    \n    // Create a blob with the CSV content\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const url = URL.createObjectURL(blob);\n    \n    // Create a link element to trigger download\n    const link = document.createElement('a');\n    link.setAttribute('href', url);\n    link.setAttribute('download', 'ocr_results.csv');\n    link.style.visibility = 'hidden';\n    \n    // Add to document, click to download, then remove\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>OCR Image to Text</h1>\n      \n      {/* Image Upload */}\n      <div>\n        <input\n          type=\"file\"\n          accept=\"image/*\"\n          multiple\n          onChange={handleImageChange}\n        />\n      </div>\n\n      {/* Image Selection */}\n      {images.length > 0 && (\n        <div className=\"image-selection\">\n          <h3>Select Image:</h3>\n          <div className=\"image-thumbnails\">\n            {images.map((img, index) => (\n              <div \n                key={index}\n                className={`image-thumbnail ${index === currentImageIndex ? 'selected' : ''}`}\n                onClick={() => handleImageSelect(index)}\n              >\n                <img src={img.url} alt={`Thumbnail ${index + 1}`} />\n                <span>Image {index + 1}</span>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Region Selection - now shared across all images */}\n      {images.length > 0 && regions.length > 0 && (\n        <div className=\"region-selection\">\n          <h3>Regions (Shared Across All Images):</h3>\n          <div className=\"region-controls\">\n            <button onClick={addRegion} className=\"control-button\">Add Region</button>\n            <button onClick={deleteRegion} className=\"control-button\">Delete Region</button>\n          </div>\n          <div className=\"region-tabs\">\n            {regions.map((region, index) => (\n              <div \n                key={index}\n                className={`region-tab ${index === currentRegionIndex ? 'selected' : ''}`}\n                onClick={() => handleRegionSelect(index)}\n              >\n                Region {index + 1}\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Coordinate Inputs */}\n      {images.length > 0 && (\n        <div className=\"coordinates-input\">\n          <h3>Enter Coordinates for Region {currentRegionIndex + 1}</h3>\n          <div className=\"coordinate-group\">\n            <div>\n              <label>Min X:</label>\n              <input\n                type=\"number\"\n                name=\"minX\"\n                value={coordinates.minX}\n                onChange={handleCurrentRegionCoordinatesChange}\n                placeholder=\"Min X\"\n              />\n            </div>\n            <div>\n              <label>Max X:</label>\n              <input\n                type=\"number\"\n                name=\"maxX\"\n                value={coordinates.maxX}\n                onChange={handleCurrentRegionCoordinatesChange}\n                placeholder=\"Max X\"\n              />\n            </div>\n            <div>\n              <label>Min Y:</label>\n              <input\n                type=\"number\"\n                name=\"minY\"\n                value={coordinates.minY}\n                onChange={handleCurrentRegionCoordinatesChange}\n                placeholder=\"Min Y\"\n              />\n            </div>\n            <div>\n              <label>Max Y:</label>\n              <input\n                type=\"number\"\n                name=\"maxY\"\n                value={coordinates.maxY}\n                onChange={handleCurrentRegionCoordinatesChange}\n                placeholder=\"Max Y\"\n              />\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* OCR Buttons */}\n      {images.length > 0 && (\n        <div className=\"run-ocr\">\n          <button onClick={handleRunOCR} disabled={isLoading}>\n            {isLoading ? 'Processing...' : 'Run OCR on Current Region'}\n          </button>\n          <button onClick={handleRunOCRAllRegions} disabled={isLoading} className=\"run-regions-button\">\n            {isLoading ? 'Processing...' : 'Run OCR on All Regions'}\n          </button>\n          <button onClick={handleRunOCRAll} disabled={isLoading} className=\"run-all-button\">\n            {isLoading ? `Processing ${batchProgress.current}/${batchProgress.total}...` : 'Run OCR on All Images'}\n          </button>\n        </div>\n      )}\n\n      {/* Image Previews Container */}\n      {images.length > 0 && (\n        <div className=\"image-preview-container\">\n          {/* Original Image with Rectangle */}\n          <div className=\"image-preview\">\n            <h2>Original Image:</h2>\n            <canvas ref={canvasRef} style={{ maxWidth: '400px' }} />\n            <div className=\"image-dimensions\">\n              Size: {imageDimensions.width} x {imageDimensions.height} pixels\n            </div>\n          </div>\n\n          {/* Cropped Image Preview */}\n          {images[currentImageIndex]?.results?.[currentRegionIndex]?.croppedImageData && (\n            <div className=\"image-preview\">\n              <h2>Cropped Region {currentRegionIndex + 1}:</h2>\n              <img \n                src={images[currentImageIndex].results[currentRegionIndex].croppedImageData} \n                alt=\"Cropped\" \n                style={{ maxWidth: '400px' }} \n              />\n            </div>\n          )}\n\n          {/* Extracted Text */}\n          {images[currentImageIndex]?.results?.[currentRegionIndex]?.text && (\n            <div className=\"result\">\n              <h2>Extracted Text from Region {currentRegionIndex + 1}:</h2>\n              <pre>{images[currentImageIndex].results[currentRegionIndex].text}</pre>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Loading Indicator */}\n      {isLoading && <p>Processing image...</p>}\n      \n      {/* Export Button */}\n      {images.length > 0 && images.some(img => img.results && img.results.some(result => result?.text)) && (\n        <div className=\"export-container\">\n          <button onClick={exportToCSV} className=\"export-button\">\n            Export Results as CSV\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}