{"ast":null,"code":"var _jsxFileName = \"/Users/yoonchulroh/Projects/ocr-app/src/App.js\",\n  _s = $RefreshSig$();\n// src/App.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport Tesseract from 'tesseract.js';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  var _images$currentImageI, _images$currentImageI2, _images$currentImageI3, _images$currentImageI4, _images$currentImageI5, _images$currentImageI6, _images$currentImageI7, _images$currentImageI8;\n  const [images, setImages] = useState([]);\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\n  const [text, setText] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [batchProgress, setBatchProgress] = useState({\n    current: 0,\n    total: 0\n  });\n  const [imageDimensions, setImageDimensions] = useState({\n    width: 0,\n    height: 0\n  });\n  const [coordinates, setCoordinates] = useState({\n    minX: 0,\n    maxX: 0,\n    minY: 0,\n    maxY: 0\n  });\n  const [currentRegionIndex, setCurrentRegionIndex] = useState(0);\n  const canvasRef = useRef(null);\n\n  // Draw rectangles on image\n  const drawRectangles = img => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Set canvas size to match image\n    canvas.width = img.width;\n    canvas.height = img.height;\n\n    // Draw the image\n    ctx.drawImage(img, 0, 0);\n\n    // Get current image\n    const currentImage = images[currentImageIndex];\n    if (!currentImage) return;\n\n    // Draw all regions with different colors\n    if (currentImage.regions && currentImage.regions.length > 0) {\n      currentImage.regions.forEach((region, index) => {\n        // Different color for current region\n        ctx.strokeStyle = index === currentRegionIndex ? 'red' : 'blue';\n        ctx.lineWidth = 2;\n        ctx.strokeRect(region.coordinates.minX, region.coordinates.minY, region.coordinates.maxX - region.coordinates.minX, region.coordinates.maxY - region.coordinates.minY);\n\n        // Add region number label\n        ctx.fillStyle = index === currentRegionIndex ? 'red' : 'blue';\n        ctx.font = '14px Arial';\n        ctx.fillText(`Region ${index + 1}`, region.coordinates.minX, region.coordinates.minY - 5);\n      });\n    }\n  };\n\n  // Update rectangles when coordinates or regions change\n  useEffect(() => {\n    if (images[currentImageIndex]) {\n      const img = new Image();\n      img.src = images[currentImageIndex].url;\n      img.onload = () => {\n        drawRectangles(img);\n        setImageDimensions({\n          width: img.width,\n          height: img.height\n        });\n      };\n    }\n  }, [coordinates, currentImageIndex, images, currentRegionIndex]);\n\n  // Handle image upload\n  const handleImageChange = e => {\n    if (e.target.files) {\n      const newImages = Array.from(e.target.files).map(file => ({\n        url: URL.createObjectURL(file),\n        regions: [{\n          coordinates: {\n            minX: 0,\n            maxX: 0,\n            minY: 0,\n            maxY: 0\n          },\n          text: '',\n          croppedImageData: null\n        }]\n      }));\n      setImages(prev => [...prev, ...newImages]);\n      setCurrentImageIndex(prev => prev + newImages.length - 1);\n      setCurrentRegionIndex(0);\n    }\n  };\n\n  // Handle image selection\n  const handleImageSelect = index => {\n    setCurrentImageIndex(index);\n    setCurrentRegionIndex(0);\n\n    // Update coordinates based on the first region of selected image\n    if (images[index].regions && images[index].regions.length > 0) {\n      setCoordinates(images[index].regions[0].coordinates);\n    }\n\n    // Update text if available\n    if (images[index].regions && images[index].regions[0].text) {\n      setText(images[index].regions[0].text);\n    } else {\n      setText('');\n    }\n  };\n\n  // Add a new region\n  const addRegion = () => {\n    const newRegion = {\n      coordinates: {\n        minX: 0,\n        maxX: 0,\n        minY: 0,\n        maxY: 0\n      },\n      text: '',\n      croppedImageData: null\n    };\n    setImages(prev => {\n      const newImages = [...prev];\n      newImages[currentImageIndex].regions.push(newRegion);\n      return newImages;\n    });\n\n    // Switch to the new region - use a callback to get the updated length\n    setCurrentRegionIndex(prev => {\n      return images[currentImageIndex].regions.length;\n    });\n    setCoordinates({\n      minX: 0,\n      maxX: 0,\n      minY: 0,\n      maxY: 0\n    });\n    setText('');\n  };\n\n  // Delete current region\n  const deleteRegion = () => {\n    // Don't allow deleting if only one region\n    if (images[currentImageIndex].regions.length <= 1) {\n      alert(\"Can't delete the only region. At least one region is required.\");\n      return;\n    }\n    const regionIndexToDelete = currentRegionIndex;\n\n    // First update the images array\n    setImages(prev => {\n      const newImages = [...prev];\n      // Save a copy of the regions before modification\n      const updatedRegions = [...newImages[currentImageIndex].regions];\n      updatedRegions.splice(regionIndexToDelete, 1);\n      newImages[currentImageIndex].regions = updatedRegions;\n      return newImages;\n    });\n\n    // Then update the current region index\n    setCurrentRegionIndex(prev => {\n      // If we're deleting the last region, go to the previous one\n      if (prev >= images[currentImageIndex].regions.length - 1) {\n        return Math.max(0, images[currentImageIndex].regions.length - 2);\n      }\n      // Otherwise stay on the same index (which now points to the next region)\n      return prev;\n    });\n\n    // Update coordinates and text in next render cycle\n    setTimeout(() => {\n      if (images[currentImageIndex].regions.length > 0) {\n        const newRegionIndex = Math.min(currentRegionIndex, images[currentImageIndex].regions.length - 1);\n        if (images[currentImageIndex].regions[newRegionIndex]) {\n          setCoordinates(images[currentImageIndex].regions[newRegionIndex].coordinates);\n          setText(images[currentImageIndex].regions[newRegionIndex].text || '');\n        }\n      }\n    }, 0);\n  };\n\n  // Handle region selection\n  const handleRegionSelect = index => {\n    setCurrentRegionIndex(index);\n    const region = images[currentImageIndex].regions[index];\n    setCoordinates(region.coordinates);\n    setText(region.text || '');\n  };\n\n  // Crop image using coordinates\n  const cropImage = (imageElement, coords) => {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n\n    // Set canvas size to the specified dimensions\n    canvas.width = coords.maxX - coords.minX;\n    canvas.height = coords.maxY - coords.minY;\n\n    // Draw the cropped region\n    ctx.drawImage(imageElement, coords.minX, coords.minY, coords.maxX - coords.minX, coords.maxY - coords.minY, 0, 0, coords.maxX - coords.minX, coords.maxY - coords.minY);\n    return canvas.toDataURL('image/png');\n  };\n\n  // Process single region with OCR\n  const processRegionOCR = (imageUrl, regionCoords) => {\n    return new Promise((resolve, reject) => {\n      const img = new Image();\n      img.src = imageUrl;\n      img.onload = () => {\n        const croppedImageData = cropImage(img, regionCoords);\n        Tesseract.recognize(croppedImageData, 'eng', {\n          logger: m => console.log(m)\n        }).then(({\n          data: {\n            text\n          }\n        }) => {\n          resolve({\n            text,\n            croppedImageData\n          });\n        }).catch(reject);\n      };\n    });\n  };\n\n  // Process image and run OCR for current region\n  const handleRunOCR = () => {\n    if (!images[currentImageIndex]) {\n      alert('Please upload an image first');\n      return;\n    }\n    setIsLoading(true);\n    processRegionOCR(images[currentImageIndex].url, coordinates).then(({\n      text,\n      croppedImageData\n    }) => {\n      setText(text);\n      setImages(prev => {\n        const newImages = [...prev];\n        newImages[currentImageIndex].regions[currentRegionIndex] = {\n          ...newImages[currentImageIndex].regions[currentRegionIndex],\n          text,\n          coordinates,\n          croppedImageData\n        };\n        return newImages;\n      });\n      setIsLoading(false);\n    }).catch(error => {\n      console.error(error);\n      setIsLoading(false);\n    });\n  };\n\n  // Process all regions in current image\n  const handleRunOCRAllRegions = async () => {\n    if (!images[currentImageIndex]) {\n      alert('Please upload an image first');\n      return;\n    }\n    const regions = images[currentImageIndex].regions;\n    if (regions.length === 0) {\n      alert('No regions defined');\n      return;\n    }\n    setIsLoading(true);\n    setBatchProgress({\n      current: 0,\n      total: regions.length\n    });\n    try {\n      const updatedRegions = await Promise.all(regions.map(async (region, idx) => {\n        const {\n          text,\n          croppedImageData\n        } = await processRegionOCR(images[currentImageIndex].url, region.coordinates);\n        setBatchProgress(prev => ({\n          ...prev,\n          current: idx + 1\n        }));\n        return {\n          ...region,\n          text,\n          croppedImageData\n        };\n      }));\n      setImages(prev => {\n        const newImages = [...prev];\n        newImages[currentImageIndex].regions = updatedRegions;\n        return newImages;\n      });\n      setText(updatedRegions[currentRegionIndex].text);\n      setIsLoading(false);\n      setBatchProgress({\n        current: 0,\n        total: 0\n      });\n    } catch (error) {\n      console.error(error);\n      setIsLoading(false);\n      setBatchProgress({\n        current: 0,\n        total: 0\n      });\n    }\n  };\n\n  // Process all images with OCR (all regions)\n  const handleRunOCRAll = async () => {\n    if (images.length === 0) {\n      alert('Please upload images first');\n      return;\n    }\n    setIsLoading(true);\n    let totalRegions = 0;\n    images.forEach(img => totalRegions += img.regions.length);\n    setBatchProgress({\n      current: 0,\n      total: totalRegions\n    });\n    let processedCount = 0;\n    try {\n      var _updatedImages$curren, _updatedImages$curren2;\n      const updatedImages = await Promise.all(images.map(async img => {\n        const updatedRegions = await Promise.all(img.regions.map(async region => {\n          const {\n            text,\n            croppedImageData\n          } = await processRegionOCR(img.url, region.coordinates);\n          processedCount++;\n          setBatchProgress({\n            current: processedCount,\n            total: totalRegions\n          });\n          return {\n            ...region,\n            text,\n            croppedImageData\n          };\n        }));\n        return {\n          ...img,\n          regions: updatedRegions\n        };\n      }));\n      setImages(updatedImages);\n      if ((_updatedImages$curren = updatedImages[currentImageIndex]) !== null && _updatedImages$curren !== void 0 && (_updatedImages$curren2 = _updatedImages$curren.regions[currentRegionIndex]) !== null && _updatedImages$curren2 !== void 0 && _updatedImages$curren2.text) {\n        setText(updatedImages[currentImageIndex].regions[currentRegionIndex].text);\n      }\n      setIsLoading(false);\n      setBatchProgress({\n        current: 0,\n        total: 0\n      });\n    } catch (error) {\n      console.error(error);\n      setIsLoading(false);\n      setBatchProgress({\n        current: 0,\n        total: 0\n      });\n    }\n  };\n\n  // Handle coordinate changes for current region\n  const handleCurrentRegionCoordinatesChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    const newCoordinates = {\n      ...coordinates,\n      [name]: parseInt(value) || 0\n    };\n    setCoordinates(newCoordinates);\n\n    // Update coordinates in the images array\n    setImages(prev => {\n      const newImages = [...prev];\n      if (newImages[currentImageIndex].regions[currentRegionIndex]) {\n        newImages[currentImageIndex].regions[currentRegionIndex].coordinates = newCoordinates;\n      }\n      return newImages;\n    });\n  };\n\n  // Export results as CSV\n  const exportToCSV = () => {\n    // Create CSV header\n    let csvContent = \"Image Name,Region,OCR Result\\n\";\n\n    // Add each image and region data as rows\n    images.forEach((img, imgIndex) => {\n      img.regions.forEach((region, regionIndex) => {\n        // Clean text data by escaping quotes and removing line breaks\n        const cleanedText = region.text ? region.text.replace(/\"/g, '\"\"').replace(/\\n/g, ' ') : '';\n        // Add row to CSV\n        csvContent += `\"Image ${imgIndex + 1}\",\"Region ${regionIndex + 1}\",\"${cleanedText}\"\\n`;\n      });\n    });\n\n    // Create a blob with the CSV content\n    const blob = new Blob([csvContent], {\n      type: 'text/csv;charset=utf-8;'\n    });\n    const url = URL.createObjectURL(blob);\n\n    // Create a link element to trigger download\n    const link = document.createElement('a');\n    link.setAttribute('href', url);\n    link.setAttribute('download', 'ocr_results.csv');\n    link.style.visibility = 'hidden';\n\n    // Add to document, click to download, then remove\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"OCR Image to Text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        multiple: true,\n        onChange: handleImageChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 7\n    }, this), images.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-selection\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Select Image:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-thumbnails\",\n        children: images.map((img, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `image-thumbnail ${index === currentImageIndex ? 'selected' : ''}`,\n          onClick: () => handleImageSelect(index),\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: img.url,\n            alt: `Thumbnail ${index + 1}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Image \", index + 1]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 417,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 9\n    }, this), images.length > 0 && ((_images$currentImageI = images[currentImageIndex]) === null || _images$currentImageI === void 0 ? void 0 : (_images$currentImageI2 = _images$currentImageI.regions) === null || _images$currentImageI2 === void 0 ? void 0 : _images$currentImageI2.length) > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"region-selection\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Regions:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"region-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addRegion,\n          className: \"control-button\",\n          children: \"Add Region\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: deleteRegion,\n          className: \"control-button\",\n          children: \"Delete Region\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"region-tabs\",\n        children: images[currentImageIndex].regions.map((region, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `region-tab ${index === currentRegionIndex ? 'selected' : ''}`,\n          onClick: () => handleRegionSelect(index),\n          children: [\"Region \", index + 1]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 434,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 9\n    }, this), images.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"coordinates-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Enter Coordinates for Region \", currentRegionIndex + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"coordinate-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Min X:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            name: \"minX\",\n            value: coordinates.minX,\n            onChange: handleCurrentRegionCoordinatesChange,\n            placeholder: \"Min X\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 453,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Max X:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 462,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            name: \"maxX\",\n            value: coordinates.maxX,\n            onChange: handleCurrentRegionCoordinatesChange,\n            placeholder: \"Max X\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 463,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Min Y:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 472,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            name: \"minY\",\n            value: coordinates.minY,\n            onChange: handleCurrentRegionCoordinatesChange,\n            placeholder: \"Min Y\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 473,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Max Y:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 482,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            name: \"maxY\",\n            value: coordinates.maxY,\n            onChange: handleCurrentRegionCoordinatesChange,\n            placeholder: \"Max Y\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 483,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 448,\n      columnNumber: 9\n    }, this), images.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"run-ocr\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRunOCR,\n        disabled: isLoading,\n        children: isLoading ? 'Processing...' : 'Run OCR on Current Region'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRunOCRAllRegions,\n        disabled: isLoading,\n        className: \"run-regions-button\",\n        children: isLoading ? 'Processing...' : 'Run OCR on All Regions'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRunOCRAll,\n        disabled: isLoading,\n        className: \"run-all-button\",\n        children: isLoading ? `Processing ${batchProgress.current}/${batchProgress.total}...` : 'Run OCR on All Images'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 504,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 497,\n      columnNumber: 9\n    }, this), images.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-preview-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-preview\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Original Image:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: canvasRef,\n          style: {\n            maxWidth: '400px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image-dimensions\",\n          children: [\"Size: \", imageDimensions.width, \" x \", imageDimensions.height, \" pixels\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 11\n      }, this), ((_images$currentImageI3 = images[currentImageIndex]) === null || _images$currentImageI3 === void 0 ? void 0 : (_images$currentImageI4 = _images$currentImageI3.regions) === null || _images$currentImageI4 === void 0 ? void 0 : (_images$currentImageI5 = _images$currentImageI4[currentRegionIndex]) === null || _images$currentImageI5 === void 0 ? void 0 : _images$currentImageI5.croppedImageData) && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-preview\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Cropped Region \", currentRegionIndex + 1, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 525,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: images[currentImageIndex].regions[currentRegionIndex].croppedImageData,\n          alt: \"Cropped\",\n          style: {\n            maxWidth: '400px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 13\n      }, this), ((_images$currentImageI6 = images[currentImageIndex]) === null || _images$currentImageI6 === void 0 ? void 0 : (_images$currentImageI7 = _images$currentImageI6.regions) === null || _images$currentImageI7 === void 0 ? void 0 : (_images$currentImageI8 = _images$currentImageI7[currentRegionIndex]) === null || _images$currentImageI8 === void 0 ? void 0 : _images$currentImageI8.text) && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Extracted Text from Region \", currentRegionIndex + 1, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 537,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: images[currentImageIndex].regions[currentRegionIndex].text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 512,\n      columnNumber: 9\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Processing image...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 545,\n      columnNumber: 21\n    }, this), images.length > 0 && images.some(img => img.regions && img.regions.some(region => region.text)) && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"export-container\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: exportToCSV,\n        className: \"export-button\",\n        children: \"Export Results as CSV\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 549,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 392,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"FE9a6SzHOCWUTHD+ou9JjQDWKng=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Tesseract","jsxDEV","_jsxDEV","App","_s","_images$currentImageI","_images$currentImageI2","_images$currentImageI3","_images$currentImageI4","_images$currentImageI5","_images$currentImageI6","_images$currentImageI7","_images$currentImageI8","images","setImages","currentImageIndex","setCurrentImageIndex","text","setText","isLoading","setIsLoading","batchProgress","setBatchProgress","current","total","imageDimensions","setImageDimensions","width","height","coordinates","setCoordinates","minX","maxX","minY","maxY","currentRegionIndex","setCurrentRegionIndex","canvasRef","drawRectangles","img","canvas","ctx","getContext","drawImage","currentImage","regions","length","forEach","region","index","strokeStyle","lineWidth","strokeRect","fillStyle","font","fillText","Image","src","url","onload","handleImageChange","e","target","files","newImages","Array","from","map","file","URL","createObjectURL","croppedImageData","prev","handleImageSelect","addRegion","newRegion","push","deleteRegion","alert","regionIndexToDelete","updatedRegions","splice","Math","max","setTimeout","newRegionIndex","min","handleRegionSelect","cropImage","imageElement","coords","document","createElement","toDataURL","processRegionOCR","imageUrl","regionCoords","Promise","resolve","reject","recognize","logger","m","console","log","then","data","catch","handleRunOCR","error","handleRunOCRAllRegions","all","idx","handleRunOCRAll","totalRegions","processedCount","_updatedImages$curren","_updatedImages$curren2","updatedImages","handleCurrentRegionCoordinatesChange","name","value","newCoordinates","parseInt","exportToCSV","csvContent","imgIndex","regionIndex","cleanedText","replace","blob","Blob","type","link","setAttribute","style","visibility","body","appendChild","click","removeChild","className","children","fileName","_jsxFileName","lineNumber","columnNumber","accept","multiple","onChange","onClick","alt","placeholder","disabled","ref","maxWidth","some","_c","$RefreshReg$"],"sources":["/Users/yoonchulroh/Projects/ocr-app/src/App.js"],"sourcesContent":["// src/App.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport Tesseract from 'tesseract.js';\nimport './App.css';\n\nfunction App() {\n  const [images, setImages] = useState([]);\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\n  const [text, setText] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [batchProgress, setBatchProgress] = useState({ current: 0, total: 0 });\n  const [imageDimensions, setImageDimensions] = useState({ width: 0, height: 0 });\n  const [coordinates, setCoordinates] = useState({\n    minX: 0,\n    maxX: 0,\n    minY: 0,\n    maxY: 0\n  });\n  const [currentRegionIndex, setCurrentRegionIndex] = useState(0);\n  const canvasRef = useRef(null);\n\n  // Draw rectangles on image\n  const drawRectangles = (img) => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    \n    // Set canvas size to match image\n    canvas.width = img.width;\n    canvas.height = img.height;\n    \n    // Draw the image\n    ctx.drawImage(img, 0, 0);\n    \n    // Get current image\n    const currentImage = images[currentImageIndex];\n    if (!currentImage) return;\n    \n    // Draw all regions with different colors\n    if (currentImage.regions && currentImage.regions.length > 0) {\n      currentImage.regions.forEach((region, index) => {\n        // Different color for current region\n        ctx.strokeStyle = index === currentRegionIndex ? 'red' : 'blue';\n        ctx.lineWidth = 2;\n        ctx.strokeRect(\n          region.coordinates.minX,\n          region.coordinates.minY,\n          region.coordinates.maxX - region.coordinates.minX,\n          region.coordinates.maxY - region.coordinates.minY\n        );\n        \n        // Add region number label\n        ctx.fillStyle = index === currentRegionIndex ? 'red' : 'blue';\n        ctx.font = '14px Arial';\n        ctx.fillText(`Region ${index + 1}`, region.coordinates.minX, region.coordinates.minY - 5);\n      });\n    }\n  };\n\n  // Update rectangles when coordinates or regions change\n  useEffect(() => {\n    if (images[currentImageIndex]) {\n      const img = new Image();\n      img.src = images[currentImageIndex].url;\n      img.onload = () => {\n        drawRectangles(img);\n        setImageDimensions({ width: img.width, height: img.height });\n      };\n    }\n  }, [coordinates, currentImageIndex, images, currentRegionIndex]);\n\n  // Handle image upload\n  const handleImageChange = (e) => {\n    if (e.target.files) {\n      const newImages = Array.from(e.target.files).map(file => ({\n        url: URL.createObjectURL(file),\n        regions: [{\n          coordinates: { minX: 0, maxX: 0, minY: 0, maxY: 0 },\n          text: '',\n          croppedImageData: null\n        }]\n      }));\n      setImages(prev => [...prev, ...newImages]);\n      setCurrentImageIndex(prev => prev + newImages.length - 1);\n      setCurrentRegionIndex(0);\n    }\n  };\n\n  // Handle image selection\n  const handleImageSelect = (index) => {\n    setCurrentImageIndex(index);\n    setCurrentRegionIndex(0);\n    \n    // Update coordinates based on the first region of selected image\n    if (images[index].regions && images[index].regions.length > 0) {\n      setCoordinates(images[index].regions[0].coordinates);\n    }\n    \n    // Update text if available\n    if (images[index].regions && images[index].regions[0].text) {\n      setText(images[index].regions[0].text);\n    } else {\n      setText('');\n    }\n  };\n\n  // Add a new region\n  const addRegion = () => {\n    const newRegion = {\n      coordinates: { minX: 0, maxX: 0, minY: 0, maxY: 0 },\n      text: '',\n      croppedImageData: null\n    };\n    \n    setImages(prev => {\n      const newImages = [...prev];\n      newImages[currentImageIndex].regions.push(newRegion);\n      return newImages;\n    });\n    \n    // Switch to the new region - use a callback to get the updated length\n    setCurrentRegionIndex(prev => {\n      return images[currentImageIndex].regions.length;\n    });\n    setCoordinates({ minX: 0, maxX: 0, minY: 0, maxY: 0 });\n    setText('');\n  };\n\n  // Delete current region\n  const deleteRegion = () => {\n    // Don't allow deleting if only one region\n    if (images[currentImageIndex].regions.length <= 1) {\n      alert(\"Can't delete the only region. At least one region is required.\");\n      return;\n    }\n    \n    const regionIndexToDelete = currentRegionIndex;\n    \n    // First update the images array\n    setImages(prev => {\n      const newImages = [...prev];\n      // Save a copy of the regions before modification\n      const updatedRegions = [...newImages[currentImageIndex].regions];\n      updatedRegions.splice(regionIndexToDelete, 1);\n      newImages[currentImageIndex].regions = updatedRegions;\n      return newImages;\n    });\n    \n    // Then update the current region index\n    setCurrentRegionIndex(prev => {\n      // If we're deleting the last region, go to the previous one\n      if (prev >= images[currentImageIndex].regions.length - 1) {\n        return Math.max(0, images[currentImageIndex].regions.length - 2);\n      }\n      // Otherwise stay on the same index (which now points to the next region)\n      return prev;\n    });\n    \n    // Update coordinates and text in next render cycle\n    setTimeout(() => {\n      if (images[currentImageIndex].regions.length > 0) {\n        const newRegionIndex = Math.min(currentRegionIndex, images[currentImageIndex].regions.length - 1);\n        if (images[currentImageIndex].regions[newRegionIndex]) {\n          setCoordinates(images[currentImageIndex].regions[newRegionIndex].coordinates);\n          setText(images[currentImageIndex].regions[newRegionIndex].text || '');\n        }\n      }\n    }, 0);\n  };\n\n  // Handle region selection\n  const handleRegionSelect = (index) => {\n    setCurrentRegionIndex(index);\n    const region = images[currentImageIndex].regions[index];\n    setCoordinates(region.coordinates);\n    setText(region.text || '');\n  };\n\n  // Crop image using coordinates\n  const cropImage = (imageElement, coords) => {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    \n    // Set canvas size to the specified dimensions\n    canvas.width = coords.maxX - coords.minX;\n    canvas.height = coords.maxY - coords.minY;\n    \n    // Draw the cropped region\n    ctx.drawImage(\n      imageElement,\n      coords.minX, coords.minY,\n      coords.maxX - coords.minX, coords.maxY - coords.minY,\n      0, 0,\n      coords.maxX - coords.minX, coords.maxY - coords.minY\n    );\n    \n    return canvas.toDataURL('image/png');\n  };\n\n  // Process single region with OCR\n  const processRegionOCR = (imageUrl, regionCoords) => {\n    return new Promise((resolve, reject) => {\n      const img = new Image();\n      img.src = imageUrl;\n      \n      img.onload = () => {\n        const croppedImageData = cropImage(img, regionCoords);\n        \n        Tesseract.recognize(\n          croppedImageData,\n          'eng',\n          {\n            logger: (m) => console.log(m)\n          }\n        )\n          .then(({ data: { text } }) => {\n            resolve({ text, croppedImageData });\n          })\n          .catch(reject);\n      };\n    });\n  };\n\n  // Process image and run OCR for current region\n  const handleRunOCR = () => {\n    if (!images[currentImageIndex]) {\n      alert('Please upload an image first');\n      return;\n    }\n\n    setIsLoading(true);\n    processRegionOCR(images[currentImageIndex].url, coordinates)\n      .then(({ text, croppedImageData }) => {\n        setText(text);\n        setImages(prev => {\n          const newImages = [...prev];\n          newImages[currentImageIndex].regions[currentRegionIndex] = {\n            ...newImages[currentImageIndex].regions[currentRegionIndex],\n            text,\n            coordinates,\n            croppedImageData\n          };\n          return newImages;\n        });\n        setIsLoading(false);\n      })\n      .catch(error => {\n        console.error(error);\n        setIsLoading(false);\n      });\n  };\n\n  // Process all regions in current image\n  const handleRunOCRAllRegions = async () => {\n    if (!images[currentImageIndex]) {\n      alert('Please upload an image first');\n      return;\n    }\n\n    const regions = images[currentImageIndex].regions;\n    if (regions.length === 0) {\n      alert('No regions defined');\n      return;\n    }\n\n    setIsLoading(true);\n    setBatchProgress({ current: 0, total: regions.length });\n\n    try {\n      const updatedRegions = await Promise.all(\n        regions.map(async (region, idx) => {\n          const { text, croppedImageData } = await processRegionOCR(\n            images[currentImageIndex].url, \n            region.coordinates\n          );\n          setBatchProgress(prev => ({ ...prev, current: idx + 1 }));\n          return { ...region, text, croppedImageData };\n        })\n      );\n\n      setImages(prev => {\n        const newImages = [...prev];\n        newImages[currentImageIndex].regions = updatedRegions;\n        return newImages;\n      });\n      \n      setText(updatedRegions[currentRegionIndex].text);\n      setIsLoading(false);\n      setBatchProgress({ current: 0, total: 0 });\n    } catch (error) {\n      console.error(error);\n      setIsLoading(false);\n      setBatchProgress({ current: 0, total: 0 });\n    }\n  };\n\n  // Process all images with OCR (all regions)\n  const handleRunOCRAll = async () => {\n    if (images.length === 0) {\n      alert('Please upload images first');\n      return;\n    }\n\n    setIsLoading(true);\n    let totalRegions = 0;\n    images.forEach(img => totalRegions += img.regions.length);\n    setBatchProgress({ current: 0, total: totalRegions });\n    \n    let processedCount = 0;\n\n    try {\n      const updatedImages = await Promise.all(\n        images.map(async (img) => {\n          const updatedRegions = await Promise.all(\n            img.regions.map(async (region) => {\n              const { text, croppedImageData } = await processRegionOCR(\n                img.url, \n                region.coordinates\n              );\n              processedCount++;\n              setBatchProgress({ current: processedCount, total: totalRegions });\n              return { ...region, text, croppedImageData };\n            })\n          );\n          return { ...img, regions: updatedRegions };\n        })\n      );\n\n      setImages(updatedImages);\n      if (updatedImages[currentImageIndex]?.regions[currentRegionIndex]?.text) {\n        setText(updatedImages[currentImageIndex].regions[currentRegionIndex].text);\n      }\n      setIsLoading(false);\n      setBatchProgress({ current: 0, total: 0 });\n    } catch (error) {\n      console.error(error);\n      setIsLoading(false);\n      setBatchProgress({ current: 0, total: 0 });\n    }\n  };\n\n  // Handle coordinate changes for current region\n  const handleCurrentRegionCoordinatesChange = (e) => {\n    const { name, value } = e.target;\n    const newCoordinates = {\n      ...coordinates,\n      [name]: parseInt(value) || 0\n    };\n    setCoordinates(newCoordinates);\n    \n    // Update coordinates in the images array\n    setImages(prev => {\n      const newImages = [...prev];\n      if (newImages[currentImageIndex].regions[currentRegionIndex]) {\n        newImages[currentImageIndex].regions[currentRegionIndex].coordinates = newCoordinates;\n      }\n      return newImages;\n    });\n  };\n\n  // Export results as CSV\n  const exportToCSV = () => {\n    // Create CSV header\n    let csvContent = \"Image Name,Region,OCR Result\\n\";\n    \n    // Add each image and region data as rows\n    images.forEach((img, imgIndex) => {\n      img.regions.forEach((region, regionIndex) => {\n        // Clean text data by escaping quotes and removing line breaks\n        const cleanedText = region.text ? region.text.replace(/\"/g, '\"\"').replace(/\\n/g, ' ') : '';\n        // Add row to CSV\n        csvContent += `\"Image ${imgIndex + 1}\",\"Region ${regionIndex + 1}\",\"${cleanedText}\"\\n`;\n      });\n    });\n    \n    // Create a blob with the CSV content\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const url = URL.createObjectURL(blob);\n    \n    // Create a link element to trigger download\n    const link = document.createElement('a');\n    link.setAttribute('href', url);\n    link.setAttribute('download', 'ocr_results.csv');\n    link.style.visibility = 'hidden';\n    \n    // Add to document, click to download, then remove\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>OCR Image to Text</h1>\n      \n      {/* Image Upload */}\n      <div>\n        <input\n          type=\"file\"\n          accept=\"image/*\"\n          multiple\n          onChange={handleImageChange}\n        />\n      </div>\n\n      {/* Image Selection */}\n      {images.length > 0 && (\n        <div className=\"image-selection\">\n          <h3>Select Image:</h3>\n          <div className=\"image-thumbnails\">\n            {images.map((img, index) => (\n              <div \n                key={index}\n                className={`image-thumbnail ${index === currentImageIndex ? 'selected' : ''}`}\n                onClick={() => handleImageSelect(index)}\n              >\n                <img src={img.url} alt={`Thumbnail ${index + 1}`} />\n                <span>Image {index + 1}</span>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Region Selection */}\n      {images.length > 0 && images[currentImageIndex]?.regions?.length > 0 && (\n        <div className=\"region-selection\">\n          <h3>Regions:</h3>\n          <div className=\"region-controls\">\n            <button onClick={addRegion} className=\"control-button\">Add Region</button>\n            <button onClick={deleteRegion} className=\"control-button\">Delete Region</button>\n          </div>\n          <div className=\"region-tabs\">\n            {images[currentImageIndex].regions.map((region, index) => (\n              <div \n                key={index}\n                className={`region-tab ${index === currentRegionIndex ? 'selected' : ''}`}\n                onClick={() => handleRegionSelect(index)}\n              >\n                Region {index + 1}\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Coordinate Inputs */}\n      {images.length > 0 && (\n        <div className=\"coordinates-input\">\n          <h3>Enter Coordinates for Region {currentRegionIndex + 1}</h3>\n          <div className=\"coordinate-group\">\n            <div>\n              <label>Min X:</label>\n              <input\n                type=\"number\"\n                name=\"minX\"\n                value={coordinates.minX}\n                onChange={handleCurrentRegionCoordinatesChange}\n                placeholder=\"Min X\"\n              />\n            </div>\n            <div>\n              <label>Max X:</label>\n              <input\n                type=\"number\"\n                name=\"maxX\"\n                value={coordinates.maxX}\n                onChange={handleCurrentRegionCoordinatesChange}\n                placeholder=\"Max X\"\n              />\n            </div>\n            <div>\n              <label>Min Y:</label>\n              <input\n                type=\"number\"\n                name=\"minY\"\n                value={coordinates.minY}\n                onChange={handleCurrentRegionCoordinatesChange}\n                placeholder=\"Min Y\"\n              />\n            </div>\n            <div>\n              <label>Max Y:</label>\n              <input\n                type=\"number\"\n                name=\"maxY\"\n                value={coordinates.maxY}\n                onChange={handleCurrentRegionCoordinatesChange}\n                placeholder=\"Max Y\"\n              />\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* OCR Buttons */}\n      {images.length > 0 && (\n        <div className=\"run-ocr\">\n          <button onClick={handleRunOCR} disabled={isLoading}>\n            {isLoading ? 'Processing...' : 'Run OCR on Current Region'}\n          </button>\n          <button onClick={handleRunOCRAllRegions} disabled={isLoading} className=\"run-regions-button\">\n            {isLoading ? 'Processing...' : 'Run OCR on All Regions'}\n          </button>\n          <button onClick={handleRunOCRAll} disabled={isLoading} className=\"run-all-button\">\n            {isLoading ? `Processing ${batchProgress.current}/${batchProgress.total}...` : 'Run OCR on All Images'}\n          </button>\n        </div>\n      )}\n\n      {/* Image Previews Container */}\n      {images.length > 0 && (\n        <div className=\"image-preview-container\">\n          {/* Original Image with Rectangle */}\n          <div className=\"image-preview\">\n            <h2>Original Image:</h2>\n            <canvas ref={canvasRef} style={{ maxWidth: '400px' }} />\n            <div className=\"image-dimensions\">\n              Size: {imageDimensions.width} x {imageDimensions.height} pixels\n            </div>\n          </div>\n\n          {/* Cropped Image Preview */}\n          {images[currentImageIndex]?.regions?.[currentRegionIndex]?.croppedImageData && (\n            <div className=\"image-preview\">\n              <h2>Cropped Region {currentRegionIndex + 1}:</h2>\n              <img \n                src={images[currentImageIndex].regions[currentRegionIndex].croppedImageData} \n                alt=\"Cropped\" \n                style={{ maxWidth: '400px' }} \n              />\n            </div>\n          )}\n\n          {/* Extracted Text */}\n          {images[currentImageIndex]?.regions?.[currentRegionIndex]?.text && (\n            <div className=\"result\">\n              <h2>Extracted Text from Region {currentRegionIndex + 1}:</h2>\n              <pre>{images[currentImageIndex].regions[currentRegionIndex].text}</pre>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Loading Indicator */}\n      {isLoading && <p>Processing image...</p>}\n      \n      {/* Export Button */}\n      {images.length > 0 && images.some(img => img.regions && img.regions.some(region => region.text)) && (\n        <div className=\"export-container\">\n          <button onClick={exportToCSV} className=\"export-button\">\n            Export Results as CSV\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}