{"ast":null,"code":"var _jsxFileName = \"/Users/yoonchulroh/Projects/ocr-app/src/App.js\",\n  _s = $RefreshSig$();\n// src/App.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport Tesseract from 'tesseract.js';\nimport './App.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  var _images$currentImageI7, _images$currentImageI8, _images$currentImageI9, _images$currentImageI10, _images$currentImageI11, _images$currentImageI12, _images$currentImageI13, _images$currentImageI14, _images$currentImageI15, _images$currentImageI16;\n  const [images, setImages] = useState([]);\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\n  const [text, setText] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [batchProgress, setBatchProgress] = useState({\n    current: 0,\n    total: 0\n  });\n  const [imageDimensions, setImageDimensions] = useState({\n    width: 0,\n    height: 0\n  });\n  const [coordinates, setCoordinates] = useState({\n    minX: 0,\n    maxX: 0,\n    minY: 0,\n    maxY: 0\n  });\n  const [currentRegionIndex, setCurrentRegionIndex] = useState(0);\n  // Shared regions across all images\n  const [regions, setRegions] = useState([{\n    name: 'Region 1',\n    coordinates: {\n      minX: 0,\n      maxX: 0,\n      minY: 0,\n      maxY: 0\n    },\n    text: '',\n    croppedImageData: null\n  }]);\n  const [editingRegionName, setEditingRegionName] = useState(null);\n  const [newRegionName, setNewRegionName] = useState('');\n  const canvasRef = useRef(null);\n  // Add new state variable to track click mode\n  const [clickMode, setClickMode] = useState(\"none\"); // \"none\", \"ready\", \"first_click_done\"\n\n  // Draw rectangles on image\n  const drawRectangles = img => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Set actual canvas dimensions to match image\n    canvas.width = img.width;\n    canvas.height = img.height;\n\n    // Draw the image\n    ctx.drawImage(img, 0, 0);\n\n    // Draw all regions with different colors\n    if (regions.length > 0) {\n      regions.forEach((region, index) => {\n        // Different color for current region\n        ctx.strokeStyle = index === currentRegionIndex ? 'red' : 'blue';\n        ctx.lineWidth = 2;\n        ctx.strokeRect(region.coordinates.minX, region.coordinates.minY, region.coordinates.maxX - region.coordinates.minX, region.coordinates.maxY - region.coordinates.minY);\n\n        // Add region name label\n        ctx.fillStyle = index === currentRegionIndex ? 'red' : 'blue';\n        ctx.font = '14px Arial';\n        ctx.fillText(region.name, region.coordinates.minX, region.coordinates.minY - 5);\n      });\n    }\n  };\n\n  // Update rectangles when coordinates or regions change\n  useEffect(() => {\n    if (images[currentImageIndex]) {\n      const img = new Image();\n      img.src = images[currentImageIndex].url;\n      img.onload = () => {\n        drawRectangles(img);\n        setImageDimensions({\n          width: img.width,\n          height: img.height\n        });\n      };\n    }\n  }, [coordinates, currentImageIndex, images, currentRegionIndex, regions]);\n\n  // Handle image upload\n  const handleImageChange = e => {\n    if (e.target.files) {\n      const newImages = Array.from(e.target.files).map(file => ({\n        url: URL.createObjectURL(file),\n        filename: file.name,\n        results: Array(regions.length).fill(null).map(() => ({\n          text: '',\n          croppedImageData: null,\n          error: false\n        }))\n      }));\n      setImages(prev => [...prev, ...newImages]);\n      setCurrentImageIndex(prev => prev + newImages.length - 1);\n\n      // Reset the file input value so the same file can be selected again\n      e.target.value = null;\n    }\n  };\n\n  // Handle image selection\n  const handleImageSelect = index => {\n    var _images$index;\n    setCurrentImageIndex(index);\n    setCurrentRegionIndex(0);\n\n    // Update text if available for the current region\n    if ((_images$index = images[index]) !== null && _images$index !== void 0 && _images$index.results && images[index].results[0]) {\n      setText(images[index].results[0].text || '');\n    } else {\n      setText('');\n    }\n  };\n\n  // Add a new region\n  const addRegion = () => {\n    // Create new region object\n    const newRegion = {\n      name: `Region ${regions.length + 1}`,\n      coordinates: {\n        minX: 0,\n        maxX: 0,\n        minY: 0,\n        maxY: 0\n      },\n      text: '',\n      croppedImageData: null\n    };\n\n    // Add the new region to shared regions\n    setRegions(prev => [...prev, newRegion]);\n\n    // Update the images to include results for the new region\n    setImages(prev => {\n      return prev.map(img => ({\n        ...img,\n        results: [...(img.results || []), {\n          text: '',\n          croppedImageData: null\n        }]\n      }));\n    });\n\n    // Set the current region to the new one\n    setCurrentRegionIndex(regions.length);\n    setCoordinates({\n      minX: 0,\n      maxX: 0,\n      minY: 0,\n      maxY: 0\n    });\n    setText('');\n  };\n\n  // Delete current region\n  const deleteRegion = () => {\n    var _images$currentImageI, _images$currentImageI2;\n    // Don't allow deleting if only one region\n    if (regions.length <= 1) {\n      alert(\"Can't delete the only region. At least one region is required.\");\n      return;\n    }\n    const regionIndexToDelete = currentRegionIndex;\n\n    // Remove the region from shared regions\n    setRegions(prev => {\n      const updatedRegions = [...prev];\n      updatedRegions.splice(regionIndexToDelete, 1);\n      return updatedRegions;\n    });\n\n    // Update images to remove results for the deleted region\n    setImages(prev => {\n      return prev.map(img => {\n        const updatedResults = [...(img.results || [])];\n        updatedResults.splice(regionIndexToDelete, 1);\n        return {\n          ...img,\n          results: updatedResults\n        };\n      });\n    });\n\n    // Set the current region index\n    setCurrentRegionIndex(prev => prev >= regions.length - 1 ? regions.length - 2 : prev);\n\n    // Update coordinates to the new current region\n    if (regions.length > 1) {\n      const newIndex = currentRegionIndex >= regions.length - 1 ? regions.length - 2 : currentRegionIndex;\n      setCoordinates(regions[newIndex].coordinates);\n    }\n\n    // Update text\n    const newIndex = currentRegionIndex >= regions.length - 1 ? regions.length - 2 : currentRegionIndex;\n    if ((_images$currentImageI = images[currentImageIndex]) !== null && _images$currentImageI !== void 0 && (_images$currentImageI2 = _images$currentImageI.results) !== null && _images$currentImageI2 !== void 0 && _images$currentImageI2[newIndex]) {\n      setText(images[currentImageIndex].results[newIndex].text || '');\n    } else {\n      setText('');\n    }\n  };\n\n  // Handle region selection\n  const handleRegionSelect = index => {\n    var _images$currentImageI3, _images$currentImageI4;\n    setCurrentRegionIndex(index);\n    setCoordinates(regions[index].coordinates);\n\n    // Update text based on the selected region for the current image\n    if ((_images$currentImageI3 = images[currentImageIndex]) !== null && _images$currentImageI3 !== void 0 && (_images$currentImageI4 = _images$currentImageI3.results) !== null && _images$currentImageI4 !== void 0 && _images$currentImageI4[index]) {\n      setText(images[currentImageIndex].results[index].text || '');\n    } else {\n      setText('');\n    }\n  };\n\n  // Crop image using coordinates\n  const cropImage = (imageElement, coords) => {\n    try {\n      // Validate coordinates\n      if (coords.minX >= coords.maxX || coords.minY >= coords.maxY) {\n        console.warn(\"Invalid coordinates: min values must be less than max values\");\n        return null;\n      }\n\n      // Make sure coordinates are within image bounds\n      const width = imageElement.width;\n      const height = imageElement.height;\n      if (coords.minX < 0 || coords.minY < 0 || coords.maxX > width || coords.maxY > height) {\n        console.warn(\"Invalid coordinates: coordinates out of image bounds\");\n        return null;\n      }\n\n      // Calculate dimensions\n      const cropWidth = coords.maxX - coords.minX;\n      const cropHeight = coords.maxY - coords.minY;\n\n      // Check that we have a valid area to crop\n      if (cropWidth <= 0 || cropHeight <= 0) {\n        console.warn(\"Invalid coordinates: resulting crop has no area\");\n        return null;\n      }\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n\n      // Set canvas size to the specified dimensions\n      canvas.width = cropWidth;\n      canvas.height = cropHeight;\n\n      // Draw the cropped region\n      ctx.drawImage(imageElement, coords.minX, coords.minY, cropWidth, cropHeight, 0, 0, cropWidth, cropHeight);\n      return canvas.toDataURL('image/png');\n    } catch (error) {\n      console.error(\"Error cropping image:\", error);\n      return null;\n    }\n  };\n\n  // Process single region with OCR\n  const processRegionOCR = (imageUrl, regionCoords) => {\n    return new Promise((resolve, reject) => {\n      try {\n        const img = new Image();\n        img.onerror = () => {\n          console.error(\"Failed to load image\");\n          resolve({\n            text: \"Error: Failed to load image\",\n            croppedImageData: null,\n            error: true\n          });\n        };\n        img.onload = () => {\n          const croppedImageData = cropImage(img, regionCoords);\n\n          // Skip OCR if crop failed\n          if (!croppedImageData) {\n            console.warn(\"Skipping OCR due to invalid crop\");\n            resolve({\n              text: \"Error: Invalid coordinates for this region\",\n              croppedImageData: null,\n              error: true\n            });\n            return;\n          }\n          Tesseract.recognize(croppedImageData, 'eng', {\n            logger: m => console.log(m)\n          }).then(({\n            data: {\n              text\n            }\n          }) => {\n            resolve({\n              text,\n              croppedImageData,\n              error: false\n            });\n          }).catch(error => {\n            console.error(\"Tesseract error:\", error);\n            resolve({\n              text: \"Error: OCR processing failed\",\n              croppedImageData,\n              error: true\n            });\n          });\n        };\n        img.src = imageUrl;\n      } catch (error) {\n        console.error(\"Unexpected error:\", error);\n        resolve({\n          text: \"Error: Unexpected error occurred\",\n          croppedImageData: null,\n          error: true\n        });\n      }\n    });\n  };\n\n  // Process image and run OCR for current region\n  const handleRunOCR = () => {\n    if (!images[currentImageIndex]) {\n      alert('Please upload an image first');\n      return;\n    }\n    setIsLoading(true);\n    processRegionOCR(images[currentImageIndex].url, regions[currentRegionIndex].coordinates).then(({\n      text,\n      croppedImageData,\n      error\n    }) => {\n      setText(text);\n\n      // Update regions with the coordinates\n      setRegions(prev => {\n        const newRegions = [...prev];\n        newRegions[currentRegionIndex] = {\n          ...newRegions[currentRegionIndex],\n          coordinates: regions[currentRegionIndex].coordinates,\n          hasError: error\n        };\n        return newRegions;\n      });\n\n      // Update the current image's results for the current region\n      setImages(prev => {\n        const newImages = [...prev];\n        if (!newImages[currentImageIndex].results) {\n          newImages[currentImageIndex].results = Array(regions.length).fill(null).map(() => ({\n            text: '',\n            croppedImageData: null,\n            error: false\n          }));\n        }\n        newImages[currentImageIndex].results[currentRegionIndex] = {\n          text,\n          croppedImageData,\n          error\n        };\n        return newImages;\n      });\n      setIsLoading(false);\n    }).catch(error => {\n      console.error(error);\n      setIsLoading(false);\n      alert(\"An unexpected error occurred. Please try again.\");\n    });\n  };\n\n  // Process all regions in current image\n  const handleRunOCRAllRegions = async () => {\n    if (!images[currentImageIndex]) {\n      alert('Please upload an image first');\n      return;\n    }\n    if (regions.length === 0) {\n      alert('No regions defined');\n      return;\n    }\n    setIsLoading(true);\n    setBatchProgress({\n      current: 0,\n      total: regions.length\n    });\n    try {\n      const results = await Promise.all(regions.map(async (region, idx) => {\n        try {\n          const result = await processRegionOCR(images[currentImageIndex].url, region.coordinates);\n          setBatchProgress(prev => ({\n            ...prev,\n            current: idx + 1\n          }));\n          return result;\n        } catch (error) {\n          console.error(`Error processing region ${idx + 1}:`, error);\n          setBatchProgress(prev => ({\n            ...prev,\n            current: idx + 1\n          }));\n          return {\n            text: `Error processing region ${idx + 1}`,\n            croppedImageData: null,\n            error: true\n          };\n        }\n      }));\n\n      // Update the current image's results\n      setImages(prev => {\n        const newImages = [...prev];\n        newImages[currentImageIndex].results = results;\n        return newImages;\n      });\n\n      // Update text for current region\n      setText(results[currentRegionIndex].text);\n      setIsLoading(false);\n      setBatchProgress({\n        current: 0,\n        total: 0\n      });\n    } catch (error) {\n      console.error(\"Failed to process regions:\", error);\n      setIsLoading(false);\n      setBatchProgress({\n        current: 0,\n        total: 0\n      });\n      alert(\"An error occurred while processing regions. Some regions may not have been processed correctly.\");\n    }\n  };\n\n  // Process all images with OCR (all regions)\n  const handleRunOCRAll = async () => {\n    if (images.length === 0) {\n      alert('Please upload images first');\n      return;\n    }\n    setIsLoading(true);\n    const totalOperations = images.length * regions.length;\n    setBatchProgress({\n      current: 0,\n      total: totalOperations\n    });\n    let processedCount = 0;\n    try {\n      var _updatedImages$curren, _updatedImages$curren2;\n      const updatedImages = await Promise.all(images.map(async img => {\n        try {\n          const results = await Promise.all(regions.map(async region => {\n            try {\n              const result = await processRegionOCR(img.url, region.coordinates);\n              processedCount++;\n              setBatchProgress({\n                current: processedCount,\n                total: totalOperations\n              });\n              return result;\n            } catch (error) {\n              console.error(\"Error processing region:\", error);\n              processedCount++;\n              setBatchProgress({\n                current: processedCount,\n                total: totalOperations\n              });\n              return {\n                text: \"Error processing this region\",\n                croppedImageData: null,\n                error: true\n              };\n            }\n          }));\n          return {\n            ...img,\n            results\n          };\n        } catch (error) {\n          console.error(\"Error processing image:\", error);\n          return {\n            ...img,\n            results: Array(regions.length).fill(null).map(() => ({\n              text: \"Error processing this image\",\n              croppedImageData: null,\n              error: true\n            }))\n          };\n        }\n      }));\n      setImages(updatedImages);\n\n      // Update text for current image and region\n      if ((_updatedImages$curren = updatedImages[currentImageIndex]) !== null && _updatedImages$curren !== void 0 && (_updatedImages$curren2 = _updatedImages$curren.results) !== null && _updatedImages$curren2 !== void 0 && _updatedImages$curren2[currentRegionIndex]) {\n        setText(updatedImages[currentImageIndex].results[currentRegionIndex].text || '');\n      }\n      setIsLoading(false);\n      setBatchProgress({\n        current: 0,\n        total: 0\n      });\n    } catch (error) {\n      console.error(\"Failed to process all images:\", error);\n      setIsLoading(false);\n      setBatchProgress({\n        current: 0,\n        total: 0\n      });\n      alert(\"An error occurred while processing images. Some images may not have been processed correctly.\");\n    }\n  };\n\n  // Handle coordinate changes for current region\n  const handleCurrentRegionCoordinatesChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    const newCoordinates = {\n      ...coordinates,\n      [name]: parseInt(value) || 0\n    };\n    setCoordinates(newCoordinates);\n\n    // Update coordinates in the regions array\n    setRegions(prev => {\n      const newRegions = [...prev];\n      newRegions[currentRegionIndex].coordinates = newCoordinates;\n      return newRegions;\n    });\n  };\n\n  // Handle region name edit\n  const startEditingRegionName = index => {\n    setEditingRegionName(index);\n    setNewRegionName(regions[index].name);\n  };\n\n  // Save edited region name\n  const saveRegionName = () => {\n    if (editingRegionName !== null && newRegionName.trim() !== '') {\n      setRegions(prev => {\n        const newRegions = [...prev];\n        newRegions[editingRegionName].name = newRegionName.trim();\n        return newRegions;\n      });\n      setEditingRegionName(null);\n    }\n  };\n\n  // Cancel region name editing\n  const cancelRegionNameEdit = () => {\n    setEditingRegionName(null);\n  };\n\n  // Handle region name input change\n  const handleRegionNameChange = e => {\n    setNewRegionName(e.target.value);\n  };\n\n  // Add this function to handle key press events\n  const handleRegionNameKeyPress = e => {\n    // Check if Enter key was pressed\n    if (e.key === 'Enter') {\n      saveRegionName();\n    }\n  };\n\n  // Export results as CSV\n  const exportToCSV = () => {\n    // Create CSV header with a column for each region\n    let header = \"Image Name\";\n    for (let i = 0; i < regions.length; i++) {\n      header += `,${regions[i].name}`;\n    }\n    let csvContent = header + \"\\n\";\n\n    // Add each image as a row with region texts as columns\n    images.forEach((img, imgIndex) => {\n      // Start with the image name\n      const imageName = img.filename || `Image ${imgIndex + 1}`;\n      let row = `\"${imageName}\"`;\n\n      // Add each region's text as a column\n      if (img.results) {\n        for (let i = 0; i < regions.length; i++) {\n          var _img$results$i;\n          // Get text for this region if available, otherwise use empty string\n          const regionText = ((_img$results$i = img.results[i]) === null || _img$results$i === void 0 ? void 0 : _img$results$i.text) || '';\n          // Clean text data by escaping quotes and removing line breaks\n          const cleanedText = regionText.replace(/\"/g, '\"\"').replace(/\\n/g, ' ');\n          // Add to row\n          row += `,\"${cleanedText}\"`;\n        }\n      } else {\n        // If no results, fill with empty columns\n        for (let i = 0; i < regions.length; i++) {\n          row += `,\"\"`;\n        }\n      }\n\n      // Add row to CSV\n      csvContent += row + \"\\n\";\n    });\n\n    // Create a blob with the CSV content\n    const blob = new Blob([csvContent], {\n      type: 'text/csv;charset=utf-8;'\n    });\n    const url = URL.createObjectURL(blob);\n\n    // Create a link element to trigger download\n    const link = document.createElement('a');\n    link.setAttribute('href', url);\n    link.setAttribute('download', 'ocr_results.csv');\n    link.style.visibility = 'hidden';\n\n    // Add to document, click to download, then remove\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  // Update the canvas click handler to account for scaling\n  const handleCanvasClick = e => {\n    var _images$currentImageI5;\n    if (clickMode === \"none\" || !((_images$currentImageI5 = images[currentImageIndex]) !== null && _images$currentImageI5 !== void 0 && _images$currentImageI5.url) || !canvasRef.current) return;\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n\n    // Calculate the scaling factor between displayed size and actual size\n    const scaleX = canvas.width / rect.width;\n    const scaleY = canvas.height / rect.height;\n\n    // Calculate the click position relative to the image, accounting for scaling\n    const x = Math.round((e.clientX - rect.left) * scaleX);\n    const y = Math.round((e.clientY - rect.top) * scaleY);\n    if (clickMode === \"ready\") {\n      // First click - set min coordinates\n      const newCoords = {\n        minX: x,\n        minY: y,\n        maxX: x,\n        maxY: y\n      };\n\n      // Update the coordinates state\n      setCoordinates(newCoords);\n\n      // Update the regions array with new coordinates\n      const updatedRegions = [...regions];\n      updatedRegions[currentRegionIndex] = {\n        ...updatedRegions[currentRegionIndex],\n        coordinates: newCoords\n      };\n      setRegions(updatedRegions);\n      setClickMode(\"first_click_done\");\n    } else if (clickMode === \"first_click_done\") {\n      // Second click - set max coordinates\n      // Get current coordinates\n      const currentCoords = regions[currentRegionIndex].coordinates;\n\n      // Ensure max values are greater than min values\n      const minX = Math.min(currentCoords.minX, x);\n      const minY = Math.min(currentCoords.minY, y);\n      const maxX = Math.max(currentCoords.minX, x);\n      const maxY = Math.max(currentCoords.minY, y);\n      const newCoords = {\n        minX,\n        minY,\n        maxX,\n        maxY\n      };\n\n      // Update the coordinates state\n      setCoordinates(newCoords);\n\n      // Update the regions array with new coordinates\n      const updatedRegions = [...regions];\n      updatedRegions[currentRegionIndex] = {\n        ...updatedRegions[currentRegionIndex],\n        coordinates: newCoords\n      };\n      setRegions(updatedRegions);\n      setClickMode(\"ready\"); // Reset to ready for next region\n    }\n  };\n\n  // Update the drawRectangle function\n  const drawRectangle = () => {\n    if (images[currentImageIndex]) {\n      const img = new Image();\n      img.onload = () => {\n        drawRectangles(img);\n\n        // Set cursor style based on click mode\n        if (canvasRef.current) {\n          if (clickMode === \"ready\" || clickMode === \"first_click_done\") {\n            canvasRef.current.style.cursor = \"crosshair\";\n          } else {\n            canvasRef.current.style.cursor = \"default\";\n          }\n        }\n      };\n      img.src = images[currentImageIndex].url;\n    }\n  };\n\n  // Update useEffect for imageUrl to include clickMode dependency\n  useEffect(() => {\n    var _images$currentImageI6;\n    if ((_images$currentImageI6 = images[currentImageIndex]) !== null && _images$currentImageI6 !== void 0 && _images$currentImageI6.url) {\n      drawRectangle();\n    }\n  }, [(_images$currentImageI7 = images[currentImageIndex]) === null || _images$currentImageI7 === void 0 ? void 0 : _images$currentImageI7.url, regions, currentRegionIndex, clickMode]);\n\n  // Update the handleDeleteImage function to properly handle deleting the last image\n  const handleDeleteImage = (indexToDelete, e) => {\n    e.stopPropagation(); // Prevent triggering image selection when clicking delete\n\n    // Update images array\n    setImages(prev => {\n      const newImages = [...prev];\n      newImages.splice(indexToDelete, 1);\n      return newImages;\n    });\n\n    // When deleting the last image, reset states\n    if (images.length <= 1) {\n      setCurrentImageIndex(0);\n      setText('');\n      // Reset coordinates to default for current region\n      setCoordinates({\n        minX: 0,\n        minY: 0,\n        maxX: 0,\n        maxY: 0\n      });\n      // Reset image dimensions\n      setImageDimensions({\n        width: 0,\n        height: 0\n      });\n    }\n    // Otherwise handle normal deletion\n    else if (indexToDelete <= currentImageIndex) {\n      setCurrentImageIndex(prev => {\n        const newIndex = prev - 1;\n        return Math.max(0, Math.min(newIndex, images.length - 2));\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"OCR Image to Text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 709,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-selection\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-selection-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Select Image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 714,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"file-input-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            accept: \"image/*\",\n            onChange: handleImageChange,\n            multiple: true,\n            style: {\n              display: 'none'\n            },\n            id: \"fileInput\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 716,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"fileInput\",\n            className: \"file-upload-button\",\n            children: \"Choose Files\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 724,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 715,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 713,\n        columnNumber: 9\n      }, this), images.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-thumbnails\",\n        children: images.map((image, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `image-thumbnail ${index === currentImageIndex ? 'selected' : ''}`,\n          onClick: () => handleImageSelect(index),\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: image.url,\n            alt: `Thumbnail ${index + 1}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 738,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: image.filename || `Image ${index + 1}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 739,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"delete-image-button\",\n            onClick: e => handleDeleteImage(index, e),\n            title: \"Delete image\",\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 740,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 733,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 731,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 712,\n      columnNumber: 7\n    }, this), images.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"region-coordinate-container\",\n        children: [regions.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"region-selection\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Regions (Shared Across All Images):\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 761,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"region-controls\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: addRegion,\n              className: \"control-button\",\n              children: \"Add Region\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 763,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: deleteRegion,\n              className: \"control-button\",\n              children: \"Delete Region\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 764,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 762,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"region-tabs\",\n            children: regions.map((region, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `region-tab ${index === currentRegionIndex ? 'selected' : ''}`,\n              children: editingRegionName === index ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"region-name-edit\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: newRegionName,\n                  onChange: handleRegionNameChange,\n                  onClick: e => e.stopPropagation(),\n                  onKeyDown: handleRegionNameKeyPress,\n                  autoFocus: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 774,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"edit-buttons\",\n                  children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: e => {\n                      e.stopPropagation();\n                      saveRegionName();\n                    },\n                    className: \"save-button\",\n                    children: \"\\u2713\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 783,\n                    columnNumber: 29\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: e => {\n                      e.stopPropagation();\n                      cancelRegionNameEdit();\n                    },\n                    className: \"cancel-button\",\n                    children: \"\\u2715\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 792,\n                    columnNumber: 29\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 782,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 773,\n                columnNumber: 25\n              }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"region-name-display\",\n                onClick: () => handleRegionSelect(index),\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  children: region.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 808,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"edit-name-button\",\n                  onClick: e => {\n                    e.stopPropagation();\n                    startEditingRegionName(index);\n                  },\n                  children: \"\\u270E\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 809,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 804,\n                columnNumber: 25\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 768,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 766,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 760,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"coordinates-input\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Enter Coordinates for \", regions[currentRegionIndex].name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 828,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"click-mode-toggle\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setClickMode(clickMode === \"none\" ? \"ready\" : \"none\"),\n              className: clickMode !== \"none\" ? \"active\" : \"\",\n              children: clickMode !== \"none\" ? \"Disable Click Selection\" : \"Enable Click Selection\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 832,\n              columnNumber: 17\n            }, this), clickMode === \"ready\" && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"click-instruction\",\n              children: \"Click on image to set top-left corner\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 839,\n              columnNumber: 19\n            }, this), clickMode === \"first_click_done\" && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"click-instruction\",\n              children: \"Click on image to set bottom-right corner\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 842,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 831,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"coordinate-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Min X:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 848,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                name: \"minX\",\n                value: coordinates.minX,\n                onChange: handleCurrentRegionCoordinatesChange,\n                placeholder: \"Min X\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 849,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 847,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Max X:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 858,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                name: \"maxX\",\n                value: coordinates.maxX,\n                onChange: handleCurrentRegionCoordinatesChange,\n                placeholder: \"Max X\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 859,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 857,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Min Y:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 868,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                name: \"minY\",\n                value: coordinates.minY,\n                onChange: handleCurrentRegionCoordinatesChange,\n                placeholder: \"Min Y\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 869,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 867,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Max Y:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 878,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                name: \"maxY\",\n                value: coordinates.maxY,\n                onChange: handleCurrentRegionCoordinatesChange,\n                placeholder: \"Max Y\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 879,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 877,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 846,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 827,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 757,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"run-ocr\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleRunOCR,\n          disabled: isLoading || !((_images$currentImageI8 = images[currentImageIndex]) !== null && _images$currentImageI8 !== void 0 && _images$currentImageI8.url),\n          children: isLoading ? 'Processing...' : 'Run OCR on Current Region'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 893,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"run-all-button\",\n          onClick: handleRunOCRAllRegions,\n          disabled: isLoading || !((_images$currentImageI9 = images[currentImageIndex]) !== null && _images$currentImageI9 !== void 0 && _images$currentImageI9.url),\n          children: isLoading ? 'Processing...' : 'Run OCR on All Regions'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 899,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"export-button\",\n          onClick: exportToCSV,\n          disabled: !((_images$currentImageI10 = images[currentImageIndex]) !== null && _images$currentImageI10 !== void 0 && (_images$currentImageI11 = _images$currentImageI10.results) !== null && _images$currentImageI11 !== void 0 && _images$currentImageI11[currentRegionIndex]) || !((_images$currentImageI12 = images[currentImageIndex]) !== null && _images$currentImageI12 !== void 0 && _images$currentImageI12.url),\n          children: \"Export to CSV\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 906,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 892,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-preview-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"original-image-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Original Image:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 919,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n            ref: canvasRef,\n            onClick: handleCanvasClick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 920,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"image-dimensions\",\n            children: [\"Size: \", imageDimensions.width, \" x \", imageDimensions.height, \" pixels\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 924,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 918,\n          columnNumber: 13\n        }, this), ((_images$currentImageI13 = images[currentImageIndex]) === null || _images$currentImageI13 === void 0 ? void 0 : (_images$currentImageI14 = _images$currentImageI13.results) === null || _images$currentImageI14 === void 0 ? void 0 : _images$currentImageI14[currentRegionIndex]) && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image-preview\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\"Cropped \", regions[currentRegionIndex].name, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 932,\n            columnNumber: 17\n          }, this), images[currentImageIndex].results[currentRegionIndex].error ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"error-message\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Error: Unable to crop region due to invalid coordinates\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 935,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Please check that:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 936,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                children: \"Min values are less than Max values\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 938,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: \"Coordinates are within image boundaries\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 939,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: \"The region has a valid area (width and height > 0)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 940,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 937,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 934,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n            src: images[currentImageIndex].results[currentRegionIndex].croppedImageData,\n            alt: \"Cropped\",\n            style: {\n              maxWidth: '400px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 944,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 931,\n          columnNumber: 15\n        }, this), ((_images$currentImageI15 = images[currentImageIndex]) === null || _images$currentImageI15 === void 0 ? void 0 : (_images$currentImageI16 = _images$currentImageI15.results) === null || _images$currentImageI16 === void 0 ? void 0 : _images$currentImageI16[currentRegionIndex]) && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"result\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\"Extracted Text from \", regions[currentRegionIndex].name, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 956,\n            columnNumber: 17\n          }, this), images[currentImageIndex].results[currentRegionIndex].error ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"error-message\",\n            children: images[currentImageIndex].results[currentRegionIndex].text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 958,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: images[currentImageIndex].results[currentRegionIndex].text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 962,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 955,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 916,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-images-message\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No images uploaded. Please select one or more images to begin.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 970,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 969,\n      columnNumber: 9\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Processing image...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 975,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 708,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"FSwbgq5WHLomRq84IVBnvC0l3os=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Tesseract","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","_images$currentImageI7","_images$currentImageI8","_images$currentImageI9","_images$currentImageI10","_images$currentImageI11","_images$currentImageI12","_images$currentImageI13","_images$currentImageI14","_images$currentImageI15","_images$currentImageI16","images","setImages","currentImageIndex","setCurrentImageIndex","text","setText","isLoading","setIsLoading","batchProgress","setBatchProgress","current","total","imageDimensions","setImageDimensions","width","height","coordinates","setCoordinates","minX","maxX","minY","maxY","currentRegionIndex","setCurrentRegionIndex","regions","setRegions","name","croppedImageData","editingRegionName","setEditingRegionName","newRegionName","setNewRegionName","canvasRef","clickMode","setClickMode","drawRectangles","img","canvas","ctx","getContext","drawImage","length","forEach","region","index","strokeStyle","lineWidth","strokeRect","fillStyle","font","fillText","Image","src","url","onload","handleImageChange","e","target","files","newImages","Array","from","map","file","URL","createObjectURL","filename","results","fill","error","prev","value","handleImageSelect","_images$index","addRegion","newRegion","deleteRegion","_images$currentImageI","_images$currentImageI2","alert","regionIndexToDelete","updatedRegions","splice","updatedResults","newIndex","handleRegionSelect","_images$currentImageI3","_images$currentImageI4","cropImage","imageElement","coords","console","warn","cropWidth","cropHeight","document","createElement","toDataURL","processRegionOCR","imageUrl","regionCoords","Promise","resolve","reject","onerror","recognize","logger","m","log","then","data","catch","handleRunOCR","newRegions","hasError","handleRunOCRAllRegions","all","idx","result","handleRunOCRAll","totalOperations","processedCount","_updatedImages$curren","_updatedImages$curren2","updatedImages","handleCurrentRegionCoordinatesChange","newCoordinates","parseInt","startEditingRegionName","saveRegionName","trim","cancelRegionNameEdit","handleRegionNameChange","handleRegionNameKeyPress","key","exportToCSV","header","i","csvContent","imgIndex","imageName","row","_img$results$i","regionText","cleanedText","replace","blob","Blob","type","link","setAttribute","style","visibility","body","appendChild","click","removeChild","handleCanvasClick","_images$currentImageI5","rect","getBoundingClientRect","scaleX","scaleY","x","Math","round","clientX","left","y","clientY","top","newCoords","currentCoords","min","max","drawRectangle","cursor","_images$currentImageI6","handleDeleteImage","indexToDelete","stopPropagation","className","children","fileName","_jsxFileName","lineNumber","columnNumber","accept","onChange","multiple","display","id","htmlFor","image","onClick","alt","title","onKeyDown","autoFocus","placeholder","disabled","ref","maxWidth","_c","$RefreshReg$"],"sources":["/Users/yoonchulroh/Projects/ocr-app/src/App.js"],"sourcesContent":["// src/App.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport Tesseract from 'tesseract.js';\nimport './App.css';\n\nfunction App() {\n  const [images, setImages] = useState([]);\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\n  const [text, setText] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [batchProgress, setBatchProgress] = useState({ current: 0, total: 0 });\n  const [imageDimensions, setImageDimensions] = useState({ width: 0, height: 0 });\n  const [coordinates, setCoordinates] = useState({\n    minX: 0,\n    maxX: 0,\n    minY: 0,\n    maxY: 0\n  });\n  const [currentRegionIndex, setCurrentRegionIndex] = useState(0);\n  // Shared regions across all images\n  const [regions, setRegions] = useState([{\n    name: 'Region 1',\n    coordinates: { minX: 0, maxX: 0, minY: 0, maxY: 0 },\n    text: '',\n    croppedImageData: null\n  }]);\n  const [editingRegionName, setEditingRegionName] = useState(null);\n  const [newRegionName, setNewRegionName] = useState('');\n  const canvasRef = useRef(null);\n  // Add new state variable to track click mode\n  const [clickMode, setClickMode] = useState(\"none\"); // \"none\", \"ready\", \"first_click_done\"\n\n  // Draw rectangles on image\n  const drawRectangles = (img) => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    \n    // Set actual canvas dimensions to match image\n    canvas.width = img.width;\n    canvas.height = img.height;\n    \n    // Draw the image\n    ctx.drawImage(img, 0, 0);\n    \n    // Draw all regions with different colors\n    if (regions.length > 0) {\n      regions.forEach((region, index) => {\n        // Different color for current region\n        ctx.strokeStyle = index === currentRegionIndex ? 'red' : 'blue';\n        ctx.lineWidth = 2;\n        ctx.strokeRect(\n          region.coordinates.minX,\n          region.coordinates.minY,\n          region.coordinates.maxX - region.coordinates.minX,\n          region.coordinates.maxY - region.coordinates.minY\n        );\n        \n        // Add region name label\n        ctx.fillStyle = index === currentRegionIndex ? 'red' : 'blue';\n        ctx.font = '14px Arial';\n        ctx.fillText(region.name, region.coordinates.minX, region.coordinates.minY - 5);\n      });\n    }\n  };\n\n  // Update rectangles when coordinates or regions change\n  useEffect(() => {\n    if (images[currentImageIndex]) {\n      const img = new Image();\n      img.src = images[currentImageIndex].url;\n      img.onload = () => {\n        drawRectangles(img);\n        setImageDimensions({ width: img.width, height: img.height });\n      };\n    }\n  }, [coordinates, currentImageIndex, images, currentRegionIndex, regions]);\n\n  // Handle image upload\n  const handleImageChange = (e) => {\n    if (e.target.files) {\n      const newImages = Array.from(e.target.files).map(file => ({\n        url: URL.createObjectURL(file),\n        filename: file.name,\n        results: Array(regions.length).fill(null).map(() => ({\n          text: '',\n          croppedImageData: null,\n          error: false\n        }))\n      }));\n      setImages(prev => [...prev, ...newImages]);\n      setCurrentImageIndex(prev => prev + newImages.length - 1);\n      \n      // Reset the file input value so the same file can be selected again\n      e.target.value = null;\n    }\n  };\n\n  // Handle image selection\n  const handleImageSelect = (index) => {\n    setCurrentImageIndex(index);\n    setCurrentRegionIndex(0);\n    \n    // Update text if available for the current region\n    if (images[index]?.results && images[index].results[0]) {\n      setText(images[index].results[0].text || '');\n    } else {\n      setText('');\n    }\n  };\n\n  // Add a new region\n  const addRegion = () => {\n    // Create new region object\n    const newRegion = {\n      name: `Region ${regions.length + 1}`,\n      coordinates: { minX: 0, maxX: 0, minY: 0, maxY: 0 },\n      text: '',\n      croppedImageData: null\n    };\n    \n    // Add the new region to shared regions\n    setRegions(prev => [...prev, newRegion]);\n    \n    // Update the images to include results for the new region\n    setImages(prev => {\n      return prev.map(img => ({\n        ...img,\n        results: [...(img.results || []), { text: '', croppedImageData: null }]\n      }));\n    });\n    \n    // Set the current region to the new one\n    setCurrentRegionIndex(regions.length);\n    setCoordinates({ minX: 0, maxX: 0, minY: 0, maxY: 0 });\n    setText('');\n  };\n\n  // Delete current region\n  const deleteRegion = () => {\n    // Don't allow deleting if only one region\n    if (regions.length <= 1) {\n      alert(\"Can't delete the only region. At least one region is required.\");\n      return;\n    }\n    \n    const regionIndexToDelete = currentRegionIndex;\n    \n    // Remove the region from shared regions\n    setRegions(prev => {\n      const updatedRegions = [...prev];\n      updatedRegions.splice(regionIndexToDelete, 1);\n      return updatedRegions;\n    });\n    \n    // Update images to remove results for the deleted region\n    setImages(prev => {\n      return prev.map(img => {\n        const updatedResults = [...(img.results || [])];\n        updatedResults.splice(regionIndexToDelete, 1);\n        return {\n          ...img,\n          results: updatedResults\n        };\n      });\n    });\n    \n    // Set the current region index\n    setCurrentRegionIndex(prev => \n      prev >= regions.length - 1 ? regions.length - 2 : prev\n    );\n    \n    // Update coordinates to the new current region\n    if (regions.length > 1) {\n      const newIndex = currentRegionIndex >= regions.length - 1 ? \n        regions.length - 2 : currentRegionIndex;\n      setCoordinates(regions[newIndex].coordinates);\n    }\n    \n    // Update text\n    const newIndex = currentRegionIndex >= regions.length - 1 ? \n      regions.length - 2 : currentRegionIndex;\n    if (images[currentImageIndex]?.results?.[newIndex]) {\n      setText(images[currentImageIndex].results[newIndex].text || '');\n    } else {\n      setText('');\n    }\n  };\n\n  // Handle region selection\n  const handleRegionSelect = (index) => {\n    setCurrentRegionIndex(index);\n    setCoordinates(regions[index].coordinates);\n    \n    // Update text based on the selected region for the current image\n    if (images[currentImageIndex]?.results?.[index]) {\n      setText(images[currentImageIndex].results[index].text || '');\n    } else {\n      setText('');\n    }\n  };\n\n  // Crop image using coordinates\n  const cropImage = (imageElement, coords) => {\n    try {\n      // Validate coordinates\n      if (coords.minX >= coords.maxX || coords.minY >= coords.maxY) {\n        console.warn(\"Invalid coordinates: min values must be less than max values\");\n        return null;\n      }\n      \n      // Make sure coordinates are within image bounds\n      const width = imageElement.width;\n      const height = imageElement.height;\n      \n      if (coords.minX < 0 || coords.minY < 0 || coords.maxX > width || coords.maxY > height) {\n        console.warn(\"Invalid coordinates: coordinates out of image bounds\");\n        return null;\n      }\n      \n      // Calculate dimensions\n      const cropWidth = coords.maxX - coords.minX;\n      const cropHeight = coords.maxY - coords.minY;\n      \n      // Check that we have a valid area to crop\n      if (cropWidth <= 0 || cropHeight <= 0) {\n        console.warn(\"Invalid coordinates: resulting crop has no area\");\n        return null;\n      }\n      \n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      \n      // Set canvas size to the specified dimensions\n      canvas.width = cropWidth;\n      canvas.height = cropHeight;\n      \n      // Draw the cropped region\n      ctx.drawImage(\n        imageElement,\n        coords.minX, coords.minY,\n        cropWidth, cropHeight,\n        0, 0,\n        cropWidth, cropHeight\n      );\n      \n      return canvas.toDataURL('image/png');\n    } catch (error) {\n      console.error(\"Error cropping image:\", error);\n      return null;\n    }\n  };\n\n  // Process single region with OCR\n  const processRegionOCR = (imageUrl, regionCoords) => {\n    return new Promise((resolve, reject) => {\n      try {\n        const img = new Image();\n        \n        img.onerror = () => {\n          console.error(\"Failed to load image\");\n          resolve({ text: \"Error: Failed to load image\", croppedImageData: null, error: true });\n        };\n        \n        img.onload = () => {\n          const croppedImageData = cropImage(img, regionCoords);\n          \n          // Skip OCR if crop failed\n          if (!croppedImageData) {\n            console.warn(\"Skipping OCR due to invalid crop\");\n            resolve({ \n              text: \"Error: Invalid coordinates for this region\", \n              croppedImageData: null, \n              error: true \n            });\n            return;\n          }\n          \n          Tesseract.recognize(\n            croppedImageData,\n            'eng',\n            {\n              logger: (m) => console.log(m)\n            }\n          )\n            .then(({ data: { text } }) => {\n              resolve({ text, croppedImageData, error: false });\n            })\n            .catch(error => {\n              console.error(\"Tesseract error:\", error);\n              resolve({ \n                text: \"Error: OCR processing failed\", \n                croppedImageData, \n                error: true \n              });\n            });\n        };\n        \n        img.src = imageUrl;\n      } catch (error) {\n        console.error(\"Unexpected error:\", error);\n        resolve({ \n          text: \"Error: Unexpected error occurred\", \n          croppedImageData: null, \n          error: true \n        });\n      }\n    });\n  };\n\n  // Process image and run OCR for current region\n  const handleRunOCR = () => {\n    if (!images[currentImageIndex]) {\n      alert('Please upload an image first');\n      return;\n    }\n\n    setIsLoading(true);\n    processRegionOCR(images[currentImageIndex].url, regions[currentRegionIndex].coordinates)\n      .then(({ text, croppedImageData, error }) => {\n        setText(text);\n        \n        // Update regions with the coordinates\n        setRegions(prev => {\n          const newRegions = [...prev];\n          newRegions[currentRegionIndex] = {\n            ...newRegions[currentRegionIndex],\n            coordinates: regions[currentRegionIndex].coordinates,\n            hasError: error\n          };\n          return newRegions;\n        });\n        \n        // Update the current image's results for the current region\n        setImages(prev => {\n          const newImages = [...prev];\n          if (!newImages[currentImageIndex].results) {\n            newImages[currentImageIndex].results = Array(regions.length).fill(null).map(() => ({\n              text: '',\n              croppedImageData: null,\n              error: false\n            }));\n          }\n          newImages[currentImageIndex].results[currentRegionIndex] = {\n            text,\n            croppedImageData,\n            error\n          };\n          return newImages;\n        });\n        \n        setIsLoading(false);\n      })\n      .catch(error => {\n        console.error(error);\n        setIsLoading(false);\n        alert(\"An unexpected error occurred. Please try again.\");\n      });\n  };\n\n  // Process all regions in current image\n  const handleRunOCRAllRegions = async () => {\n    if (!images[currentImageIndex]) {\n      alert('Please upload an image first');\n      return;\n    }\n\n    if (regions.length === 0) {\n      alert('No regions defined');\n      return;\n    }\n\n    setIsLoading(true);\n    setBatchProgress({ current: 0, total: regions.length });\n\n    try {\n      const results = await Promise.all(\n        regions.map(async (region, idx) => {\n          try {\n            const result = await processRegionOCR(\n              images[currentImageIndex].url, \n              region.coordinates\n            );\n            setBatchProgress(prev => ({ ...prev, current: idx + 1 }));\n            return result;\n          } catch (error) {\n            console.error(`Error processing region ${idx + 1}:`, error);\n            setBatchProgress(prev => ({ ...prev, current: idx + 1 }));\n            return { \n              text: `Error processing region ${idx + 1}`, \n              croppedImageData: null,\n              error: true\n            };\n          }\n        })\n      );\n\n      // Update the current image's results\n      setImages(prev => {\n        const newImages = [...prev];\n        newImages[currentImageIndex].results = results;\n        return newImages;\n      });\n      \n      // Update text for current region\n      setText(results[currentRegionIndex].text);\n      setIsLoading(false);\n      setBatchProgress({ current: 0, total: 0 });\n    } catch (error) {\n      console.error(\"Failed to process regions:\", error);\n      setIsLoading(false);\n      setBatchProgress({ current: 0, total: 0 });\n      alert(\"An error occurred while processing regions. Some regions may not have been processed correctly.\");\n    }\n  };\n\n  // Process all images with OCR (all regions)\n  const handleRunOCRAll = async () => {\n    if (images.length === 0) {\n      alert('Please upload images first');\n      return;\n    }\n\n    setIsLoading(true);\n    const totalOperations = images.length * regions.length;\n    setBatchProgress({ current: 0, total: totalOperations });\n    \n    let processedCount = 0;\n\n    try {\n      const updatedImages = await Promise.all(\n        images.map(async (img) => {\n          try {\n            const results = await Promise.all(\n              regions.map(async (region) => {\n                try {\n                  const result = await processRegionOCR(\n                    img.url, \n                    region.coordinates\n                  );\n                  processedCount++;\n                  setBatchProgress({ current: processedCount, total: totalOperations });\n                  return result;\n                } catch (error) {\n                  console.error(\"Error processing region:\", error);\n                  processedCount++;\n                  setBatchProgress({ current: processedCount, total: totalOperations });\n                  return { \n                    text: \"Error processing this region\", \n                    croppedImageData: null,\n                    error: true\n                  };\n                }\n              })\n            );\n            return { ...img, results };\n          } catch (error) {\n            console.error(\"Error processing image:\", error);\n            return {\n              ...img,\n              results: Array(regions.length).fill(null).map(() => ({\n                text: \"Error processing this image\",\n                croppedImageData: null,\n                error: true\n              }))\n            };\n          }\n        })\n      );\n\n      setImages(updatedImages);\n      \n      // Update text for current image and region\n      if (updatedImages[currentImageIndex]?.results?.[currentRegionIndex]) {\n        setText(updatedImages[currentImageIndex].results[currentRegionIndex].text || '');\n      }\n      \n      setIsLoading(false);\n      setBatchProgress({ current: 0, total: 0 });\n    } catch (error) {\n      console.error(\"Failed to process all images:\", error);\n      setIsLoading(false);\n      setBatchProgress({ current: 0, total: 0 });\n      alert(\"An error occurred while processing images. Some images may not have been processed correctly.\");\n    }\n  };\n\n  // Handle coordinate changes for current region\n  const handleCurrentRegionCoordinatesChange = (e) => {\n    const { name, value } = e.target;\n    const newCoordinates = {\n      ...coordinates,\n      [name]: parseInt(value) || 0\n    };\n    setCoordinates(newCoordinates);\n    \n    // Update coordinates in the regions array\n    setRegions(prev => {\n      const newRegions = [...prev];\n      newRegions[currentRegionIndex].coordinates = newCoordinates;\n      return newRegions;\n    });\n  };\n\n  // Handle region name edit\n  const startEditingRegionName = (index) => {\n    setEditingRegionName(index);\n    setNewRegionName(regions[index].name);\n  };\n\n  // Save edited region name\n  const saveRegionName = () => {\n    if (editingRegionName !== null && newRegionName.trim() !== '') {\n      setRegions(prev => {\n        const newRegions = [...prev];\n        newRegions[editingRegionName].name = newRegionName.trim();\n        return newRegions;\n      });\n      setEditingRegionName(null);\n    }\n  };\n\n  // Cancel region name editing\n  const cancelRegionNameEdit = () => {\n    setEditingRegionName(null);\n  };\n\n  // Handle region name input change\n  const handleRegionNameChange = (e) => {\n    setNewRegionName(e.target.value);\n  };\n\n  // Add this function to handle key press events\n  const handleRegionNameKeyPress = (e) => {\n    // Check if Enter key was pressed\n    if (e.key === 'Enter') {\n      saveRegionName();\n    }\n  };\n\n  // Export results as CSV\n  const exportToCSV = () => {\n    // Create CSV header with a column for each region\n    let header = \"Image Name\";\n    for (let i = 0; i < regions.length; i++) {\n      header += `,${regions[i].name}`;\n    }\n    let csvContent = header + \"\\n\";\n    \n    // Add each image as a row with region texts as columns\n    images.forEach((img, imgIndex) => {\n      // Start with the image name\n      const imageName = img.filename || `Image ${imgIndex + 1}`;\n      let row = `\"${imageName}\"`;\n      \n      // Add each region's text as a column\n      if (img.results) {\n        for (let i = 0; i < regions.length; i++) {\n          // Get text for this region if available, otherwise use empty string\n          const regionText = img.results[i]?.text || '';\n          // Clean text data by escaping quotes and removing line breaks\n          const cleanedText = regionText.replace(/\"/g, '\"\"').replace(/\\n/g, ' ');\n          // Add to row\n          row += `,\"${cleanedText}\"`;\n        }\n      } else {\n        // If no results, fill with empty columns\n        for (let i = 0; i < regions.length; i++) {\n          row += `,\"\"`;\n        }\n      }\n      \n      // Add row to CSV\n      csvContent += row + \"\\n\";\n    });\n    \n    // Create a blob with the CSV content\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const url = URL.createObjectURL(blob);\n    \n    // Create a link element to trigger download\n    const link = document.createElement('a');\n    link.setAttribute('href', url);\n    link.setAttribute('download', 'ocr_results.csv');\n    link.style.visibility = 'hidden';\n    \n    // Add to document, click to download, then remove\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  // Update the canvas click handler to account for scaling\n  const handleCanvasClick = (e) => {\n    if (clickMode === \"none\" || !images[currentImageIndex]?.url || !canvasRef.current) return;\n    \n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    \n    // Calculate the scaling factor between displayed size and actual size\n    const scaleX = canvas.width / rect.width;\n    const scaleY = canvas.height / rect.height;\n    \n    // Calculate the click position relative to the image, accounting for scaling\n    const x = Math.round((e.clientX - rect.left) * scaleX);\n    const y = Math.round((e.clientY - rect.top) * scaleY);\n    \n    if (clickMode === \"ready\") {\n      // First click - set min coordinates\n      const newCoords = { minX: x, minY: y, maxX: x, maxY: y };\n      \n      // Update the coordinates state\n      setCoordinates(newCoords);\n      \n      // Update the regions array with new coordinates\n      const updatedRegions = [...regions];\n      updatedRegions[currentRegionIndex] = {\n        ...updatedRegions[currentRegionIndex],\n        coordinates: newCoords\n      };\n      setRegions(updatedRegions);\n      \n      setClickMode(\"first_click_done\");\n    } else if (clickMode === \"first_click_done\") {\n      // Second click - set max coordinates\n      // Get current coordinates\n      const currentCoords = regions[currentRegionIndex].coordinates;\n      \n      // Ensure max values are greater than min values\n      const minX = Math.min(currentCoords.minX, x);\n      const minY = Math.min(currentCoords.minY, y);\n      const maxX = Math.max(currentCoords.minX, x);\n      const maxY = Math.max(currentCoords.minY, y);\n      \n      const newCoords = { minX, minY, maxX, maxY };\n      \n      // Update the coordinates state\n      setCoordinates(newCoords);\n      \n      // Update the regions array with new coordinates\n      const updatedRegions = [...regions];\n      updatedRegions[currentRegionIndex] = {\n        ...updatedRegions[currentRegionIndex],\n        coordinates: newCoords\n      };\n      setRegions(updatedRegions);\n      \n      setClickMode(\"ready\"); // Reset to ready for next region\n    }\n  };\n\n  // Update the drawRectangle function\n  const drawRectangle = () => {\n    if (images[currentImageIndex]) {\n      const img = new Image();\n      img.onload = () => {\n        drawRectangles(img);\n        \n        // Set cursor style based on click mode\n        if (canvasRef.current) {\n          if (clickMode === \"ready\" || clickMode === \"first_click_done\") {\n            canvasRef.current.style.cursor = \"crosshair\";\n          } else {\n            canvasRef.current.style.cursor = \"default\";\n          }\n        }\n      };\n      img.src = images[currentImageIndex].url;\n    }\n  };\n\n  // Update useEffect for imageUrl to include clickMode dependency\n  useEffect(() => {\n    if (images[currentImageIndex]?.url) {\n      drawRectangle();\n    }\n  }, [images[currentImageIndex]?.url, regions, currentRegionIndex, clickMode]);\n\n  // Update the handleDeleteImage function to properly handle deleting the last image\n  const handleDeleteImage = (indexToDelete, e) => {\n    e.stopPropagation(); // Prevent triggering image selection when clicking delete\n    \n    // Update images array\n    setImages(prev => {\n      const newImages = [...prev];\n      newImages.splice(indexToDelete, 1);\n      return newImages;\n    });\n    \n    // When deleting the last image, reset states\n    if (images.length <= 1) {\n      setCurrentImageIndex(0);\n      setText('');\n      // Reset coordinates to default for current region\n      setCoordinates({ minX: 0, minY: 0, maxX: 0, maxY: 0 });\n      // Reset image dimensions\n      setImageDimensions({ width: 0, height: 0 });\n    } \n    // Otherwise handle normal deletion\n    else if (indexToDelete <= currentImageIndex) {\n      setCurrentImageIndex(prev => {\n        const newIndex = prev - 1;\n        return Math.max(0, Math.min(newIndex, images.length - 2));\n      });\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>OCR Image to Text</h1>\n      \n      {/* Image Selection */}\n      <div className=\"image-selection\">\n        <div className=\"image-selection-header\">\n          <h2>Select Image</h2>\n          <div className=\"file-input-container\">\n            <input\n              type=\"file\"\n              accept=\"image/*\"\n              onChange={handleImageChange}\n              multiple\n              style={{ display: 'none' }}\n              id=\"fileInput\"\n            />\n            <label htmlFor=\"fileInput\" className=\"file-upload-button\">\n              Choose Files\n            </label>\n          </div>\n        </div>\n        \n        {images.length > 0 && (\n          <div className=\"image-thumbnails\">\n            {images.map((image, index) => (\n              <div\n                key={index}\n                className={`image-thumbnail ${index === currentImageIndex ? 'selected' : ''}`}\n                onClick={() => handleImageSelect(index)}\n              >\n                <img src={image.url} alt={`Thumbnail ${index + 1}`} />\n                <span>{image.filename || `Image ${index + 1}`}</span>\n                <button \n                  className=\"delete-image-button\"\n                  onClick={(e) => handleDeleteImage(index, e)}\n                  title=\"Delete image\"\n                >\n                  ×\n                </button>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Make other sections conditional on images.length > 0 */}\n      {images.length > 0 ? (\n        <>\n          {/* Region and Coordinate Controls Container */}\n          <div className=\"region-coordinate-container\">\n            {/* Region Selection - now shared across all images */}\n            {regions.length > 0 && (\n              <div className=\"region-selection\">\n                <h3>Regions (Shared Across All Images):</h3>\n                <div className=\"region-controls\">\n                  <button onClick={addRegion} className=\"control-button\">Add Region</button>\n                  <button onClick={deleteRegion} className=\"control-button\">Delete Region</button>\n                </div>\n                <div className=\"region-tabs\">\n                  {regions.map((region, index) => (\n                    <div \n                      key={index}\n                      className={`region-tab ${index === currentRegionIndex ? 'selected' : ''}`}\n                    >\n                      {editingRegionName === index ? (\n                        <div className=\"region-name-edit\">\n                          <input\n                            type=\"text\"\n                            value={newRegionName}\n                            onChange={handleRegionNameChange}\n                            onClick={(e) => e.stopPropagation()}\n                            onKeyDown={handleRegionNameKeyPress}\n                            autoFocus\n                          />\n                          <div className=\"edit-buttons\">\n                            <button \n                              onClick={(e) => {\n                                e.stopPropagation();\n                                saveRegionName();\n                              }}\n                              className=\"save-button\"\n                            >\n                              ✓\n                            </button>\n                            <button \n                              onClick={(e) => {\n                                e.stopPropagation();\n                                cancelRegionNameEdit();\n                              }}\n                              className=\"cancel-button\"\n                            >\n                              ✕\n                            </button>\n                          </div>\n                        </div>\n                      ) : (\n                        <div \n                          className=\"region-name-display\"\n                          onClick={() => handleRegionSelect(index)}\n                        >\n                          <span>{region.name}</span>\n                          <button \n                            className=\"edit-name-button\"\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              startEditingRegionName(index);\n                            }}\n                          >\n                            ✎\n                          </button>\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Coordinate Inputs */}\n            <div className=\"coordinates-input\">\n              <h3>Enter Coordinates for {regions[currentRegionIndex].name}</h3>\n              \n              {/* Add click mode toggle button */}\n              <div className=\"click-mode-toggle\">\n                <button \n                  onClick={() => setClickMode(clickMode === \"none\" ? \"ready\" : \"none\")}\n                  className={clickMode !== \"none\" ? \"active\" : \"\"}\n                >\n                  {clickMode !== \"none\" ? \"Disable Click Selection\" : \"Enable Click Selection\"}\n                </button>\n                {clickMode === \"ready\" && \n                  <p className=\"click-instruction\">Click on image to set top-left corner</p>\n                }\n                {clickMode === \"first_click_done\" && \n                  <p className=\"click-instruction\">Click on image to set bottom-right corner</p>\n                }\n              </div>\n              \n              <div className=\"coordinate-group\">\n                <div>\n                  <label>Min X:</label>\n                  <input\n                    type=\"number\"\n                    name=\"minX\"\n                    value={coordinates.minX}\n                    onChange={handleCurrentRegionCoordinatesChange}\n                    placeholder=\"Min X\"\n                  />\n                </div>\n                <div>\n                  <label>Max X:</label>\n                  <input\n                    type=\"number\"\n                    name=\"maxX\"\n                    value={coordinates.maxX}\n                    onChange={handleCurrentRegionCoordinatesChange}\n                    placeholder=\"Max X\"\n                  />\n                </div>\n                <div>\n                  <label>Min Y:</label>\n                  <input\n                    type=\"number\"\n                    name=\"minY\"\n                    value={coordinates.minY}\n                    onChange={handleCurrentRegionCoordinatesChange}\n                    placeholder=\"Min Y\"\n                  />\n                </div>\n                <div>\n                  <label>Max Y:</label>\n                  <input\n                    type=\"number\"\n                    name=\"maxY\"\n                    value={coordinates.maxY}\n                    onChange={handleCurrentRegionCoordinatesChange}\n                    placeholder=\"Max Y\"\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* OCR Buttons */}\n          <div className=\"run-ocr\">\n            <button \n              onClick={handleRunOCR} \n              disabled={isLoading || !images[currentImageIndex]?.url}\n            >\n              {isLoading ? 'Processing...' : 'Run OCR on Current Region'}\n            </button>\n            <button \n              className=\"run-all-button\"\n              onClick={handleRunOCRAllRegions}\n              disabled={isLoading || !images[currentImageIndex]?.url}\n            >\n              {isLoading ? 'Processing...' : 'Run OCR on All Regions'}\n            </button>\n            <button \n              className=\"export-button\"\n              onClick={exportToCSV}\n              disabled={!images[currentImageIndex]?.results?.[currentRegionIndex] || !images[currentImageIndex]?.url}\n            >\n              Export to CSV\n            </button>\n          </div>\n\n          {/* Image Previews Container */}\n          <div className=\"image-preview-container\">\n            {/* Original Image with Rectangle */}\n            <div className=\"original-image-container\">\n              <h2>Original Image:</h2>\n              <canvas \n                ref={canvasRef} \n                onClick={handleCanvasClick}\n              ></canvas>\n              <div className=\"image-dimensions\">\n                Size: {imageDimensions.width} x {imageDimensions.height} pixels\n              </div>\n            </div>\n\n            {/* Cropped Image Preview */}\n            {images[currentImageIndex]?.results?.[currentRegionIndex] && (\n              <div className=\"image-preview\">\n                <h2>Cropped {regions[currentRegionIndex].name}:</h2>\n                {images[currentImageIndex].results[currentRegionIndex].error ? (\n                  <div className=\"error-message\">\n                    <p>Error: Unable to crop region due to invalid coordinates</p>\n                    <p>Please check that:</p>\n                    <ul>\n                      <li>Min values are less than Max values</li>\n                      <li>Coordinates are within image boundaries</li>\n                      <li>The region has a valid area (width and height &gt; 0)</li>\n                    </ul>\n                  </div>\n                ) : (\n                  <img \n                    src={images[currentImageIndex].results[currentRegionIndex].croppedImageData} \n                    alt=\"Cropped\" \n                    style={{ maxWidth: '400px' }} \n                  />\n                )}\n              </div>\n            )}\n\n            {/* Extracted Text */}\n            {images[currentImageIndex]?.results?.[currentRegionIndex] && (\n              <div className=\"result\">\n                <h2>Extracted Text from {regions[currentRegionIndex].name}:</h2>\n                {images[currentImageIndex].results[currentRegionIndex].error ? (\n                  <div className=\"error-message\">\n                    {images[currentImageIndex].results[currentRegionIndex].text}\n                  </div>\n                ) : (\n                  <pre>{images[currentImageIndex].results[currentRegionIndex].text}</pre>\n                )}\n              </div>\n            )}\n          </div>\n        </>\n      ) : (\n        <div className=\"no-images-message\">\n          <p>No images uploaded. Please select one or more images to begin.</p>\n        </div>\n      )}\n\n      {/* Loading Indicator */}\n      {isLoading && <p>Processing image...</p>}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}