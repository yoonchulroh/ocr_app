{"ast":null,"code":"var _jsxFileName = \"/Users/yoonchulroh/Projects/ocr-app/src/App.js\",\n  _s = $RefreshSig$();\n// src/App.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport Tesseract from 'tesseract.js';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  var _images$currentImageI5, _images$currentImageI6, _images$currentImageI7, _images$currentImageI8, _images$currentImageI9, _images$currentImageI10, _images$currentImageI11, _images$currentImageI12;\n  const [images, setImages] = useState([]);\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\n  const [text, setText] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [batchProgress, setBatchProgress] = useState({\n    current: 0,\n    total: 0\n  });\n  const [imageDimensions, setImageDimensions] = useState({\n    width: 0,\n    height: 0\n  });\n  const [coordinates, setCoordinates] = useState({\n    minX: 0,\n    maxX: 0,\n    minY: 0,\n    maxY: 0\n  });\n  const [regionName, setRegionName] = useState('Region 1');\n  const canvasRef = useRef(null);\n\n  // Draw rectangle on image\n  const drawRectangle = img => {\n    var _images$currentImageI;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Set canvas size to match image\n    canvas.width = img.width;\n    canvas.height = img.height;\n\n    // Draw the image\n    ctx.drawImage(img, 0, 0);\n\n    // Get regions for current image\n    const regions = ((_images$currentImageI = images[currentImageIndex]) === null || _images$currentImageI === void 0 ? void 0 : _images$currentImageI.regions) || [];\n\n    // Draw all regions\n    regions.forEach((region, index) => {\n      // Different color for each region\n      const colors = ['red', 'blue', 'green', 'orange', 'purple', 'yellow', 'cyan'];\n      ctx.strokeStyle = colors[index % colors.length];\n      ctx.lineWidth = 2;\n      ctx.strokeRect(region.coordinates.minX, region.coordinates.minY, region.coordinates.maxX - region.coordinates.minX, region.coordinates.maxY - region.coordinates.minY);\n\n      // Add region name\n      ctx.fillStyle = colors[index % colors.length];\n      ctx.font = '12px Arial';\n      ctx.fillText(region.name || `Region ${index + 1}`, region.coordinates.minX, region.coordinates.minY - 5);\n    });\n\n    // Draw current region being edited\n    if (!regions.some(r => r.isEditing)) {\n      ctx.strokeStyle = 'red';\n      ctx.lineWidth = 2;\n      ctx.strokeRect(coordinates.minX, coordinates.minY, coordinates.maxX - coordinates.minX, coordinates.maxY - coordinates.minY);\n    }\n  };\n\n  // Update rectangle when coordinates change\n  useEffect(() => {\n    if (images[currentImageIndex]) {\n      const img = new Image();\n      img.src = images[currentImageIndex].url;\n      img.onload = () => {\n        drawRectangle(img);\n        setImageDimensions({\n          width: img.width,\n          height: img.height\n        });\n      };\n    }\n  }, [coordinates, currentImageIndex, images]);\n\n  // Handle coordinate changes\n  const handleCoordinateChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setCoordinates(prev => ({\n      ...prev,\n      [name]: parseInt(value) || 0\n    }));\n  };\n\n  // Handle image upload\n  const handleImageChange = e => {\n    if (e.target.files) {\n      const newImages = Array.from(e.target.files).map(file => ({\n        url: URL.createObjectURL(file),\n        regions: [],\n        text: ''\n      }));\n      setImages(prev => [...prev, ...newImages]);\n      setCurrentImageIndex(prev => prev + newImages.length - 1);\n    }\n  };\n\n  // Handle image selection\n  const handleImageSelect = index => {\n    var _images$index$regions;\n    setCurrentImageIndex(index);\n    setText(images[index].text || '');\n\n    // Reset coordinate values when switching images\n    setCoordinates({\n      minX: 0,\n      maxX: 0,\n      minY: 0,\n      maxY: 0\n    });\n    setRegionName(`Region ${(((_images$index$regions = images[index].regions) === null || _images$index$regions === void 0 ? void 0 : _images$index$regions.length) || 0) + 1}`);\n  };\n\n  // Crop image using coordinates\n  const cropImage = (imageElement, coords) => {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n\n    // Set canvas size to the specified dimensions\n    canvas.width = coords.maxX - coords.minX;\n    canvas.height = coords.maxY - coords.minY;\n\n    // Draw the cropped region\n    ctx.drawImage(imageElement, coords.minX, coords.minY, coords.maxX - coords.minX, coords.maxY - coords.minY, 0, 0, coords.maxX - coords.minX, coords.maxY - coords.minY);\n    return canvas.toDataURL('image/png');\n  };\n\n  // Add a new region\n  const addRegion = () => {\n    if (!images[currentImageIndex]) return;\n\n    // Validate coordinates\n    if (coordinates.minX >= coordinates.maxX || coordinates.minY >= coordinates.maxY) {\n      alert('Invalid coordinates. Make sure Max X > Min X and Max Y > Min Y');\n      return;\n    }\n    const newRegion = {\n      name: regionName,\n      coordinates: {\n        ...coordinates\n      },\n      text: '',\n      croppedImageData: null\n    };\n    setImages(prev => {\n      const newImages = [...prev];\n      if (!newImages[currentImageIndex].regions) {\n        newImages[currentImageIndex].regions = [];\n      }\n      newImages[currentImageIndex].regions.push(newRegion);\n      return newImages;\n    });\n\n    // Reset coordinates after adding region\n    setCoordinates({\n      minX: 0,\n      maxX: 0,\n      minY: 0,\n      maxY: 0\n    });\n\n    // Update region name for next addition\n    setTimeout(() => {\n      var _images$currentImageI2, _images$currentImageI3;\n      setRegionName(`Region ${(((_images$currentImageI2 = images[currentImageIndex]) === null || _images$currentImageI2 === void 0 ? void 0 : (_images$currentImageI3 = _images$currentImageI2.regions) === null || _images$currentImageI3 === void 0 ? void 0 : _images$currentImageI3.length) || 0) + 1}`);\n    }, 0);\n  };\n\n  // Remove a region\n  const removeRegion = regionIndex => {\n    setImages(prev => {\n      const newImages = [...prev];\n      newImages[currentImageIndex].regions.splice(regionIndex, 1);\n      return newImages;\n    });\n  };\n\n  // Edit a region\n  const editRegion = regionIndex => {\n    const region = images[currentImageIndex].regions[regionIndex];\n    setCoordinates(region.coordinates);\n    setRegionName(region.name);\n\n    // Mark as editing\n    setImages(prev => {\n      const newImages = [...prev];\n      newImages[currentImageIndex].regions = newImages[currentImageIndex].regions.map((r, idx) => ({\n        ...r,\n        isEditing: idx === regionIndex\n      }));\n      return newImages;\n    });\n  };\n\n  // Update a region\n  const updateRegion = regionIndex => {\n    var _images$currentImageI4;\n    setImages(prev => {\n      const newImages = [...prev];\n      newImages[currentImageIndex].regions[regionIndex] = {\n        ...newImages[currentImageIndex].regions[regionIndex],\n        name: regionName,\n        coordinates: {\n          ...coordinates\n        },\n        isEditing: false\n      };\n      return newImages;\n    });\n\n    // Reset for next region\n    setCoordinates({\n      minX: 0,\n      maxX: 0,\n      minY: 0,\n      maxY: 0\n    });\n    setRegionName(`Region ${(((_images$currentImageI4 = images[currentImageIndex].regions) === null || _images$currentImageI4 === void 0 ? void 0 : _images$currentImageI4.length) || 0) + 1}`);\n  };\n\n  // Process single image with OCR\n  const processImageOCR = (imageUrl, regions) => {\n    return new Promise((resolve, reject) => {\n      const img = new Image();\n      img.src = imageUrl;\n      img.onload = async () => {\n        try {\n          const updatedRegions = await Promise.all(regions.map(async region => {\n            const croppedImageData = cropImage(img, region.coordinates);\n            const result = await Tesseract.recognize(croppedImageData, 'eng', {\n              logger: m => console.log(m)\n            });\n            return {\n              ...region,\n              text: result.data.text,\n              croppedImageData\n            };\n          }));\n          resolve(updatedRegions);\n        } catch (error) {\n          reject(error);\n        }\n      };\n    });\n  };\n\n  // Process image and run OCR\n  const handleRunOCR = async () => {\n    const currentImage = images[currentImageIndex];\n    if (!currentImage || !currentImage.regions || currentImage.regions.length === 0) {\n      alert('Please add at least one region first');\n      return;\n    }\n    setIsLoading(true);\n    try {\n      const updatedRegions = await processImageOCR(currentImage.url, currentImage.regions);\n      setImages(prev => {\n        const newImages = [...prev];\n        newImages[currentImageIndex].regions = updatedRegions;\n        return newImages;\n      });\n      setIsLoading(false);\n    } catch (error) {\n      console.error(error);\n      setIsLoading(false);\n    }\n  };\n\n  // Process all images with OCR\n  const handleRunOCRAll = async () => {\n    const imagesWithRegions = images.filter(img => img.regions && img.regions.length > 0);\n    if (imagesWithRegions.length === 0) {\n      alert('Please add at least one region to at least one image first');\n      return;\n    }\n    setIsLoading(true);\n    setBatchProgress({\n      current: 0,\n      total: imagesWithRegions.length\n    });\n    try {\n      const updatedImages = await Promise.all(images.map(async (img, index) => {\n        if (!img.regions || img.regions.length === 0) {\n          return img;\n        }\n        const updatedRegions = await processImageOCR(img.url, img.regions);\n        setBatchProgress(prev => ({\n          ...prev,\n          current: prev.current + 1\n        }));\n        return {\n          ...img,\n          regions: updatedRegions\n        };\n      }));\n      setImages(updatedImages);\n      setIsLoading(false);\n      setBatchProgress({\n        current: 0,\n        total: 0\n      });\n    } catch (error) {\n      console.error(error);\n      setIsLoading(false);\n      setBatchProgress({\n        current: 0,\n        total: 0\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"OCR Image to Text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        multiple: true,\n        onChange: handleImageChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 7\n    }, this), images.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-selection\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Select Image:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-thumbnails\",\n        children: images.map((img, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `image-thumbnail ${index === currentImageIndex ? 'selected' : ''}`,\n          onClick: () => handleImageSelect(index),\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: img.url,\n            alt: `Thumbnail ${index + 1}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Image \", index + 1]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 9\n    }, this), images.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"regions-management\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Regions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 11\n      }, this), ((_images$currentImageI5 = images[currentImageIndex]) === null || _images$currentImageI5 === void 0 ? void 0 : (_images$currentImageI6 = _images$currentImageI5.regions) === null || _images$currentImageI6 === void 0 ? void 0 : _images$currentImageI6.length) > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"region-list\",\n        children: images[currentImageIndex].regions.map((region, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"region-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: region.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"region-actions\",\n            children: [region.isEditing ? /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => updateRegion(index),\n              children: \"Update\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 381,\n              columnNumber: 23\n            }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => editRegion(index),\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 383,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => removeRegion(index),\n              children: \"Remove\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 385,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 379,\n            columnNumber: 19\n          }, this), region.text && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"region-text\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Text:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 389,\n              columnNumber: 23\n            }, this), \" \", region.text.substring(0, 50), region.text.length > 50 ? '...' : '']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 21\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"coordinates-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: (_images$currentImageI7 = images[currentImageIndex]) !== null && _images$currentImageI7 !== void 0 && (_images$currentImageI8 = _images$currentImageI7.regions) !== null && _images$currentImageI8 !== void 0 && _images$currentImageI8.some(r => r.isEditing) ? 'Edit Region' : 'Add New Region'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"region-name-input\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Region Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 405,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: regionName,\n            onChange: e => setRegionName(e.target.value),\n            placeholder: \"Region Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 406,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"coordinate-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Min X:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 416,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              name: \"minX\",\n              value: coordinates.minX,\n              onChange: handleCoordinateChange,\n              placeholder: \"Min X\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 417,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Max X:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 426,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              name: \"maxX\",\n              value: coordinates.maxX,\n              onChange: handleCoordinateChange,\n              placeholder: \"Max X\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 427,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 425,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Min Y:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 436,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              name: \"minY\",\n              value: coordinates.minY,\n              onChange: handleCoordinateChange,\n              placeholder: \"Min Y\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 437,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 435,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Max Y:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 446,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              name: \"maxY\",\n              value: coordinates.maxY,\n              onChange: handleCoordinateChange,\n              placeholder: \"Max Y\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 447,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 445,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 13\n        }, this), (_images$currentImageI9 = images[currentImageIndex]) !== null && _images$currentImageI9 !== void 0 && (_images$currentImageI10 = _images$currentImageI9.regions) !== null && _images$currentImageI10 !== void 0 && _images$currentImageI10.some(r => r.isEditing) ? /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            const index = images[currentImageIndex].regions.findIndex(r => r.isEditing);\n            if (index !== -1) updateRegion(index);\n          },\n          children: \"Update Region\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addRegion,\n          disabled: isLoading,\n          children: \"Add Region\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 9\n    }, this), images.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"run-ocr\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRunOCR,\n        disabled: isLoading,\n        children: isLoading ? 'Processing...' : 'Run OCR on Current Image'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRunOCRAll,\n        disabled: isLoading,\n        className: \"run-all-button\",\n        children: isLoading ? `Processing ${batchProgress.current}/${batchProgress.total}...` : 'Run OCR on All Images'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 477,\n      columnNumber: 9\n    }, this), images.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-preview-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-preview\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Original Image:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: canvasRef,\n          style: {\n            maxWidth: '400px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 493,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image-dimensions\",\n          children: [\"Size: \", imageDimensions.width, \" x \", imageDimensions.height, \" pixels\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 494,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 11\n      }, this), ((_images$currentImageI11 = images[currentImageIndex]) === null || _images$currentImageI11 === void 0 ? void 0 : (_images$currentImageI12 = _images$currentImageI11.regions) === null || _images$currentImageI12 === void 0 ? void 0 : _images$currentImageI12.length) > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"regions-results\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Region Results:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 502,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"regions-grid\",\n          children: images[currentImageIndex].regions.map((region, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"region-result\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: region.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 507,\n              columnNumber: 21\n            }, this), region.croppedImageData && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"region-image\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: region.croppedImageData,\n                alt: `${region.name} cropped`,\n                style: {\n                  maxWidth: '200px'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 511,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 510,\n              columnNumber: 23\n            }, this), region.text && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"region-text-result\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                children: \"Extracted Text:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 521,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n                children: region.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 522,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 520,\n              columnNumber: 23\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 506,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 489,\n      columnNumber: 9\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Processing image...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 534,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 336,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"PGpjMCx4NqxXadJ3x6JOftfyoyA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Tesseract","jsxDEV","_jsxDEV","App","_s","_images$currentImageI5","_images$currentImageI6","_images$currentImageI7","_images$currentImageI8","_images$currentImageI9","_images$currentImageI10","_images$currentImageI11","_images$currentImageI12","images","setImages","currentImageIndex","setCurrentImageIndex","text","setText","isLoading","setIsLoading","batchProgress","setBatchProgress","current","total","imageDimensions","setImageDimensions","width","height","coordinates","setCoordinates","minX","maxX","minY","maxY","regionName","setRegionName","canvasRef","drawRectangle","img","_images$currentImageI","canvas","ctx","getContext","drawImage","regions","forEach","region","index","colors","strokeStyle","length","lineWidth","strokeRect","fillStyle","font","fillText","name","some","r","isEditing","Image","src","url","onload","handleCoordinateChange","e","value","target","prev","parseInt","handleImageChange","files","newImages","Array","from","map","file","URL","createObjectURL","handleImageSelect","_images$index$regions","cropImage","imageElement","coords","document","createElement","toDataURL","addRegion","alert","newRegion","croppedImageData","push","setTimeout","_images$currentImageI2","_images$currentImageI3","removeRegion","regionIndex","splice","editRegion","idx","updateRegion","_images$currentImageI4","processImageOCR","imageUrl","Promise","resolve","reject","updatedRegions","all","result","recognize","logger","m","console","log","data","error","handleRunOCR","currentImage","handleRunOCRAll","imagesWithRegions","filter","updatedImages","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","multiple","onChange","onClick","alt","substring","placeholder","findIndex","disabled","ref","style","maxWidth","_c","$RefreshReg$"],"sources":["/Users/yoonchulroh/Projects/ocr-app/src/App.js"],"sourcesContent":["// src/App.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport Tesseract from 'tesseract.js';\nimport './App.css';\n\nfunction App() {\n  const [images, setImages] = useState([]);\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\n  const [text, setText] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [batchProgress, setBatchProgress] = useState({ current: 0, total: 0 });\n  const [imageDimensions, setImageDimensions] = useState({ width: 0, height: 0 });\n  const [coordinates, setCoordinates] = useState({\n    minX: 0,\n    maxX: 0,\n    minY: 0,\n    maxY: 0\n  });\n  const [regionName, setRegionName] = useState('Region 1');\n  const canvasRef = useRef(null);\n\n  // Draw rectangle on image\n  const drawRectangle = (img) => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    \n    // Set canvas size to match image\n    canvas.width = img.width;\n    canvas.height = img.height;\n    \n    // Draw the image\n    ctx.drawImage(img, 0, 0);\n    \n    // Get regions for current image\n    const regions = images[currentImageIndex]?.regions || [];\n    \n    // Draw all regions\n    regions.forEach((region, index) => {\n      // Different color for each region\n      const colors = ['red', 'blue', 'green', 'orange', 'purple', 'yellow', 'cyan'];\n      ctx.strokeStyle = colors[index % colors.length];\n      ctx.lineWidth = 2;\n      ctx.strokeRect(\n        region.coordinates.minX,\n        region.coordinates.minY,\n        region.coordinates.maxX - region.coordinates.minX,\n        region.coordinates.maxY - region.coordinates.minY\n      );\n      \n      // Add region name\n      ctx.fillStyle = colors[index % colors.length];\n      ctx.font = '12px Arial';\n      ctx.fillText(\n        region.name || `Region ${index + 1}`,\n        region.coordinates.minX,\n        region.coordinates.minY - 5\n      );\n    });\n    \n    // Draw current region being edited\n    if (!regions.some(r => r.isEditing)) {\n      ctx.strokeStyle = 'red';\n      ctx.lineWidth = 2;\n      ctx.strokeRect(\n        coordinates.minX,\n        coordinates.minY,\n        coordinates.maxX - coordinates.minX,\n        coordinates.maxY - coordinates.minY\n      );\n    }\n  };\n\n  // Update rectangle when coordinates change\n  useEffect(() => {\n    if (images[currentImageIndex]) {\n      const img = new Image();\n      img.src = images[currentImageIndex].url;\n      img.onload = () => {\n        drawRectangle(img);\n        setImageDimensions({ width: img.width, height: img.height });\n      };\n    }\n  }, [coordinates, currentImageIndex, images]);\n\n  // Handle coordinate changes\n  const handleCoordinateChange = (e) => {\n    const { name, value } = e.target;\n    setCoordinates(prev => ({\n      ...prev,\n      [name]: parseInt(value) || 0\n    }));\n  };\n\n  // Handle image upload\n  const handleImageChange = (e) => {\n    if (e.target.files) {\n      const newImages = Array.from(e.target.files).map(file => ({\n        url: URL.createObjectURL(file),\n        regions: [],\n        text: ''\n      }));\n      setImages(prev => [...prev, ...newImages]);\n      setCurrentImageIndex(prev => prev + newImages.length - 1);\n    }\n  };\n\n  // Handle image selection\n  const handleImageSelect = (index) => {\n    setCurrentImageIndex(index);\n    setText(images[index].text || '');\n    \n    // Reset coordinate values when switching images\n    setCoordinates({\n      minX: 0,\n      maxX: 0,\n      minY: 0,\n      maxY: 0\n    });\n    setRegionName(`Region ${(images[index].regions?.length || 0) + 1}`);\n  };\n\n  // Crop image using coordinates\n  const cropImage = (imageElement, coords) => {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    \n    // Set canvas size to the specified dimensions\n    canvas.width = coords.maxX - coords.minX;\n    canvas.height = coords.maxY - coords.minY;\n    \n    // Draw the cropped region\n    ctx.drawImage(\n      imageElement,\n      coords.minX, coords.minY,\n      coords.maxX - coords.minX, coords.maxY - coords.minY,\n      0, 0,\n      coords.maxX - coords.minX, coords.maxY - coords.minY\n    );\n    \n    return canvas.toDataURL('image/png');\n  };\n\n  // Add a new region\n  const addRegion = () => {\n    if (!images[currentImageIndex]) return;\n    \n    // Validate coordinates\n    if (coordinates.minX >= coordinates.maxX || coordinates.minY >= coordinates.maxY) {\n      alert('Invalid coordinates. Make sure Max X > Min X and Max Y > Min Y');\n      return;\n    }\n    \n    const newRegion = {\n      name: regionName,\n      coordinates: { ...coordinates },\n      text: '',\n      croppedImageData: null\n    };\n    \n    setImages(prev => {\n      const newImages = [...prev];\n      if (!newImages[currentImageIndex].regions) {\n        newImages[currentImageIndex].regions = [];\n      }\n      newImages[currentImageIndex].regions.push(newRegion);\n      return newImages;\n    });\n    \n    // Reset coordinates after adding region\n    setCoordinates({\n      minX: 0,\n      maxX: 0,\n      minY: 0,\n      maxY: 0\n    });\n    \n    // Update region name for next addition\n    setTimeout(() => {\n      setRegionName(`Region ${(images[currentImageIndex]?.regions?.length || 0) + 1}`);\n    }, 0);\n  };\n\n  // Remove a region\n  const removeRegion = (regionIndex) => {\n    setImages(prev => {\n      const newImages = [...prev];\n      newImages[currentImageIndex].regions.splice(regionIndex, 1);\n      return newImages;\n    });\n  };\n\n  // Edit a region\n  const editRegion = (regionIndex) => {\n    const region = images[currentImageIndex].regions[regionIndex];\n    setCoordinates(region.coordinates);\n    setRegionName(region.name);\n    \n    // Mark as editing\n    setImages(prev => {\n      const newImages = [...prev];\n      newImages[currentImageIndex].regions = newImages[currentImageIndex].regions.map(\n        (r, idx) => ({ ...r, isEditing: idx === regionIndex })\n      );\n      return newImages;\n    });\n  };\n\n  // Update a region\n  const updateRegion = (regionIndex) => {\n    setImages(prev => {\n      const newImages = [...prev];\n      newImages[currentImageIndex].regions[regionIndex] = {\n        ...newImages[currentImageIndex].regions[regionIndex],\n        name: regionName,\n        coordinates: { ...coordinates },\n        isEditing: false\n      };\n      return newImages;\n    });\n    \n    // Reset for next region\n    setCoordinates({\n      minX: 0,\n      maxX: 0,\n      minY: 0,\n      maxY: 0\n    });\n    setRegionName(`Region ${(images[currentImageIndex].regions?.length || 0) + 1}`);\n  };\n\n  // Process single image with OCR\n  const processImageOCR = (imageUrl, regions) => {\n    return new Promise((resolve, reject) => {\n      const img = new Image();\n      img.src = imageUrl;\n      \n      img.onload = async () => {\n        try {\n          const updatedRegions = await Promise.all(\n            regions.map(async (region) => {\n              const croppedImageData = cropImage(img, region.coordinates);\n              \n              const result = await Tesseract.recognize(\n                croppedImageData,\n                'eng',\n                {\n                  logger: (m) => console.log(m)\n                }\n              );\n              \n              return {\n                ...region,\n                text: result.data.text,\n                croppedImageData\n              };\n            })\n          );\n          \n          resolve(updatedRegions);\n        } catch (error) {\n          reject(error);\n        }\n      };\n    });\n  };\n\n  // Process image and run OCR\n  const handleRunOCR = async () => {\n    const currentImage = images[currentImageIndex];\n    if (!currentImage || !currentImage.regions || currentImage.regions.length === 0) {\n      alert('Please add at least one region first');\n      return;\n    }\n\n    setIsLoading(true);\n    \n    try {\n      const updatedRegions = await processImageOCR(\n        currentImage.url, \n        currentImage.regions\n      );\n      \n      setImages(prev => {\n        const newImages = [...prev];\n        newImages[currentImageIndex].regions = updatedRegions;\n        return newImages;\n      });\n      \n      setIsLoading(false);\n    } catch (error) {\n      console.error(error);\n      setIsLoading(false);\n    }\n  };\n\n  // Process all images with OCR\n  const handleRunOCRAll = async () => {\n    const imagesWithRegions = images.filter(img => img.regions && img.regions.length > 0);\n    \n    if (imagesWithRegions.length === 0) {\n      alert('Please add at least one region to at least one image first');\n      return;\n    }\n\n    setIsLoading(true);\n    setBatchProgress({ current: 0, total: imagesWithRegions.length });\n\n    try {\n      const updatedImages = await Promise.all(\n        images.map(async (img, index) => {\n          if (!img.regions || img.regions.length === 0) {\n            return img;\n          }\n          \n          const updatedRegions = await processImageOCR(img.url, img.regions);\n          setBatchProgress(prev => ({ ...prev, current: prev.current + 1 }));\n          \n          return {\n            ...img,\n            regions: updatedRegions\n          };\n        })\n      );\n\n      setImages(updatedImages);\n      setIsLoading(false);\n      setBatchProgress({ current: 0, total: 0 });\n    } catch (error) {\n      console.error(error);\n      setIsLoading(false);\n      setBatchProgress({ current: 0, total: 0 });\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>OCR Image to Text</h1>\n      \n      {/* Image Upload */}\n      <div>\n        <input\n          type=\"file\"\n          accept=\"image/*\"\n          multiple\n          onChange={handleImageChange}\n        />\n      </div>\n\n      {/* Image Selection */}\n      {images.length > 0 && (\n        <div className=\"image-selection\">\n          <h3>Select Image:</h3>\n          <div className=\"image-thumbnails\">\n            {images.map((img, index) => (\n              <div \n                key={index}\n                className={`image-thumbnail ${index === currentImageIndex ? 'selected' : ''}`}\n                onClick={() => handleImageSelect(index)}\n              >\n                <img src={img.url} alt={`Thumbnail ${index + 1}`} />\n                <span>Image {index + 1}</span>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Regions Management */}\n      {images.length > 0 && (\n        <div className=\"regions-management\">\n          <h3>Regions</h3>\n          \n          {/* Region List */}\n          {images[currentImageIndex]?.regions?.length > 0 && (\n            <div className=\"region-list\">\n              {images[currentImageIndex].regions.map((region, index) => (\n                <div key={index} className=\"region-item\">\n                  <span>{region.name}</span>\n                  <div className=\"region-actions\">\n                    {region.isEditing ? (\n                      <button onClick={() => updateRegion(index)}>Update</button>\n                    ) : (\n                      <button onClick={() => editRegion(index)}>Edit</button>\n                    )}\n                    <button onClick={() => removeRegion(index)}>Remove</button>\n                  </div>\n                  {region.text && (\n                    <div className=\"region-text\">\n                      <strong>Text:</strong> {region.text.substring(0, 50)}\n                      {region.text.length > 50 ? '...' : ''}\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          )}\n          \n          {/* Coordinate Inputs */}\n          <div className=\"coordinates-input\">\n            <h4>{images[currentImageIndex]?.regions?.some(r => r.isEditing) \n              ? 'Edit Region' \n              : 'Add New Region'}</h4>\n            \n            <div className=\"region-name-input\">\n              <label>Region Name:</label>\n              <input\n                type=\"text\"\n                value={regionName}\n                onChange={(e) => setRegionName(e.target.value)}\n                placeholder=\"Region Name\"\n              />\n            </div>\n            \n            <div className=\"coordinate-group\">\n              <div>\n                <label>Min X:</label>\n                <input\n                  type=\"number\"\n                  name=\"minX\"\n                  value={coordinates.minX}\n                  onChange={handleCoordinateChange}\n                  placeholder=\"Min X\"\n                />\n              </div>\n              <div>\n                <label>Max X:</label>\n                <input\n                  type=\"number\"\n                  name=\"maxX\"\n                  value={coordinates.maxX}\n                  onChange={handleCoordinateChange}\n                  placeholder=\"Max X\"\n                />\n              </div>\n              <div>\n                <label>Min Y:</label>\n                <input\n                  type=\"number\"\n                  name=\"minY\"\n                  value={coordinates.minY}\n                  onChange={handleCoordinateChange}\n                  placeholder=\"Min Y\"\n                />\n              </div>\n              <div>\n                <label>Max Y:</label>\n                <input\n                  type=\"number\"\n                  name=\"maxY\"\n                  value={coordinates.maxY}\n                  onChange={handleCoordinateChange}\n                  placeholder=\"Max Y\"\n                />\n              </div>\n            </div>\n            \n            {images[currentImageIndex]?.regions?.some(r => r.isEditing) ? (\n              <button onClick={() => {\n                const index = images[currentImageIndex].regions.findIndex(r => r.isEditing);\n                if (index !== -1) updateRegion(index);\n              }}>\n                Update Region\n              </button>\n            ) : (\n              <button \n                onClick={addRegion}\n                disabled={isLoading}>\n                Add Region\n              </button>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* OCR Buttons */}\n      {images.length > 0 && (\n        <div className=\"run-ocr\">\n          <button onClick={handleRunOCR} disabled={isLoading}>\n            {isLoading ? 'Processing...' : 'Run OCR on Current Image'}\n          </button>\n          <button onClick={handleRunOCRAll} disabled={isLoading} className=\"run-all-button\">\n            {isLoading ? `Processing ${batchProgress.current}/${batchProgress.total}...` : 'Run OCR on All Images'}\n          </button>\n        </div>\n      )}\n\n      {/* Image Previews Container */}\n      {images.length > 0 && (\n        <div className=\"image-preview-container\">\n          {/* Original Image with Rectangles */}\n          <div className=\"image-preview\">\n            <h2>Original Image:</h2>\n            <canvas ref={canvasRef} style={{ maxWidth: '400px' }} />\n            <div className=\"image-dimensions\">\n              Size: {imageDimensions.width} x {imageDimensions.height} pixels\n            </div>\n          </div>\n\n          {/* Results */}\n          {images[currentImageIndex]?.regions?.length > 0 && (\n            <div className=\"regions-results\">\n              <h2>Region Results:</h2>\n              \n              <div className=\"regions-grid\">\n                {images[currentImageIndex].regions.map((region, index) => (\n                  <div key={index} className=\"region-result\">\n                    <h3>{region.name}</h3>\n                    \n                    {region.croppedImageData && (\n                      <div className=\"region-image\">\n                        <img \n                          src={region.croppedImageData} \n                          alt={`${region.name} cropped`} \n                          style={{ maxWidth: '200px' }} \n                        />\n                      </div>\n                    )}\n                    \n                    {region.text && (\n                      <div className=\"region-text-result\">\n                        <h4>Extracted Text:</h4>\n                        <pre>{region.text}</pre>\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Loading Indicator */}\n      {isLoading && <p>Processing image...</p>}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}