{"ast":null,"code":"var _jsxFileName = \"/Users/yoonchulroh/Projects/ocr-app/src/App.js\",\n  _s = $RefreshSig$();\n// src/App.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport Tesseract from 'tesseract.js';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  var _images$currentImageI, _images$currentImageI2, _images$currentImageI3;\n  const [images, setImages] = useState([]);\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\n  const [currentCoordinateIndex, setCurrentCoordinateIndex] = useState(0);\n  const [text, setText] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [batchProgress, setBatchProgress] = useState({\n    current: 0,\n    total: 0\n  });\n  const [imageDimensions, setImageDimensions] = useState({\n    width: 0,\n    height: 0\n  });\n  const [coordinates, setCoordinates] = useState({\n    minX: 0,\n    maxX: 0,\n    minY: 0,\n    maxY: 0\n  });\n  const canvasRef = useRef(null);\n\n  // Draw rectangle on image\n  const drawRectangle = img => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Set canvas size to match image\n    canvas.width = img.width;\n    canvas.height = img.height;\n\n    // Draw the image\n    ctx.drawImage(img, 0, 0);\n\n    // Draw all rectangles for current image\n    const currentImage = images[currentImageIndex];\n    if (currentImage && currentImage.coordinateSets) {\n      currentImage.coordinateSets.forEach((coordSet, index) => {\n        ctx.strokeStyle = index === currentCoordinateIndex ? 'red' : 'blue';\n        ctx.lineWidth = index === currentCoordinateIndex ? 2 : 1;\n        ctx.strokeRect(coordSet.minX, coordSet.minY, coordSet.maxX - coordSet.minX, coordSet.maxY - coordSet.minY);\n      });\n    }\n  };\n\n  // Update rectangle when coordinates change\n  useEffect(() => {\n    if (images[currentImageIndex]) {\n      const img = new Image();\n      img.src = images[currentImageIndex].url;\n      img.onload = () => {\n        drawRectangle(img);\n        setImageDimensions({\n          width: img.width,\n          height: img.height\n        });\n      };\n    }\n  }, [coordinates, currentImageIndex, currentCoordinateIndex, images]);\n\n  // Handle coordinate changes\n  const handleCoordinateChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setCoordinates(prev => ({\n      ...prev,\n      [name]: parseInt(value) || 0\n    }));\n  };\n\n  // Handle image upload\n  const handleImageChange = e => {\n    if (e.target.files) {\n      const newImages = Array.from(e.target.files).map(file => ({\n        url: URL.createObjectURL(file),\n        coordinateSets: [{\n          minX: 0,\n          maxX: 0,\n          minY: 0,\n          maxY: 0\n        }],\n        text: ''\n      }));\n      setImages(prev => [...prev, ...newImages]);\n      setCurrentImageIndex(prev => prev + newImages.length - 1);\n      setCurrentCoordinateIndex(0);\n    }\n  };\n\n  // Handle image selection\n  const handleImageSelect = index => {\n    setCurrentImageIndex(index);\n    setCurrentCoordinateIndex(0);\n    setCoordinates(images[index].coordinateSets[0]);\n    setText(images[index].text);\n  };\n\n  // Add new coordinate set\n  const handleAddCoordinateSet = () => {\n    const newCoordinateSet = {\n      minX: 0,\n      maxX: 0,\n      minY: 0,\n      maxY: 0\n    };\n    setImages(prev => prev.map((img, index) => index === currentImageIndex ? {\n      ...img,\n      coordinateSets: [...img.coordinateSets, newCoordinateSet]\n    } : img));\n    setCurrentCoordinateIndex(prev => prev + 1);\n    setCoordinates(newCoordinateSet);\n  };\n\n  // Remove current coordinate set\n  const handleRemoveCoordinateSet = () => {\n    if (images[currentImageIndex].coordinateSets.length > 1) {\n      setImages(prev => prev.map((img, index) => index === currentImageIndex ? {\n        ...img,\n        coordinateSets: img.coordinateSets.filter((_, i) => i !== currentCoordinateIndex)\n      } : img));\n      setCurrentCoordinateIndex(prev => Math.max(0, prev - 1));\n      setCoordinates(images[currentImageIndex].coordinateSets[Math.max(0, currentCoordinateIndex - 1)]);\n    }\n  };\n\n  // Handle coordinate set selection\n  const handleCoordinateSetSelect = index => {\n    setCurrentCoordinateIndex(index);\n    setCoordinates(images[currentImageIndex].coordinateSets[index]);\n  };\n\n  // Crop image using coordinates\n  const cropImage = (imageElement, coordSet) => {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n\n    // Set canvas size to the specified dimensions\n    canvas.width = coordSet.maxX - coordSet.minX;\n    canvas.height = coordSet.maxY - coordSet.minY;\n\n    // Draw the cropped region\n    ctx.drawImage(imageElement, coordSet.minX, coordSet.minY, coordSet.maxX - coordSet.minX, coordSet.maxY - coordSet.minY, 0, 0, coordSet.maxX - coordSet.minX, coordSet.maxY - coordSet.minY);\n    return canvas.toDataURL('image/png');\n  };\n\n  // Process single image with OCR\n  const processImageOCR = (imageUrl, coordSet) => {\n    return new Promise((resolve, reject) => {\n      const img = new Image();\n      img.src = imageUrl;\n      img.onload = () => {\n        const croppedImageData = cropImage(img, coordSet);\n        Tesseract.recognize(croppedImageData, 'eng', {\n          logger: m => console.log(m)\n        }).then(({\n          data: {\n            text\n          }\n        }) => {\n          resolve({\n            text,\n            croppedImageData\n          });\n        }).catch(reject);\n      };\n    });\n  };\n\n  // Process image and run OCR\n  const handleRunOCR = () => {\n    if (!images[currentImageIndex]) {\n      alert('Please upload an image first');\n      return;\n    }\n    setIsLoading(true);\n    const currentCoordSet = images[currentImageIndex].coordinateSets[currentCoordinateIndex];\n    processImageOCR(images[currentImageIndex].url, currentCoordSet).then(({\n      text,\n      croppedImageData\n    }) => {\n      setText(text);\n      setImages(prev => prev.map((img, index) => index === currentImageIndex ? {\n        ...img,\n        text: img.text + (img.text ? '\\n\\n' : '') + `Region ${currentCoordinateIndex + 1}:\\n${text}`,\n        coordinateSets: img.coordinateSets.map((coord, i) => i === currentCoordinateIndex ? {\n          ...coord,\n          croppedImageData\n        } : coord)\n      } : img));\n      setIsLoading(false);\n    }).catch(error => {\n      console.error(error);\n      setIsLoading(false);\n    });\n  };\n\n  // Process all images with OCR\n  const handleRunOCRAll = async () => {\n    if (images.length === 0) {\n      alert('Please upload images first');\n      return;\n    }\n    setIsLoading(true);\n    setBatchProgress({\n      current: 0,\n      total: images.length\n    });\n    try {\n      const updatedImages = await Promise.all(images.map(async (img, index) => {\n        let combinedText = '';\n        const updatedCoordinateSets = await Promise.all(img.coordinateSets.map(async (coordSet, coordIndex) => {\n          const {\n            text,\n            croppedImageData\n          } = await processImageOCR(img.url, coordSet);\n          combinedText += (combinedText ? '\\n\\n' : '') + `Region ${coordIndex + 1}:\\n${text}`;\n          return {\n            ...coordSet,\n            croppedImageData\n          };\n        }));\n        setBatchProgress(prev => ({\n          ...prev,\n          current: index + 1\n        }));\n        return {\n          ...img,\n          text: combinedText,\n          coordinateSets: updatedCoordinateSets\n        };\n      }));\n      setImages(updatedImages);\n      setText(updatedImages[currentImageIndex].text);\n      setIsLoading(false);\n      setBatchProgress({\n        current: 0,\n        total: 0\n      });\n    } catch (error) {\n      console.error(error);\n      setIsLoading(false);\n      setBatchProgress({\n        current: 0,\n        total: 0\n      });\n    }\n  };\n\n  // Handle coordinate changes for current image\n  const handleCurrentImageCoordinatesChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    const newCoordinates = {\n      ...coordinates,\n      [name]: parseInt(value) || 0\n    };\n    setCoordinates(newCoordinates);\n    // Update coordinates in the images array\n    setImages(prev => prev.map((img, index) => index === currentImageIndex ? {\n      ...img,\n      coordinateSets: img.coordinateSets.map((coord, i) => i === currentCoordinateIndex ? newCoordinates : coord)\n    } : img));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"OCR Image to Text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        multiple: true,\n        onChange: handleImageChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }, this), images.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-selection\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Select Image:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-thumbnails\",\n        children: images.map((img, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `image-thumbnail ${index === currentImageIndex ? 'selected' : ''}`,\n          onClick: () => handleImageSelect(index),\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: img.url,\n            alt: `Thumbnail ${index + 1}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Image \", index + 1]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 9\n    }, this), images.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"coordinate-sets\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Coordinate Sets:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"coordinate-sets-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleAddCoordinateSet,\n          children: \"Add New Region\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleRemoveCoordinateSet,\n          disabled: images[currentImageIndex].coordinateSets.length <= 1,\n          children: \"Remove Current Region\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"coordinate-sets-list\",\n        children: images[currentImageIndex].coordinateSets.map((_, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `coordinate-set-button ${index === currentCoordinateIndex ? 'selected' : ''}`,\n          onClick: () => handleCoordinateSetSelect(index),\n          children: [\"Region \", index + 1]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 9\n    }, this), images.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"coordinates-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Enter Coordinates for Region \", currentCoordinateIndex + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"coordinate-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Min X:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            name: \"minX\",\n            value: coordinates.minX,\n            onChange: handleCurrentImageCoordinatesChange,\n            placeholder: \"Min X\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Max X:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            name: \"maxX\",\n            value: coordinates.maxX,\n            onChange: handleCurrentImageCoordinatesChange,\n            placeholder: \"Max X\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Min Y:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            name: \"minY\",\n            value: coordinates.minY,\n            onChange: handleCurrentImageCoordinatesChange,\n            placeholder: \"Min Y\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Max Y:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            name: \"maxY\",\n            value: coordinates.maxY,\n            onChange: handleCurrentImageCoordinatesChange,\n            placeholder: \"Max Y\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 9\n    }, this), images.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"run-ocr\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRunOCR,\n        disabled: isLoading,\n        children: isLoading ? 'Processing...' : 'Run OCR on Current Region'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRunOCRAll,\n        disabled: isLoading,\n        className: \"run-all-button\",\n        children: isLoading ? `Processing ${batchProgress.current}/${batchProgress.total}...` : 'Run OCR on All Images'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 9\n    }, this), images.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-preview-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-preview\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Original Image:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: canvasRef,\n          style: {\n            maxWidth: '400px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image-dimensions\",\n          children: [\"Size: \", imageDimensions.width, \" x \", imageDimensions.height, \" pixels\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 11\n      }, this), ((_images$currentImageI = images[currentImageIndex]) === null || _images$currentImageI === void 0 ? void 0 : (_images$currentImageI2 = _images$currentImageI.coordinateSets[currentCoordinateIndex]) === null || _images$currentImageI2 === void 0 ? void 0 : _images$currentImageI2.croppedImageData) && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-preview\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Cropped Image (Region \", currentCoordinateIndex + 1, \"):\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: images[currentImageIndex].coordinateSets[currentCoordinateIndex].croppedImageData,\n          alt: \"Cropped\",\n          style: {\n            maxWidth: '400px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 13\n      }, this), ((_images$currentImageI3 = images[currentImageIndex]) === null || _images$currentImageI3 === void 0 ? void 0 : _images$currentImageI3.text) && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Extracted Text:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: images[currentImageIndex].text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 9\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Processing image...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 262,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"d666ErH052+sugHP/QiCoBFZpks=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Tesseract","jsxDEV","_jsxDEV","App","_s","_images$currentImageI","_images$currentImageI2","_images$currentImageI3","images","setImages","currentImageIndex","setCurrentImageIndex","currentCoordinateIndex","setCurrentCoordinateIndex","text","setText","isLoading","setIsLoading","batchProgress","setBatchProgress","current","total","imageDimensions","setImageDimensions","width","height","coordinates","setCoordinates","minX","maxX","minY","maxY","canvasRef","drawRectangle","img","canvas","ctx","getContext","drawImage","currentImage","coordinateSets","forEach","coordSet","index","strokeStyle","lineWidth","strokeRect","Image","src","url","onload","handleCoordinateChange","e","name","value","target","prev","parseInt","handleImageChange","files","newImages","Array","from","map","file","URL","createObjectURL","length","handleImageSelect","handleAddCoordinateSet","newCoordinateSet","handleRemoveCoordinateSet","filter","_","i","Math","max","handleCoordinateSetSelect","cropImage","imageElement","document","createElement","toDataURL","processImageOCR","imageUrl","Promise","resolve","reject","croppedImageData","recognize","logger","m","console","log","then","data","catch","handleRunOCR","alert","currentCoordSet","coord","error","handleRunOCRAll","updatedImages","all","combinedText","updatedCoordinateSets","coordIndex","handleCurrentImageCoordinatesChange","newCoordinates","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","multiple","onChange","onClick","alt","disabled","placeholder","ref","style","maxWidth","_c","$RefreshReg$"],"sources":["/Users/yoonchulroh/Projects/ocr-app/src/App.js"],"sourcesContent":["// src/App.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport Tesseract from 'tesseract.js';\nimport './App.css';\n\nfunction App() {\n  const [images, setImages] = useState([]);\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\n  const [currentCoordinateIndex, setCurrentCoordinateIndex] = useState(0);\n  const [text, setText] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [batchProgress, setBatchProgress] = useState({ current: 0, total: 0 });\n  const [imageDimensions, setImageDimensions] = useState({ width: 0, height: 0 });\n  const [coordinates, setCoordinates] = useState({\n    minX: 0,\n    maxX: 0,\n    minY: 0,\n    maxY: 0\n  });\n  const canvasRef = useRef(null);\n\n  // Draw rectangle on image\n  const drawRectangle = (img) => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    \n    // Set canvas size to match image\n    canvas.width = img.width;\n    canvas.height = img.height;\n    \n    // Draw the image\n    ctx.drawImage(img, 0, 0);\n    \n    // Draw all rectangles for current image\n    const currentImage = images[currentImageIndex];\n    if (currentImage && currentImage.coordinateSets) {\n      currentImage.coordinateSets.forEach((coordSet, index) => {\n        ctx.strokeStyle = index === currentCoordinateIndex ? 'red' : 'blue';\n        ctx.lineWidth = index === currentCoordinateIndex ? 2 : 1;\n        ctx.strokeRect(\n          coordSet.minX,\n          coordSet.minY,\n          coordSet.maxX - coordSet.minX,\n          coordSet.maxY - coordSet.minY\n        );\n      });\n    }\n  };\n\n  // Update rectangle when coordinates change\n  useEffect(() => {\n    if (images[currentImageIndex]) {\n      const img = new Image();\n      img.src = images[currentImageIndex].url;\n      img.onload = () => {\n        drawRectangle(img);\n        setImageDimensions({ width: img.width, height: img.height });\n      };\n    }\n  }, [coordinates, currentImageIndex, currentCoordinateIndex, images]);\n\n  // Handle coordinate changes\n  const handleCoordinateChange = (e) => {\n    const { name, value } = e.target;\n    setCoordinates(prev => ({\n      ...prev,\n      [name]: parseInt(value) || 0\n    }));\n  };\n\n  // Handle image upload\n  const handleImageChange = (e) => {\n    if (e.target.files) {\n      const newImages = Array.from(e.target.files).map(file => ({\n        url: URL.createObjectURL(file),\n        coordinateSets: [{ minX: 0, maxX: 0, minY: 0, maxY: 0 }],\n        text: ''\n      }));\n      setImages(prev => [...prev, ...newImages]);\n      setCurrentImageIndex(prev => prev + newImages.length - 1);\n      setCurrentCoordinateIndex(0);\n    }\n  };\n\n  // Handle image selection\n  const handleImageSelect = (index) => {\n    setCurrentImageIndex(index);\n    setCurrentCoordinateIndex(0);\n    setCoordinates(images[index].coordinateSets[0]);\n    setText(images[index].text);\n  };\n\n  // Add new coordinate set\n  const handleAddCoordinateSet = () => {\n    const newCoordinateSet = { minX: 0, maxX: 0, minY: 0, maxY: 0 };\n    setImages(prev => prev.map((img, index) => \n      index === currentImageIndex \n        ? { ...img, coordinateSets: [...img.coordinateSets, newCoordinateSet] }\n        : img\n    ));\n    setCurrentCoordinateIndex(prev => prev + 1);\n    setCoordinates(newCoordinateSet);\n  };\n\n  // Remove current coordinate set\n  const handleRemoveCoordinateSet = () => {\n    if (images[currentImageIndex].coordinateSets.length > 1) {\n      setImages(prev => prev.map((img, index) => \n        index === currentImageIndex \n          ? { \n              ...img, \n              coordinateSets: img.coordinateSets.filter((_, i) => i !== currentCoordinateIndex)\n            }\n          : img\n      ));\n      setCurrentCoordinateIndex(prev => Math.max(0, prev - 1));\n      setCoordinates(images[currentImageIndex].coordinateSets[Math.max(0, currentCoordinateIndex - 1)]);\n    }\n  };\n\n  // Handle coordinate set selection\n  const handleCoordinateSetSelect = (index) => {\n    setCurrentCoordinateIndex(index);\n    setCoordinates(images[currentImageIndex].coordinateSets[index]);\n  };\n\n  // Crop image using coordinates\n  const cropImage = (imageElement, coordSet) => {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    \n    // Set canvas size to the specified dimensions\n    canvas.width = coordSet.maxX - coordSet.minX;\n    canvas.height = coordSet.maxY - coordSet.minY;\n    \n    // Draw the cropped region\n    ctx.drawImage(\n      imageElement,\n      coordSet.minX, coordSet.minY,\n      coordSet.maxX - coordSet.minX, coordSet.maxY - coordSet.minY,\n      0, 0,\n      coordSet.maxX - coordSet.minX, coordSet.maxY - coordSet.minY\n    );\n    \n    return canvas.toDataURL('image/png');\n  };\n\n  // Process single image with OCR\n  const processImageOCR = (imageUrl, coordSet) => {\n    return new Promise((resolve, reject) => {\n      const img = new Image();\n      img.src = imageUrl;\n      \n      img.onload = () => {\n        const croppedImageData = cropImage(img, coordSet);\n        \n        Tesseract.recognize(\n          croppedImageData,\n          'eng',\n          {\n            logger: (m) => console.log(m)\n          }\n        )\n          .then(({ data: { text } }) => {\n            resolve({ text, croppedImageData });\n          })\n          .catch(reject);\n      };\n    });\n  };\n\n  // Process image and run OCR\n  const handleRunOCR = () => {\n    if (!images[currentImageIndex]) {\n      alert('Please upload an image first');\n      return;\n    }\n\n    setIsLoading(true);\n    const currentCoordSet = images[currentImageIndex].coordinateSets[currentCoordinateIndex];\n    processImageOCR(images[currentImageIndex].url, currentCoordSet)\n      .then(({ text, croppedImageData }) => {\n        setText(text);\n        setImages(prev => prev.map((img, index) => \n          index === currentImageIndex \n            ? { \n                ...img, \n                text: img.text + (img.text ? '\\n\\n' : '') + `Region ${currentCoordinateIndex + 1}:\\n${text}`,\n                coordinateSets: img.coordinateSets.map((coord, i) => \n                  i === currentCoordinateIndex ? { ...coord, croppedImageData } : coord\n                )\n              }\n            : img\n        ));\n        setIsLoading(false);\n      })\n      .catch(error => {\n        console.error(error);\n        setIsLoading(false);\n      });\n  };\n\n  // Process all images with OCR\n  const handleRunOCRAll = async () => {\n    if (images.length === 0) {\n      alert('Please upload images first');\n      return;\n    }\n\n    setIsLoading(true);\n    setBatchProgress({ current: 0, total: images.length });\n\n    try {\n      const updatedImages = await Promise.all(\n        images.map(async (img, index) => {\n          let combinedText = '';\n          const updatedCoordinateSets = await Promise.all(\n            img.coordinateSets.map(async (coordSet, coordIndex) => {\n              const { text, croppedImageData } = await processImageOCR(img.url, coordSet);\n              combinedText += (combinedText ? '\\n\\n' : '') + `Region ${coordIndex + 1}:\\n${text}`;\n              return { ...coordSet, croppedImageData };\n            })\n          );\n          setBatchProgress(prev => ({ ...prev, current: index + 1 }));\n          return { ...img, text: combinedText, coordinateSets: updatedCoordinateSets };\n        })\n      );\n\n      setImages(updatedImages);\n      setText(updatedImages[currentImageIndex].text);\n      setIsLoading(false);\n      setBatchProgress({ current: 0, total: 0 });\n    } catch (error) {\n      console.error(error);\n      setIsLoading(false);\n      setBatchProgress({ current: 0, total: 0 });\n    }\n  };\n\n  // Handle coordinate changes for current image\n  const handleCurrentImageCoordinatesChange = (e) => {\n    const { name, value } = e.target;\n    const newCoordinates = {\n      ...coordinates,\n      [name]: parseInt(value) || 0\n    };\n    setCoordinates(newCoordinates);\n    // Update coordinates in the images array\n    setImages(prev => prev.map((img, index) => \n      index === currentImageIndex \n        ? {\n            ...img,\n            coordinateSets: img.coordinateSets.map((coord, i) =>\n              i === currentCoordinateIndex ? newCoordinates : coord\n            )\n          }\n        : img\n    ));\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>OCR Image to Text</h1>\n      \n      {/* Image Upload */}\n      <div>\n        <input\n          type=\"file\"\n          accept=\"image/*\"\n          multiple\n          onChange={handleImageChange}\n        />\n      </div>\n\n      {/* Image Selection */}\n      {images.length > 0 && (\n        <div className=\"image-selection\">\n          <h3>Select Image:</h3>\n          <div className=\"image-thumbnails\">\n            {images.map((img, index) => (\n              <div \n                key={index}\n                className={`image-thumbnail ${index === currentImageIndex ? 'selected' : ''}`}\n                onClick={() => handleImageSelect(index)}\n              >\n                <img src={img.url} alt={`Thumbnail ${index + 1}`} />\n                <span>Image {index + 1}</span>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Coordinate Sets Management */}\n      {images.length > 0 && (\n        <div className=\"coordinate-sets\">\n          <h3>Coordinate Sets:</h3>\n          <div className=\"coordinate-sets-buttons\">\n            <button onClick={handleAddCoordinateSet}>Add New Region</button>\n            <button onClick={handleRemoveCoordinateSet} disabled={images[currentImageIndex].coordinateSets.length <= 1}>\n              Remove Current Region\n            </button>\n          </div>\n          <div className=\"coordinate-sets-list\">\n            {images[currentImageIndex].coordinateSets.map((_, index) => (\n              <button\n                key={index}\n                className={`coordinate-set-button ${index === currentCoordinateIndex ? 'selected' : ''}`}\n                onClick={() => handleCoordinateSetSelect(index)}\n              >\n                Region {index + 1}\n              </button>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Coordinate Inputs */}\n      {images.length > 0 && (\n        <div className=\"coordinates-input\">\n          <h3>Enter Coordinates for Region {currentCoordinateIndex + 1}</h3>\n          <div className=\"coordinate-group\">\n            <div>\n              <label>Min X:</label>\n              <input\n                type=\"number\"\n                name=\"minX\"\n                value={coordinates.minX}\n                onChange={handleCurrentImageCoordinatesChange}\n                placeholder=\"Min X\"\n              />\n            </div>\n            <div>\n              <label>Max X:</label>\n              <input\n                type=\"number\"\n                name=\"maxX\"\n                value={coordinates.maxX}\n                onChange={handleCurrentImageCoordinatesChange}\n                placeholder=\"Max X\"\n              />\n            </div>\n            <div>\n              <label>Min Y:</label>\n              <input\n                type=\"number\"\n                name=\"minY\"\n                value={coordinates.minY}\n                onChange={handleCurrentImageCoordinatesChange}\n                placeholder=\"Min Y\"\n              />\n            </div>\n            <div>\n              <label>Max Y:</label>\n              <input\n                type=\"number\"\n                name=\"maxY\"\n                value={coordinates.maxY}\n                onChange={handleCurrentImageCoordinatesChange}\n                placeholder=\"Max Y\"\n              />\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* OCR Buttons */}\n      {images.length > 0 && (\n        <div className=\"run-ocr\">\n          <button onClick={handleRunOCR} disabled={isLoading}>\n            {isLoading ? 'Processing...' : 'Run OCR on Current Region'}\n          </button>\n          <button onClick={handleRunOCRAll} disabled={isLoading} className=\"run-all-button\">\n            {isLoading ? `Processing ${batchProgress.current}/${batchProgress.total}...` : 'Run OCR on All Images'}\n          </button>\n        </div>\n      )}\n\n      {/* Image Previews Container */}\n      {images.length > 0 && (\n        <div className=\"image-preview-container\">\n          {/* Original Image with Rectangle */}\n          <div className=\"image-preview\">\n            <h2>Original Image:</h2>\n            <canvas ref={canvasRef} style={{ maxWidth: '400px' }} />\n            <div className=\"image-dimensions\">\n              Size: {imageDimensions.width} x {imageDimensions.height} pixels\n            </div>\n          </div>\n\n          {/* Cropped Image Preview */}\n          {images[currentImageIndex]?.coordinateSets[currentCoordinateIndex]?.croppedImageData && (\n            <div className=\"image-preview\">\n              <h2>Cropped Image (Region {currentCoordinateIndex + 1}):</h2>\n              <img \n                src={images[currentImageIndex].coordinateSets[currentCoordinateIndex].croppedImageData} \n                alt=\"Cropped\" \n                style={{ maxWidth: '400px' }} \n              />\n            </div>\n          )}\n\n          {/* Extracted Text */}\n          {images[currentImageIndex]?.text && (\n            <div className=\"result\">\n              <h2>Extracted Text:</h2>\n              <pre>{images[currentImageIndex].text}</pre>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Loading Indicator */}\n      {isLoading && <p>Processing image...</p>}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}