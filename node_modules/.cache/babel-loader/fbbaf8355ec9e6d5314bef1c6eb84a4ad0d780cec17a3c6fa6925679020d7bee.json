{"ast":null,"code":"var _jsxFileName = \"/Users/yoonchulroh/Projects/ocr-app/src/App.js\",\n  _s = $RefreshSig$();\n// src/App.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport Tesseract from 'tesseract.js';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  var _images$currentImageI5, _images$currentImageI6, _images$currentImageI7, _images$currentImageI8;\n  const [images, setImages] = useState([]);\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\n  const [text, setText] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [batchProgress, setBatchProgress] = useState({\n    current: 0,\n    total: 0\n  });\n  const [imageDimensions, setImageDimensions] = useState({\n    width: 0,\n    height: 0\n  });\n  const [coordinates, setCoordinates] = useState({\n    minX: 0,\n    maxX: 0,\n    minY: 0,\n    maxY: 0\n  });\n  const [currentRegionIndex, setCurrentRegionIndex] = useState(0);\n  // Shared regions across all images\n  const [regions, setRegions] = useState([{\n    name: 'Region 1',\n    coordinates: {\n      minX: 0,\n      maxX: 0,\n      minY: 0,\n      maxY: 0\n    },\n    text: '',\n    croppedImageData: null\n  }]);\n  const [editingRegionName, setEditingRegionName] = useState(null);\n  const [newRegionName, setNewRegionName] = useState('');\n  const canvasRef = useRef(null);\n\n  // Draw rectangles on image\n  const drawRectangles = img => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Set canvas size to match image\n    canvas.width = img.width;\n    canvas.height = img.height;\n\n    // Draw the image\n    ctx.drawImage(img, 0, 0);\n\n    // Draw all regions with different colors\n    if (regions.length > 0) {\n      regions.forEach((region, index) => {\n        // Different color for current region\n        ctx.strokeStyle = index === currentRegionIndex ? 'red' : 'blue';\n        ctx.lineWidth = 2;\n        ctx.strokeRect(region.coordinates.minX, region.coordinates.minY, region.coordinates.maxX - region.coordinates.minX, region.coordinates.maxY - region.coordinates.minY);\n\n        // Add region name label\n        ctx.fillStyle = index === currentRegionIndex ? 'red' : 'blue';\n        ctx.font = '14px Arial';\n        ctx.fillText(region.name, region.coordinates.minX, region.coordinates.minY - 5);\n      });\n    }\n  };\n\n  // Update rectangles when coordinates or regions change\n  useEffect(() => {\n    if (images[currentImageIndex]) {\n      const img = new Image();\n      img.src = images[currentImageIndex].url;\n      img.onload = () => {\n        drawRectangles(img);\n        setImageDimensions({\n          width: img.width,\n          height: img.height\n        });\n      };\n    }\n  }, [coordinates, currentImageIndex, images, currentRegionIndex, regions]);\n\n  // Handle image upload\n  const handleImageChange = e => {\n    if (e.target.files) {\n      const newImages = Array.from(e.target.files).map(file => ({\n        url: URL.createObjectURL(file),\n        filename: file.name,\n        results: Array(regions.length).fill(null).map(() => ({\n          text: '',\n          croppedImageData: null,\n          error: false\n        }))\n      }));\n      setImages(prev => [...prev, ...newImages]);\n      setCurrentImageIndex(prev => prev + newImages.length - 1);\n    }\n  };\n\n  // Handle image selection\n  const handleImageSelect = index => {\n    var _images$index;\n    setCurrentImageIndex(index);\n    setCurrentRegionIndex(0);\n\n    // Update text if available for the current region\n    if ((_images$index = images[index]) !== null && _images$index !== void 0 && _images$index.results && images[index].results[0]) {\n      setText(images[index].results[0].text || '');\n    } else {\n      setText('');\n    }\n  };\n\n  // Add a new region\n  const addRegion = () => {\n    // Create new region object\n    const newRegion = {\n      name: `Region ${regions.length + 1}`,\n      coordinates: {\n        minX: 0,\n        maxX: 0,\n        minY: 0,\n        maxY: 0\n      },\n      text: '',\n      croppedImageData: null\n    };\n\n    // Add the new region to shared regions\n    setRegions(prev => [...prev, newRegion]);\n\n    // Update the images to include results for the new region\n    setImages(prev => {\n      return prev.map(img => ({\n        ...img,\n        results: [...(img.results || []), {\n          text: '',\n          croppedImageData: null\n        }]\n      }));\n    });\n\n    // Set the current region to the new one\n    setCurrentRegionIndex(regions.length);\n    setCoordinates({\n      minX: 0,\n      maxX: 0,\n      minY: 0,\n      maxY: 0\n    });\n    setText('');\n  };\n\n  // Delete current region\n  const deleteRegion = () => {\n    var _images$currentImageI, _images$currentImageI2;\n    // Don't allow deleting if only one region\n    if (regions.length <= 1) {\n      alert(\"Can't delete the only region. At least one region is required.\");\n      return;\n    }\n    const regionIndexToDelete = currentRegionIndex;\n\n    // Remove the region from shared regions\n    setRegions(prev => {\n      const updatedRegions = [...prev];\n      updatedRegions.splice(regionIndexToDelete, 1);\n      return updatedRegions;\n    });\n\n    // Update images to remove results for the deleted region\n    setImages(prev => {\n      return prev.map(img => {\n        const updatedResults = [...(img.results || [])];\n        updatedResults.splice(regionIndexToDelete, 1);\n        return {\n          ...img,\n          results: updatedResults\n        };\n      });\n    });\n\n    // Set the current region index\n    setCurrentRegionIndex(prev => prev >= regions.length - 1 ? regions.length - 2 : prev);\n\n    // Update coordinates to the new current region\n    if (regions.length > 1) {\n      const newIndex = currentRegionIndex >= regions.length - 1 ? regions.length - 2 : currentRegionIndex;\n      setCoordinates(regions[newIndex].coordinates);\n    }\n\n    // Update text\n    const newIndex = currentRegionIndex >= regions.length - 1 ? regions.length - 2 : currentRegionIndex;\n    if ((_images$currentImageI = images[currentImageIndex]) !== null && _images$currentImageI !== void 0 && (_images$currentImageI2 = _images$currentImageI.results) !== null && _images$currentImageI2 !== void 0 && _images$currentImageI2[newIndex]) {\n      setText(images[currentImageIndex].results[newIndex].text || '');\n    } else {\n      setText('');\n    }\n  };\n\n  // Handle region selection\n  const handleRegionSelect = index => {\n    var _images$currentImageI3, _images$currentImageI4;\n    setCurrentRegionIndex(index);\n    setCoordinates(regions[index].coordinates);\n\n    // Update text based on the selected region for the current image\n    if ((_images$currentImageI3 = images[currentImageIndex]) !== null && _images$currentImageI3 !== void 0 && (_images$currentImageI4 = _images$currentImageI3.results) !== null && _images$currentImageI4 !== void 0 && _images$currentImageI4[index]) {\n      setText(images[currentImageIndex].results[index].text || '');\n    } else {\n      setText('');\n    }\n  };\n\n  // Crop image using coordinates\n  const cropImage = (imageElement, coords) => {\n    try {\n      // Validate coordinates\n      if (coords.minX >= coords.maxX || coords.minY >= coords.maxY) {\n        console.warn(\"Invalid coordinates: min values must be less than max values\");\n        return null;\n      }\n\n      // Make sure coordinates are within image bounds\n      const width = imageElement.width;\n      const height = imageElement.height;\n      if (coords.minX < 0 || coords.minY < 0 || coords.maxX > width || coords.maxY > height) {\n        console.warn(\"Invalid coordinates: coordinates out of image bounds\");\n        return null;\n      }\n\n      // Calculate dimensions\n      const cropWidth = coords.maxX - coords.minX;\n      const cropHeight = coords.maxY - coords.minY;\n\n      // Check that we have a valid area to crop\n      if (cropWidth <= 0 || cropHeight <= 0) {\n        console.warn(\"Invalid coordinates: resulting crop has no area\");\n        return null;\n      }\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n\n      // Set canvas size to the specified dimensions\n      canvas.width = cropWidth;\n      canvas.height = cropHeight;\n\n      // Draw the cropped region\n      ctx.drawImage(imageElement, coords.minX, coords.minY, cropWidth, cropHeight, 0, 0, cropWidth, cropHeight);\n      return canvas.toDataURL('image/png');\n    } catch (error) {\n      console.error(\"Error cropping image:\", error);\n      return null;\n    }\n  };\n\n  // Process single region with OCR\n  const processRegionOCR = (imageUrl, regionCoords) => {\n    return new Promise((resolve, reject) => {\n      try {\n        const img = new Image();\n        img.onerror = () => {\n          console.error(\"Failed to load image\");\n          resolve({\n            text: \"Error: Failed to load image\",\n            croppedImageData: null,\n            error: true\n          });\n        };\n        img.onload = () => {\n          const croppedImageData = cropImage(img, regionCoords);\n\n          // Skip OCR if crop failed\n          if (!croppedImageData) {\n            console.warn(\"Skipping OCR due to invalid crop\");\n            resolve({\n              text: \"Error: Invalid coordinates for this region\",\n              croppedImageData: null,\n              error: true\n            });\n            return;\n          }\n          Tesseract.recognize(croppedImageData, 'eng', {\n            logger: m => console.log(m)\n          }).then(({\n            data: {\n              text\n            }\n          }) => {\n            resolve({\n              text,\n              croppedImageData,\n              error: false\n            });\n          }).catch(error => {\n            console.error(\"Tesseract error:\", error);\n            resolve({\n              text: \"Error: OCR processing failed\",\n              croppedImageData,\n              error: true\n            });\n          });\n        };\n        img.src = imageUrl;\n      } catch (error) {\n        console.error(\"Unexpected error:\", error);\n        resolve({\n          text: \"Error: Unexpected error occurred\",\n          croppedImageData: null,\n          error: true\n        });\n      }\n    });\n  };\n\n  // Process image and run OCR for current region\n  const handleRunOCR = () => {\n    if (!images[currentImageIndex]) {\n      alert('Please upload an image first');\n      return;\n    }\n    setIsLoading(true);\n    processRegionOCR(images[currentImageIndex].url, regions[currentRegionIndex].coordinates).then(({\n      text,\n      croppedImageData,\n      error\n    }) => {\n      setText(text);\n\n      // Update regions with the coordinates\n      setRegions(prev => {\n        const newRegions = [...prev];\n        newRegions[currentRegionIndex] = {\n          ...newRegions[currentRegionIndex],\n          coordinates: regions[currentRegionIndex].coordinates,\n          hasError: error\n        };\n        return newRegions;\n      });\n\n      // Update the current image's results for the current region\n      setImages(prev => {\n        const newImages = [...prev];\n        if (!newImages[currentImageIndex].results) {\n          newImages[currentImageIndex].results = Array(regions.length).fill(null).map(() => ({\n            text: '',\n            croppedImageData: null,\n            error: false\n          }));\n        }\n        newImages[currentImageIndex].results[currentRegionIndex] = {\n          text,\n          croppedImageData,\n          error\n        };\n        return newImages;\n      });\n      setIsLoading(false);\n    }).catch(error => {\n      console.error(error);\n      setIsLoading(false);\n      alert(\"An unexpected error occurred. Please try again.\");\n    });\n  };\n\n  // Process all regions in current image\n  const handleRunOCRAllRegions = async () => {\n    if (!images[currentImageIndex]) {\n      alert('Please upload an image first');\n      return;\n    }\n    if (regions.length === 0) {\n      alert('No regions defined');\n      return;\n    }\n    setIsLoading(true);\n    setBatchProgress({\n      current: 0,\n      total: regions.length\n    });\n    try {\n      const results = await Promise.all(regions.map(async (region, idx) => {\n        try {\n          const result = await processRegionOCR(images[currentImageIndex].url, region.coordinates);\n          setBatchProgress(prev => ({\n            ...prev,\n            current: idx + 1\n          }));\n          return result;\n        } catch (error) {\n          console.error(`Error processing region ${idx + 1}:`, error);\n          setBatchProgress(prev => ({\n            ...prev,\n            current: idx + 1\n          }));\n          return {\n            text: `Error processing region ${idx + 1}`,\n            croppedImageData: null,\n            error: true\n          };\n        }\n      }));\n\n      // Update the current image's results\n      setImages(prev => {\n        const newImages = [...prev];\n        newImages[currentImageIndex].results = results;\n        return newImages;\n      });\n\n      // Update text for current region\n      setText(results[currentRegionIndex].text);\n      setIsLoading(false);\n      setBatchProgress({\n        current: 0,\n        total: 0\n      });\n    } catch (error) {\n      console.error(\"Failed to process regions:\", error);\n      setIsLoading(false);\n      setBatchProgress({\n        current: 0,\n        total: 0\n      });\n      alert(\"An error occurred while processing regions. Some regions may not have been processed correctly.\");\n    }\n  };\n\n  // Process all images with OCR (all regions)\n  const handleRunOCRAll = async () => {\n    if (images.length === 0) {\n      alert('Please upload images first');\n      return;\n    }\n    setIsLoading(true);\n    const totalOperations = images.length * regions.length;\n    setBatchProgress({\n      current: 0,\n      total: totalOperations\n    });\n    let processedCount = 0;\n    try {\n      var _updatedImages$curren, _updatedImages$curren2;\n      const updatedImages = await Promise.all(images.map(async img => {\n        try {\n          const results = await Promise.all(regions.map(async region => {\n            try {\n              const result = await processRegionOCR(img.url, region.coordinates);\n              processedCount++;\n              setBatchProgress({\n                current: processedCount,\n                total: totalOperations\n              });\n              return result;\n            } catch (error) {\n              console.error(\"Error processing region:\", error);\n              processedCount++;\n              setBatchProgress({\n                current: processedCount,\n                total: totalOperations\n              });\n              return {\n                text: \"Error processing this region\",\n                croppedImageData: null,\n                error: true\n              };\n            }\n          }));\n          return {\n            ...img,\n            results\n          };\n        } catch (error) {\n          console.error(\"Error processing image:\", error);\n          return {\n            ...img,\n            results: Array(regions.length).fill(null).map(() => ({\n              text: \"Error processing this image\",\n              croppedImageData: null,\n              error: true\n            }))\n          };\n        }\n      }));\n      setImages(updatedImages);\n\n      // Update text for current image and region\n      if ((_updatedImages$curren = updatedImages[currentImageIndex]) !== null && _updatedImages$curren !== void 0 && (_updatedImages$curren2 = _updatedImages$curren.results) !== null && _updatedImages$curren2 !== void 0 && _updatedImages$curren2[currentRegionIndex]) {\n        setText(updatedImages[currentImageIndex].results[currentRegionIndex].text || '');\n      }\n      setIsLoading(false);\n      setBatchProgress({\n        current: 0,\n        total: 0\n      });\n    } catch (error) {\n      console.error(\"Failed to process all images:\", error);\n      setIsLoading(false);\n      setBatchProgress({\n        current: 0,\n        total: 0\n      });\n      alert(\"An error occurred while processing images. Some images may not have been processed correctly.\");\n    }\n  };\n\n  // Handle coordinate changes for current region\n  const handleCurrentRegionCoordinatesChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    const newCoordinates = {\n      ...coordinates,\n      [name]: parseInt(value) || 0\n    };\n    setCoordinates(newCoordinates);\n\n    // Update coordinates in the regions array\n    setRegions(prev => {\n      const newRegions = [...prev];\n      newRegions[currentRegionIndex].coordinates = newCoordinates;\n      return newRegions;\n    });\n  };\n\n  // Handle region name edit\n  const startEditingRegionName = index => {\n    setEditingRegionName(index);\n    setNewRegionName(regions[index].name);\n  };\n\n  // Save edited region name\n  const saveRegionName = () => {\n    if (editingRegionName !== null && newRegionName.trim() !== '') {\n      setRegions(prev => {\n        const newRegions = [...prev];\n        newRegions[editingRegionName].name = newRegionName.trim();\n        return newRegions;\n      });\n      setEditingRegionName(null);\n    }\n  };\n\n  // Cancel region name editing\n  const cancelRegionNameEdit = () => {\n    setEditingRegionName(null);\n  };\n\n  // Handle region name input change\n  const handleRegionNameChange = e => {\n    setNewRegionName(e.target.value);\n  };\n\n  // Export results as CSV\n  const exportToCSV = () => {\n    // Create CSV header with a column for each region\n    let header = \"Image Name\";\n    for (let i = 0; i < regions.length; i++) {\n      header += `,${regions[i].name}`;\n    }\n    let csvContent = header + \"\\n\";\n\n    // Add each image as a row with region texts as columns\n    images.forEach((img, imgIndex) => {\n      // Start with the image name\n      const imageName = img.filename || `Image ${imgIndex + 1}`;\n      let row = `\"${imageName}\"`;\n\n      // Add each region's text as a column\n      if (img.results) {\n        for (let i = 0; i < regions.length; i++) {\n          var _img$results$i;\n          // Get text for this region if available, otherwise use empty string\n          const regionText = ((_img$results$i = img.results[i]) === null || _img$results$i === void 0 ? void 0 : _img$results$i.text) || '';\n          // Clean text data by escaping quotes and removing line breaks\n          const cleanedText = regionText.replace(/\"/g, '\"\"').replace(/\\n/g, ' ');\n          // Add to row\n          row += `,\"${cleanedText}\"`;\n        }\n      } else {\n        // If no results, fill with empty columns\n        for (let i = 0; i < regions.length; i++) {\n          row += `,\"\"`;\n        }\n      }\n\n      // Add row to CSV\n      csvContent += row + \"\\n\";\n    });\n\n    // Create a blob with the CSV content\n    const blob = new Blob([csvContent], {\n      type: 'text/csv;charset=utf-8;'\n    });\n    const url = URL.createObjectURL(blob);\n\n    // Create a link element to trigger download\n    const link = document.createElement('a');\n    link.setAttribute('href', url);\n    link.setAttribute('download', 'ocr_results.csv');\n    link.style.visibility = 'hidden';\n\n    // Add to document, click to download, then remove\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"OCR Image to Text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 581,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        multiple: true,\n        onChange: handleImageChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 585,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 584,\n      columnNumber: 7\n    }, this), images.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-selection\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Select Image:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 596,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-thumbnails\",\n        children: images.map((img, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `image-thumbnail ${index === currentImageIndex ? 'selected' : ''}`,\n          onClick: () => handleImageSelect(index),\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: img.url,\n            alt: `Thumbnail ${index + 1}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 604,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: img.filename || `Image ${index + 1}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 605,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 599,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 597,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 595,\n      columnNumber: 9\n    }, this), images.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"region-coordinate-container\",\n      children: [regions.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"region-selection\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Regions (Shared Across All Images):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 618,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"region-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: addRegion,\n            className: \"control-button\",\n            children: \"Add Region\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 620,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: deleteRegion,\n            className: \"control-button\",\n            children: \"Delete Region\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 621,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 619,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"region-tabs\",\n          children: regions.map((region, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `region-tab ${index === currentRegionIndex ? 'selected' : ''}`,\n            children: editingRegionName === index ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"region-name-edit\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: newRegionName,\n                onChange: handleRegionNameChange,\n                onClick: e => e.stopPropagation(),\n                autoFocus: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 631,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"edit-buttons\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: e => {\n                    e.stopPropagation();\n                    saveRegionName();\n                  },\n                  className: \"save-button\",\n                  children: \"\\u2713\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 639,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: e => {\n                    e.stopPropagation();\n                    cancelRegionNameEdit();\n                  },\n                  className: \"cancel-button\",\n                  children: \"\\u2715\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 648,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 638,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 630,\n              columnNumber: 23\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"region-name-display\",\n              onClick: () => handleRegionSelect(index),\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: region.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 664,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"edit-name-button\",\n                onClick: e => {\n                  e.stopPropagation();\n                  startEditingRegionName(index);\n                },\n                children: \"\\u270E\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 665,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 660,\n              columnNumber: 23\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 625,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 623,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 617,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"coordinates-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Enter Coordinates for \", regions[currentRegionIndex].name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 684,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"coordinate-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Min X:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 687,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              name: \"minX\",\n              value: coordinates.minX,\n              onChange: handleCurrentRegionCoordinatesChange,\n              placeholder: \"Min X\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 688,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 686,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Max X:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 697,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              name: \"maxX\",\n              value: coordinates.maxX,\n              onChange: handleCurrentRegionCoordinatesChange,\n              placeholder: \"Max X\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 698,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 696,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Min Y:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 707,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              name: \"minY\",\n              value: coordinates.minY,\n              onChange: handleCurrentRegionCoordinatesChange,\n              placeholder: \"Min Y\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 708,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 706,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Max Y:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 717,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              name: \"maxY\",\n              value: coordinates.maxY,\n              onChange: handleCurrentRegionCoordinatesChange,\n              placeholder: \"Max Y\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 718,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 716,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 685,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 683,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 614,\n      columnNumber: 9\n    }, this), images.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"run-ocr\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRunOCR,\n        disabled: isLoading,\n        children: isLoading ? 'Processing...' : 'Run OCR on Current Region'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 734,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRunOCRAllRegions,\n        disabled: isLoading,\n        className: \"run-regions-button\",\n        children: isLoading ? 'Processing...' : 'Run OCR on All Regions'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 737,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRunOCRAll,\n        disabled: isLoading,\n        className: \"run-all-button\",\n        children: isLoading ? `Processing ${batchProgress.current}/${batchProgress.total}...` : 'Run OCR on All Images'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 740,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 733,\n      columnNumber: 9\n    }, this), images.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-preview-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-preview\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Original Image:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 751,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: canvasRef,\n          style: {\n            maxWidth: '400px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 752,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image-dimensions\",\n          children: [\"Size: \", imageDimensions.width, \" x \", imageDimensions.height, \" pixels\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 753,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 750,\n        columnNumber: 11\n      }, this), ((_images$currentImageI5 = images[currentImageIndex]) === null || _images$currentImageI5 === void 0 ? void 0 : (_images$currentImageI6 = _images$currentImageI5.results) === null || _images$currentImageI6 === void 0 ? void 0 : _images$currentImageI6[currentRegionIndex]) && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-preview\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Cropped \", regions[currentRegionIndex].name, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 761,\n          columnNumber: 15\n        }, this), images[currentImageIndex].results[currentRegionIndex].error ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Error: Unable to crop region due to invalid coordinates\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 764,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Please check that:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 765,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"Min values are less than Max values\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 767,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"Coordinates are within image boundaries\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 768,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"The region has a valid area (width and height > 0)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 769,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 766,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 763,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n          src: images[currentImageIndex].results[currentRegionIndex].croppedImageData,\n          alt: \"Cropped\",\n          style: {\n            maxWidth: '400px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 773,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 760,\n        columnNumber: 13\n      }, this), ((_images$currentImageI7 = images[currentImageIndex]) === null || _images$currentImageI7 === void 0 ? void 0 : (_images$currentImageI8 = _images$currentImageI7.results) === null || _images$currentImageI8 === void 0 ? void 0 : _images$currentImageI8[currentRegionIndex]) && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Extracted Text from \", regions[currentRegionIndex].name, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 785,\n          columnNumber: 15\n        }, this), images[currentImageIndex].results[currentRegionIndex].error ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-message\",\n          children: images[currentImageIndex].results[currentRegionIndex].text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 787,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: images[currentImageIndex].results[currentRegionIndex].text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 791,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 784,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 748,\n      columnNumber: 9\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Processing image...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 799,\n      columnNumber: 21\n    }, this), images.length > 0 && images.some(img => img.results && img.results.some(result => result === null || result === void 0 ? void 0 : result.text)) && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"export-container\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: exportToCSV,\n        className: \"export-button\",\n        children: \"Export Results as CSV\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 804,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 803,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 580,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"yUcGAdQeft2nunGMTe9IJMF2A9M=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Tesseract","jsxDEV","_jsxDEV","App","_s","_images$currentImageI5","_images$currentImageI6","_images$currentImageI7","_images$currentImageI8","images","setImages","currentImageIndex","setCurrentImageIndex","text","setText","isLoading","setIsLoading","batchProgress","setBatchProgress","current","total","imageDimensions","setImageDimensions","width","height","coordinates","setCoordinates","minX","maxX","minY","maxY","currentRegionIndex","setCurrentRegionIndex","regions","setRegions","name","croppedImageData","editingRegionName","setEditingRegionName","newRegionName","setNewRegionName","canvasRef","drawRectangles","img","canvas","ctx","getContext","drawImage","length","forEach","region","index","strokeStyle","lineWidth","strokeRect","fillStyle","font","fillText","Image","src","url","onload","handleImageChange","e","target","files","newImages","Array","from","map","file","URL","createObjectURL","filename","results","fill","error","prev","handleImageSelect","_images$index","addRegion","newRegion","deleteRegion","_images$currentImageI","_images$currentImageI2","alert","regionIndexToDelete","updatedRegions","splice","updatedResults","newIndex","handleRegionSelect","_images$currentImageI3","_images$currentImageI4","cropImage","imageElement","coords","console","warn","cropWidth","cropHeight","document","createElement","toDataURL","processRegionOCR","imageUrl","regionCoords","Promise","resolve","reject","onerror","recognize","logger","m","log","then","data","catch","handleRunOCR","newRegions","hasError","handleRunOCRAllRegions","all","idx","result","handleRunOCRAll","totalOperations","processedCount","_updatedImages$curren","_updatedImages$curren2","updatedImages","handleCurrentRegionCoordinatesChange","value","newCoordinates","parseInt","startEditingRegionName","saveRegionName","trim","cancelRegionNameEdit","handleRegionNameChange","exportToCSV","header","i","csvContent","imgIndex","imageName","row","_img$results$i","regionText","cleanedText","replace","blob","Blob","type","link","setAttribute","style","visibility","body","appendChild","click","removeChild","className","children","fileName","_jsxFileName","lineNumber","columnNumber","accept","multiple","onChange","onClick","alt","stopPropagation","autoFocus","placeholder","disabled","ref","maxWidth","some","_c","$RefreshReg$"],"sources":["/Users/yoonchulroh/Projects/ocr-app/src/App.js"],"sourcesContent":["// src/App.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport Tesseract from 'tesseract.js';\nimport './App.css';\n\nfunction App() {\n  const [images, setImages] = useState([]);\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\n  const [text, setText] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [batchProgress, setBatchProgress] = useState({ current: 0, total: 0 });\n  const [imageDimensions, setImageDimensions] = useState({ width: 0, height: 0 });\n  const [coordinates, setCoordinates] = useState({\n    minX: 0,\n    maxX: 0,\n    minY: 0,\n    maxY: 0\n  });\n  const [currentRegionIndex, setCurrentRegionIndex] = useState(0);\n  // Shared regions across all images\n  const [regions, setRegions] = useState([{\n    name: 'Region 1',\n    coordinates: { minX: 0, maxX: 0, minY: 0, maxY: 0 },\n    text: '',\n    croppedImageData: null\n  }]);\n  const [editingRegionName, setEditingRegionName] = useState(null);\n  const [newRegionName, setNewRegionName] = useState('');\n  const canvasRef = useRef(null);\n\n  // Draw rectangles on image\n  const drawRectangles = (img) => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    \n    // Set canvas size to match image\n    canvas.width = img.width;\n    canvas.height = img.height;\n    \n    // Draw the image\n    ctx.drawImage(img, 0, 0);\n    \n    // Draw all regions with different colors\n    if (regions.length > 0) {\n      regions.forEach((region, index) => {\n        // Different color for current region\n        ctx.strokeStyle = index === currentRegionIndex ? 'red' : 'blue';\n        ctx.lineWidth = 2;\n        ctx.strokeRect(\n          region.coordinates.minX,\n          region.coordinates.minY,\n          region.coordinates.maxX - region.coordinates.minX,\n          region.coordinates.maxY - region.coordinates.minY\n        );\n        \n        // Add region name label\n        ctx.fillStyle = index === currentRegionIndex ? 'red' : 'blue';\n        ctx.font = '14px Arial';\n        ctx.fillText(region.name, region.coordinates.minX, region.coordinates.minY - 5);\n      });\n    }\n  };\n\n  // Update rectangles when coordinates or regions change\n  useEffect(() => {\n    if (images[currentImageIndex]) {\n      const img = new Image();\n      img.src = images[currentImageIndex].url;\n      img.onload = () => {\n        drawRectangles(img);\n        setImageDimensions({ width: img.width, height: img.height });\n      };\n    }\n  }, [coordinates, currentImageIndex, images, currentRegionIndex, regions]);\n\n  // Handle image upload\n  const handleImageChange = (e) => {\n    if (e.target.files) {\n      const newImages = Array.from(e.target.files).map(file => ({\n        url: URL.createObjectURL(file),\n        filename: file.name,\n        results: Array(regions.length).fill(null).map(() => ({\n          text: '',\n          croppedImageData: null,\n          error: false\n        }))\n      }));\n      setImages(prev => [...prev, ...newImages]);\n      setCurrentImageIndex(prev => prev + newImages.length - 1);\n    }\n  };\n\n  // Handle image selection\n  const handleImageSelect = (index) => {\n    setCurrentImageIndex(index);\n    setCurrentRegionIndex(0);\n    \n    // Update text if available for the current region\n    if (images[index]?.results && images[index].results[0]) {\n      setText(images[index].results[0].text || '');\n    } else {\n      setText('');\n    }\n  };\n\n  // Add a new region\n  const addRegion = () => {\n    // Create new region object\n    const newRegion = {\n      name: `Region ${regions.length + 1}`,\n      coordinates: { minX: 0, maxX: 0, minY: 0, maxY: 0 },\n      text: '',\n      croppedImageData: null\n    };\n    \n    // Add the new region to shared regions\n    setRegions(prev => [...prev, newRegion]);\n    \n    // Update the images to include results for the new region\n    setImages(prev => {\n      return prev.map(img => ({\n        ...img,\n        results: [...(img.results || []), { text: '', croppedImageData: null }]\n      }));\n    });\n    \n    // Set the current region to the new one\n    setCurrentRegionIndex(regions.length);\n    setCoordinates({ minX: 0, maxX: 0, minY: 0, maxY: 0 });\n    setText('');\n  };\n\n  // Delete current region\n  const deleteRegion = () => {\n    // Don't allow deleting if only one region\n    if (regions.length <= 1) {\n      alert(\"Can't delete the only region. At least one region is required.\");\n      return;\n    }\n    \n    const regionIndexToDelete = currentRegionIndex;\n    \n    // Remove the region from shared regions\n    setRegions(prev => {\n      const updatedRegions = [...prev];\n      updatedRegions.splice(regionIndexToDelete, 1);\n      return updatedRegions;\n    });\n    \n    // Update images to remove results for the deleted region\n    setImages(prev => {\n      return prev.map(img => {\n        const updatedResults = [...(img.results || [])];\n        updatedResults.splice(regionIndexToDelete, 1);\n        return {\n          ...img,\n          results: updatedResults\n        };\n      });\n    });\n    \n    // Set the current region index\n    setCurrentRegionIndex(prev => \n      prev >= regions.length - 1 ? regions.length - 2 : prev\n    );\n    \n    // Update coordinates to the new current region\n    if (regions.length > 1) {\n      const newIndex = currentRegionIndex >= regions.length - 1 ? \n        regions.length - 2 : currentRegionIndex;\n      setCoordinates(regions[newIndex].coordinates);\n    }\n    \n    // Update text\n    const newIndex = currentRegionIndex >= regions.length - 1 ? \n      regions.length - 2 : currentRegionIndex;\n    if (images[currentImageIndex]?.results?.[newIndex]) {\n      setText(images[currentImageIndex].results[newIndex].text || '');\n    } else {\n      setText('');\n    }\n  };\n\n  // Handle region selection\n  const handleRegionSelect = (index) => {\n    setCurrentRegionIndex(index);\n    setCoordinates(regions[index].coordinates);\n    \n    // Update text based on the selected region for the current image\n    if (images[currentImageIndex]?.results?.[index]) {\n      setText(images[currentImageIndex].results[index].text || '');\n    } else {\n      setText('');\n    }\n  };\n\n  // Crop image using coordinates\n  const cropImage = (imageElement, coords) => {\n    try {\n      // Validate coordinates\n      if (coords.minX >= coords.maxX || coords.minY >= coords.maxY) {\n        console.warn(\"Invalid coordinates: min values must be less than max values\");\n        return null;\n      }\n      \n      // Make sure coordinates are within image bounds\n      const width = imageElement.width;\n      const height = imageElement.height;\n      \n      if (coords.minX < 0 || coords.minY < 0 || coords.maxX > width || coords.maxY > height) {\n        console.warn(\"Invalid coordinates: coordinates out of image bounds\");\n        return null;\n      }\n      \n      // Calculate dimensions\n      const cropWidth = coords.maxX - coords.minX;\n      const cropHeight = coords.maxY - coords.minY;\n      \n      // Check that we have a valid area to crop\n      if (cropWidth <= 0 || cropHeight <= 0) {\n        console.warn(\"Invalid coordinates: resulting crop has no area\");\n        return null;\n      }\n      \n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      \n      // Set canvas size to the specified dimensions\n      canvas.width = cropWidth;\n      canvas.height = cropHeight;\n      \n      // Draw the cropped region\n      ctx.drawImage(\n        imageElement,\n        coords.minX, coords.minY,\n        cropWidth, cropHeight,\n        0, 0,\n        cropWidth, cropHeight\n      );\n      \n      return canvas.toDataURL('image/png');\n    } catch (error) {\n      console.error(\"Error cropping image:\", error);\n      return null;\n    }\n  };\n\n  // Process single region with OCR\n  const processRegionOCR = (imageUrl, regionCoords) => {\n    return new Promise((resolve, reject) => {\n      try {\n        const img = new Image();\n        \n        img.onerror = () => {\n          console.error(\"Failed to load image\");\n          resolve({ text: \"Error: Failed to load image\", croppedImageData: null, error: true });\n        };\n        \n        img.onload = () => {\n          const croppedImageData = cropImage(img, regionCoords);\n          \n          // Skip OCR if crop failed\n          if (!croppedImageData) {\n            console.warn(\"Skipping OCR due to invalid crop\");\n            resolve({ \n              text: \"Error: Invalid coordinates for this region\", \n              croppedImageData: null, \n              error: true \n            });\n            return;\n          }\n          \n          Tesseract.recognize(\n            croppedImageData,\n            'eng',\n            {\n              logger: (m) => console.log(m)\n            }\n          )\n            .then(({ data: { text } }) => {\n              resolve({ text, croppedImageData, error: false });\n            })\n            .catch(error => {\n              console.error(\"Tesseract error:\", error);\n              resolve({ \n                text: \"Error: OCR processing failed\", \n                croppedImageData, \n                error: true \n              });\n            });\n        };\n        \n        img.src = imageUrl;\n      } catch (error) {\n        console.error(\"Unexpected error:\", error);\n        resolve({ \n          text: \"Error: Unexpected error occurred\", \n          croppedImageData: null, \n          error: true \n        });\n      }\n    });\n  };\n\n  // Process image and run OCR for current region\n  const handleRunOCR = () => {\n    if (!images[currentImageIndex]) {\n      alert('Please upload an image first');\n      return;\n    }\n\n    setIsLoading(true);\n    processRegionOCR(images[currentImageIndex].url, regions[currentRegionIndex].coordinates)\n      .then(({ text, croppedImageData, error }) => {\n        setText(text);\n        \n        // Update regions with the coordinates\n        setRegions(prev => {\n          const newRegions = [...prev];\n          newRegions[currentRegionIndex] = {\n            ...newRegions[currentRegionIndex],\n            coordinates: regions[currentRegionIndex].coordinates,\n            hasError: error\n          };\n          return newRegions;\n        });\n        \n        // Update the current image's results for the current region\n        setImages(prev => {\n          const newImages = [...prev];\n          if (!newImages[currentImageIndex].results) {\n            newImages[currentImageIndex].results = Array(regions.length).fill(null).map(() => ({\n              text: '',\n              croppedImageData: null,\n              error: false\n            }));\n          }\n          newImages[currentImageIndex].results[currentRegionIndex] = {\n            text,\n            croppedImageData,\n            error\n          };\n          return newImages;\n        });\n        \n        setIsLoading(false);\n      })\n      .catch(error => {\n        console.error(error);\n        setIsLoading(false);\n        alert(\"An unexpected error occurred. Please try again.\");\n      });\n  };\n\n  // Process all regions in current image\n  const handleRunOCRAllRegions = async () => {\n    if (!images[currentImageIndex]) {\n      alert('Please upload an image first');\n      return;\n    }\n\n    if (regions.length === 0) {\n      alert('No regions defined');\n      return;\n    }\n\n    setIsLoading(true);\n    setBatchProgress({ current: 0, total: regions.length });\n\n    try {\n      const results = await Promise.all(\n        regions.map(async (region, idx) => {\n          try {\n            const result = await processRegionOCR(\n              images[currentImageIndex].url, \n              region.coordinates\n            );\n            setBatchProgress(prev => ({ ...prev, current: idx + 1 }));\n            return result;\n          } catch (error) {\n            console.error(`Error processing region ${idx + 1}:`, error);\n            setBatchProgress(prev => ({ ...prev, current: idx + 1 }));\n            return { \n              text: `Error processing region ${idx + 1}`, \n              croppedImageData: null,\n              error: true\n            };\n          }\n        })\n      );\n\n      // Update the current image's results\n      setImages(prev => {\n        const newImages = [...prev];\n        newImages[currentImageIndex].results = results;\n        return newImages;\n      });\n      \n      // Update text for current region\n      setText(results[currentRegionIndex].text);\n      setIsLoading(false);\n      setBatchProgress({ current: 0, total: 0 });\n    } catch (error) {\n      console.error(\"Failed to process regions:\", error);\n      setIsLoading(false);\n      setBatchProgress({ current: 0, total: 0 });\n      alert(\"An error occurred while processing regions. Some regions may not have been processed correctly.\");\n    }\n  };\n\n  // Process all images with OCR (all regions)\n  const handleRunOCRAll = async () => {\n    if (images.length === 0) {\n      alert('Please upload images first');\n      return;\n    }\n\n    setIsLoading(true);\n    const totalOperations = images.length * regions.length;\n    setBatchProgress({ current: 0, total: totalOperations });\n    \n    let processedCount = 0;\n\n    try {\n      const updatedImages = await Promise.all(\n        images.map(async (img) => {\n          try {\n            const results = await Promise.all(\n              regions.map(async (region) => {\n                try {\n                  const result = await processRegionOCR(\n                    img.url, \n                    region.coordinates\n                  );\n                  processedCount++;\n                  setBatchProgress({ current: processedCount, total: totalOperations });\n                  return result;\n                } catch (error) {\n                  console.error(\"Error processing region:\", error);\n                  processedCount++;\n                  setBatchProgress({ current: processedCount, total: totalOperations });\n                  return { \n                    text: \"Error processing this region\", \n                    croppedImageData: null,\n                    error: true\n                  };\n                }\n              })\n            );\n            return { ...img, results };\n          } catch (error) {\n            console.error(\"Error processing image:\", error);\n            return {\n              ...img,\n              results: Array(regions.length).fill(null).map(() => ({\n                text: \"Error processing this image\",\n                croppedImageData: null,\n                error: true\n              }))\n            };\n          }\n        })\n      );\n\n      setImages(updatedImages);\n      \n      // Update text for current image and region\n      if (updatedImages[currentImageIndex]?.results?.[currentRegionIndex]) {\n        setText(updatedImages[currentImageIndex].results[currentRegionIndex].text || '');\n      }\n      \n      setIsLoading(false);\n      setBatchProgress({ current: 0, total: 0 });\n    } catch (error) {\n      console.error(\"Failed to process all images:\", error);\n      setIsLoading(false);\n      setBatchProgress({ current: 0, total: 0 });\n      alert(\"An error occurred while processing images. Some images may not have been processed correctly.\");\n    }\n  };\n\n  // Handle coordinate changes for current region\n  const handleCurrentRegionCoordinatesChange = (e) => {\n    const { name, value } = e.target;\n    const newCoordinates = {\n      ...coordinates,\n      [name]: parseInt(value) || 0\n    };\n    setCoordinates(newCoordinates);\n    \n    // Update coordinates in the regions array\n    setRegions(prev => {\n      const newRegions = [...prev];\n      newRegions[currentRegionIndex].coordinates = newCoordinates;\n      return newRegions;\n    });\n  };\n\n  // Handle region name edit\n  const startEditingRegionName = (index) => {\n    setEditingRegionName(index);\n    setNewRegionName(regions[index].name);\n  };\n\n  // Save edited region name\n  const saveRegionName = () => {\n    if (editingRegionName !== null && newRegionName.trim() !== '') {\n      setRegions(prev => {\n        const newRegions = [...prev];\n        newRegions[editingRegionName].name = newRegionName.trim();\n        return newRegions;\n      });\n      setEditingRegionName(null);\n    }\n  };\n\n  // Cancel region name editing\n  const cancelRegionNameEdit = () => {\n    setEditingRegionName(null);\n  };\n\n  // Handle region name input change\n  const handleRegionNameChange = (e) => {\n    setNewRegionName(e.target.value);\n  };\n\n  // Export results as CSV\n  const exportToCSV = () => {\n    // Create CSV header with a column for each region\n    let header = \"Image Name\";\n    for (let i = 0; i < regions.length; i++) {\n      header += `,${regions[i].name}`;\n    }\n    let csvContent = header + \"\\n\";\n    \n    // Add each image as a row with region texts as columns\n    images.forEach((img, imgIndex) => {\n      // Start with the image name\n      const imageName = img.filename || `Image ${imgIndex + 1}`;\n      let row = `\"${imageName}\"`;\n      \n      // Add each region's text as a column\n      if (img.results) {\n        for (let i = 0; i < regions.length; i++) {\n          // Get text for this region if available, otherwise use empty string\n          const regionText = img.results[i]?.text || '';\n          // Clean text data by escaping quotes and removing line breaks\n          const cleanedText = regionText.replace(/\"/g, '\"\"').replace(/\\n/g, ' ');\n          // Add to row\n          row += `,\"${cleanedText}\"`;\n        }\n      } else {\n        // If no results, fill with empty columns\n        for (let i = 0; i < regions.length; i++) {\n          row += `,\"\"`;\n        }\n      }\n      \n      // Add row to CSV\n      csvContent += row + \"\\n\";\n    });\n    \n    // Create a blob with the CSV content\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const url = URL.createObjectURL(blob);\n    \n    // Create a link element to trigger download\n    const link = document.createElement('a');\n    link.setAttribute('href', url);\n    link.setAttribute('download', 'ocr_results.csv');\n    link.style.visibility = 'hidden';\n    \n    // Add to document, click to download, then remove\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>OCR Image to Text</h1>\n      \n      {/* Image Upload */}\n      <div>\n        <input\n          type=\"file\"\n          accept=\"image/*\"\n          multiple\n          onChange={handleImageChange}\n        />\n      </div>\n\n      {/* Image Selection */}\n      {images.length > 0 && (\n        <div className=\"image-selection\">\n          <h3>Select Image:</h3>\n          <div className=\"image-thumbnails\">\n            {images.map((img, index) => (\n              <div \n                key={index}\n                className={`image-thumbnail ${index === currentImageIndex ? 'selected' : ''}`}\n                onClick={() => handleImageSelect(index)}\n              >\n                <img src={img.url} alt={`Thumbnail ${index + 1}`} />\n                <span>{img.filename || `Image ${index + 1}`}</span>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Region and Coordinate Controls Container */}\n      {images.length > 0 && (\n        <div className=\"region-coordinate-container\">\n          {/* Region Selection - now shared across all images */}\n          {regions.length > 0 && (\n            <div className=\"region-selection\">\n              <h3>Regions (Shared Across All Images):</h3>\n              <div className=\"region-controls\">\n                <button onClick={addRegion} className=\"control-button\">Add Region</button>\n                <button onClick={deleteRegion} className=\"control-button\">Delete Region</button>\n              </div>\n              <div className=\"region-tabs\">\n                {regions.map((region, index) => (\n                  <div \n                    key={index}\n                    className={`region-tab ${index === currentRegionIndex ? 'selected' : ''}`}\n                  >\n                    {editingRegionName === index ? (\n                      <div className=\"region-name-edit\">\n                        <input\n                          type=\"text\"\n                          value={newRegionName}\n                          onChange={handleRegionNameChange}\n                          onClick={(e) => e.stopPropagation()}\n                          autoFocus\n                        />\n                        <div className=\"edit-buttons\">\n                          <button \n                            onClick={(e) => {\n                              e.stopPropagation();\n                              saveRegionName();\n                            }}\n                            className=\"save-button\"\n                          >\n                            ✓\n                          </button>\n                          <button \n                            onClick={(e) => {\n                              e.stopPropagation();\n                              cancelRegionNameEdit();\n                            }}\n                            className=\"cancel-button\"\n                          >\n                            ✕\n                          </button>\n                        </div>\n                      </div>\n                    ) : (\n                      <div \n                        className=\"region-name-display\"\n                        onClick={() => handleRegionSelect(index)}\n                      >\n                        <span>{region.name}</span>\n                        <button \n                          className=\"edit-name-button\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            startEditingRegionName(index);\n                          }}\n                        >\n                          ✎\n                        </button>\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Coordinate Inputs */}\n          <div className=\"coordinates-input\">\n            <h3>Enter Coordinates for {regions[currentRegionIndex].name}</h3>\n            <div className=\"coordinate-group\">\n              <div>\n                <label>Min X:</label>\n                <input\n                  type=\"number\"\n                  name=\"minX\"\n                  value={coordinates.minX}\n                  onChange={handleCurrentRegionCoordinatesChange}\n                  placeholder=\"Min X\"\n                />\n              </div>\n              <div>\n                <label>Max X:</label>\n                <input\n                  type=\"number\"\n                  name=\"maxX\"\n                  value={coordinates.maxX}\n                  onChange={handleCurrentRegionCoordinatesChange}\n                  placeholder=\"Max X\"\n                />\n              </div>\n              <div>\n                <label>Min Y:</label>\n                <input\n                  type=\"number\"\n                  name=\"minY\"\n                  value={coordinates.minY}\n                  onChange={handleCurrentRegionCoordinatesChange}\n                  placeholder=\"Min Y\"\n                />\n              </div>\n              <div>\n                <label>Max Y:</label>\n                <input\n                  type=\"number\"\n                  name=\"maxY\"\n                  value={coordinates.maxY}\n                  onChange={handleCurrentRegionCoordinatesChange}\n                  placeholder=\"Max Y\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* OCR Buttons */}\n      {images.length > 0 && (\n        <div className=\"run-ocr\">\n          <button onClick={handleRunOCR} disabled={isLoading}>\n            {isLoading ? 'Processing...' : 'Run OCR on Current Region'}\n          </button>\n          <button onClick={handleRunOCRAllRegions} disabled={isLoading} className=\"run-regions-button\">\n            {isLoading ? 'Processing...' : 'Run OCR on All Regions'}\n          </button>\n          <button onClick={handleRunOCRAll} disabled={isLoading} className=\"run-all-button\">\n            {isLoading ? `Processing ${batchProgress.current}/${batchProgress.total}...` : 'Run OCR on All Images'}\n          </button>\n        </div>\n      )}\n\n      {/* Image Previews Container */}\n      {images.length > 0 && (\n        <div className=\"image-preview-container\">\n          {/* Original Image with Rectangle */}\n          <div className=\"image-preview\">\n            <h2>Original Image:</h2>\n            <canvas ref={canvasRef} style={{ maxWidth: '400px' }} />\n            <div className=\"image-dimensions\">\n              Size: {imageDimensions.width} x {imageDimensions.height} pixels\n            </div>\n          </div>\n\n          {/* Cropped Image Preview */}\n          {images[currentImageIndex]?.results?.[currentRegionIndex] && (\n            <div className=\"image-preview\">\n              <h2>Cropped {regions[currentRegionIndex].name}:</h2>\n              {images[currentImageIndex].results[currentRegionIndex].error ? (\n                <div className=\"error-message\">\n                  <p>Error: Unable to crop region due to invalid coordinates</p>\n                  <p>Please check that:</p>\n                  <ul>\n                    <li>Min values are less than Max values</li>\n                    <li>Coordinates are within image boundaries</li>\n                    <li>The region has a valid area (width and height &gt; 0)</li>\n                  </ul>\n                </div>\n              ) : (\n                <img \n                  src={images[currentImageIndex].results[currentRegionIndex].croppedImageData} \n                  alt=\"Cropped\" \n                  style={{ maxWidth: '400px' }} \n                />\n              )}\n            </div>\n          )}\n\n          {/* Extracted Text */}\n          {images[currentImageIndex]?.results?.[currentRegionIndex] && (\n            <div className=\"result\">\n              <h2>Extracted Text from {regions[currentRegionIndex].name}:</h2>\n              {images[currentImageIndex].results[currentRegionIndex].error ? (\n                <div className=\"error-message\">\n                  {images[currentImageIndex].results[currentRegionIndex].text}\n                </div>\n              ) : (\n                <pre>{images[currentImageIndex].results[currentRegionIndex].text}</pre>\n              )}\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Loading Indicator */}\n      {isLoading && <p>Processing image...</p>}\n      \n      {/* Export Button */}\n      {images.length > 0 && images.some(img => img.results && img.results.some(result => result?.text)) && (\n        <div className=\"export-container\">\n          <button onClick={exportToCSV} className=\"export-button\">\n            Export Results as CSV\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,SAAS,MAAM,cAAc;AACpC,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAAA,IAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA;EACb,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACc,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC;EAC7D,MAAM,CAACgB,IAAI,EAAEC,OAAO,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACkB,SAAS,EAAEC,YAAY,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACoB,aAAa,EAAEC,gBAAgB,CAAC,GAAGrB,QAAQ,CAAC;IAAEsB,OAAO,EAAE,CAAC;IAAEC,KAAK,EAAE;EAAE,CAAC,CAAC;EAC5E,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGzB,QAAQ,CAAC;IAAE0B,KAAK,EAAE,CAAC;IAAEC,MAAM,EAAE;EAAE,CAAC,CAAC;EAC/E,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAG7B,QAAQ,CAAC;IAC7C8B,IAAI,EAAE,CAAC;IACPC,IAAI,EAAE,CAAC;IACPC,IAAI,EAAE,CAAC;IACPC,IAAI,EAAE;EACR,CAAC,CAAC;EACF,MAAM,CAACC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGnC,QAAQ,CAAC,CAAC,CAAC;EAC/D;EACA,MAAM,CAACoC,OAAO,EAAEC,UAAU,CAAC,GAAGrC,QAAQ,CAAC,CAAC;IACtCsC,IAAI,EAAE,UAAU;IAChBV,WAAW,EAAE;MAAEE,IAAI,EAAE,CAAC;MAAEC,IAAI,EAAE,CAAC;MAAEC,IAAI,EAAE,CAAC;MAAEC,IAAI,EAAE;IAAE,CAAC;IACnDjB,IAAI,EAAE,EAAE;IACRuB,gBAAgB,EAAE;EACpB,CAAC,CAAC,CAAC;EACH,MAAM,CAACC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGzC,QAAQ,CAAC,IAAI,CAAC;EAChE,MAAM,CAAC0C,aAAa,EAAEC,gBAAgB,CAAC,GAAG3C,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM4C,SAAS,GAAG1C,MAAM,CAAC,IAAI,CAAC;;EAE9B;EACA,MAAM2C,cAAc,GAAIC,GAAG,IAAK;IAC9B,MAAMC,MAAM,GAAGH,SAAS,CAACtB,OAAO;IAChC,MAAM0B,GAAG,GAAGD,MAAM,CAACE,UAAU,CAAC,IAAI,CAAC;;IAEnC;IACAF,MAAM,CAACrB,KAAK,GAAGoB,GAAG,CAACpB,KAAK;IACxBqB,MAAM,CAACpB,MAAM,GAAGmB,GAAG,CAACnB,MAAM;;IAE1B;IACAqB,GAAG,CAACE,SAAS,CAACJ,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;;IAExB;IACA,IAAIV,OAAO,CAACe,MAAM,GAAG,CAAC,EAAE;MACtBf,OAAO,CAACgB,OAAO,CAAC,CAACC,MAAM,EAAEC,KAAK,KAAK;QACjC;QACAN,GAAG,CAACO,WAAW,GAAGD,KAAK,KAAKpB,kBAAkB,GAAG,KAAK,GAAG,MAAM;QAC/Dc,GAAG,CAACQ,SAAS,GAAG,CAAC;QACjBR,GAAG,CAACS,UAAU,CACZJ,MAAM,CAACzB,WAAW,CAACE,IAAI,EACvBuB,MAAM,CAACzB,WAAW,CAACI,IAAI,EACvBqB,MAAM,CAACzB,WAAW,CAACG,IAAI,GAAGsB,MAAM,CAACzB,WAAW,CAACE,IAAI,EACjDuB,MAAM,CAACzB,WAAW,CAACK,IAAI,GAAGoB,MAAM,CAACzB,WAAW,CAACI,IAC/C,CAAC;;QAED;QACAgB,GAAG,CAACU,SAAS,GAAGJ,KAAK,KAAKpB,kBAAkB,GAAG,KAAK,GAAG,MAAM;QAC7Dc,GAAG,CAACW,IAAI,GAAG,YAAY;QACvBX,GAAG,CAACY,QAAQ,CAACP,MAAM,CAACf,IAAI,EAAEe,MAAM,CAACzB,WAAW,CAACE,IAAI,EAAEuB,MAAM,CAACzB,WAAW,CAACI,IAAI,GAAG,CAAC,CAAC;MACjF,CAAC,CAAC;IACJ;EACF,CAAC;;EAED;EACA/B,SAAS,CAAC,MAAM;IACd,IAAIW,MAAM,CAACE,iBAAiB,CAAC,EAAE;MAC7B,MAAMgC,GAAG,GAAG,IAAIe,KAAK,CAAC,CAAC;MACvBf,GAAG,CAACgB,GAAG,GAAGlD,MAAM,CAACE,iBAAiB,CAAC,CAACiD,GAAG;MACvCjB,GAAG,CAACkB,MAAM,GAAG,MAAM;QACjBnB,cAAc,CAACC,GAAG,CAAC;QACnBrB,kBAAkB,CAAC;UAAEC,KAAK,EAAEoB,GAAG,CAACpB,KAAK;UAAEC,MAAM,EAAEmB,GAAG,CAACnB;QAAO,CAAC,CAAC;MAC9D,CAAC;IACH;EACF,CAAC,EAAE,CAACC,WAAW,EAAEd,iBAAiB,EAAEF,MAAM,EAAEsB,kBAAkB,EAAEE,OAAO,CAAC,CAAC;;EAEzE;EACA,MAAM6B,iBAAiB,GAAIC,CAAC,IAAK;IAC/B,IAAIA,CAAC,CAACC,MAAM,CAACC,KAAK,EAAE;MAClB,MAAMC,SAAS,GAAGC,KAAK,CAACC,IAAI,CAACL,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAACI,GAAG,CAACC,IAAI,KAAK;QACxDV,GAAG,EAAEW,GAAG,CAACC,eAAe,CAACF,IAAI,CAAC;QAC9BG,QAAQ,EAAEH,IAAI,CAACnC,IAAI;QACnBuC,OAAO,EAAEP,KAAK,CAAClC,OAAO,CAACe,MAAM,CAAC,CAAC2B,IAAI,CAAC,IAAI,CAAC,CAACN,GAAG,CAAC,OAAO;UACnDxD,IAAI,EAAE,EAAE;UACRuB,gBAAgB,EAAE,IAAI;UACtBwC,KAAK,EAAE;QACT,CAAC,CAAC;MACJ,CAAC,CAAC,CAAC;MACHlE,SAAS,CAACmE,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE,GAAGX,SAAS,CAAC,CAAC;MAC1CtD,oBAAoB,CAACiE,IAAI,IAAIA,IAAI,GAAGX,SAAS,CAAClB,MAAM,GAAG,CAAC,CAAC;IAC3D;EACF,CAAC;;EAED;EACA,MAAM8B,iBAAiB,GAAI3B,KAAK,IAAK;IAAA,IAAA4B,aAAA;IACnCnE,oBAAoB,CAACuC,KAAK,CAAC;IAC3BnB,qBAAqB,CAAC,CAAC,CAAC;;IAExB;IACA,IAAI,CAAA+C,aAAA,GAAAtE,MAAM,CAAC0C,KAAK,CAAC,cAAA4B,aAAA,eAAbA,aAAA,CAAeL,OAAO,IAAIjE,MAAM,CAAC0C,KAAK,CAAC,CAACuB,OAAO,CAAC,CAAC,CAAC,EAAE;MACtD5D,OAAO,CAACL,MAAM,CAAC0C,KAAK,CAAC,CAACuB,OAAO,CAAC,CAAC,CAAC,CAAC7D,IAAI,IAAI,EAAE,CAAC;IAC9C,CAAC,MAAM;MACLC,OAAO,CAAC,EAAE,CAAC;IACb;EACF,CAAC;;EAED;EACA,MAAMkE,SAAS,GAAGA,CAAA,KAAM;IACtB;IACA,MAAMC,SAAS,GAAG;MAChB9C,IAAI,EAAE,UAAUF,OAAO,CAACe,MAAM,GAAG,CAAC,EAAE;MACpCvB,WAAW,EAAE;QAAEE,IAAI,EAAE,CAAC;QAAEC,IAAI,EAAE,CAAC;QAAEC,IAAI,EAAE,CAAC;QAAEC,IAAI,EAAE;MAAE,CAAC;MACnDjB,IAAI,EAAE,EAAE;MACRuB,gBAAgB,EAAE;IACpB,CAAC;;IAED;IACAF,UAAU,CAAC2C,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEI,SAAS,CAAC,CAAC;;IAExC;IACAvE,SAAS,CAACmE,IAAI,IAAI;MAChB,OAAOA,IAAI,CAACR,GAAG,CAAC1B,GAAG,KAAK;QACtB,GAAGA,GAAG;QACN+B,OAAO,EAAE,CAAC,IAAI/B,GAAG,CAAC+B,OAAO,IAAI,EAAE,CAAC,EAAE;UAAE7D,IAAI,EAAE,EAAE;UAAEuB,gBAAgB,EAAE;QAAK,CAAC;MACxE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;;IAEF;IACAJ,qBAAqB,CAACC,OAAO,CAACe,MAAM,CAAC;IACrCtB,cAAc,CAAC;MAAEC,IAAI,EAAE,CAAC;MAAEC,IAAI,EAAE,CAAC;MAAEC,IAAI,EAAE,CAAC;MAAEC,IAAI,EAAE;IAAE,CAAC,CAAC;IACtDhB,OAAO,CAAC,EAAE,CAAC;EACb,CAAC;;EAED;EACA,MAAMoE,YAAY,GAAGA,CAAA,KAAM;IAAA,IAAAC,qBAAA,EAAAC,sBAAA;IACzB;IACA,IAAInD,OAAO,CAACe,MAAM,IAAI,CAAC,EAAE;MACvBqC,KAAK,CAAC,gEAAgE,CAAC;MACvE;IACF;IAEA,MAAMC,mBAAmB,GAAGvD,kBAAkB;;IAE9C;IACAG,UAAU,CAAC2C,IAAI,IAAI;MACjB,MAAMU,cAAc,GAAG,CAAC,GAAGV,IAAI,CAAC;MAChCU,cAAc,CAACC,MAAM,CAACF,mBAAmB,EAAE,CAAC,CAAC;MAC7C,OAAOC,cAAc;IACvB,CAAC,CAAC;;IAEF;IACA7E,SAAS,CAACmE,IAAI,IAAI;MAChB,OAAOA,IAAI,CAACR,GAAG,CAAC1B,GAAG,IAAI;QACrB,MAAM8C,cAAc,GAAG,CAAC,IAAI9C,GAAG,CAAC+B,OAAO,IAAI,EAAE,CAAC,CAAC;QAC/Ce,cAAc,CAACD,MAAM,CAACF,mBAAmB,EAAE,CAAC,CAAC;QAC7C,OAAO;UACL,GAAG3C,GAAG;UACN+B,OAAO,EAAEe;QACX,CAAC;MACH,CAAC,CAAC;IACJ,CAAC,CAAC;;IAEF;IACAzD,qBAAqB,CAAC6C,IAAI,IACxBA,IAAI,IAAI5C,OAAO,CAACe,MAAM,GAAG,CAAC,GAAGf,OAAO,CAACe,MAAM,GAAG,CAAC,GAAG6B,IACpD,CAAC;;IAED;IACA,IAAI5C,OAAO,CAACe,MAAM,GAAG,CAAC,EAAE;MACtB,MAAM0C,QAAQ,GAAG3D,kBAAkB,IAAIE,OAAO,CAACe,MAAM,GAAG,CAAC,GACvDf,OAAO,CAACe,MAAM,GAAG,CAAC,GAAGjB,kBAAkB;MACzCL,cAAc,CAACO,OAAO,CAACyD,QAAQ,CAAC,CAACjE,WAAW,CAAC;IAC/C;;IAEA;IACA,MAAMiE,QAAQ,GAAG3D,kBAAkB,IAAIE,OAAO,CAACe,MAAM,GAAG,CAAC,GACvDf,OAAO,CAACe,MAAM,GAAG,CAAC,GAAGjB,kBAAkB;IACzC,KAAAoD,qBAAA,GAAI1E,MAAM,CAACE,iBAAiB,CAAC,cAAAwE,qBAAA,gBAAAC,sBAAA,GAAzBD,qBAAA,CAA2BT,OAAO,cAAAU,sBAAA,eAAlCA,sBAAA,CAAqCM,QAAQ,CAAC,EAAE;MAClD5E,OAAO,CAACL,MAAM,CAACE,iBAAiB,CAAC,CAAC+D,OAAO,CAACgB,QAAQ,CAAC,CAAC7E,IAAI,IAAI,EAAE,CAAC;IACjE,CAAC,MAAM;MACLC,OAAO,CAAC,EAAE,CAAC;IACb;EACF,CAAC;;EAED;EACA,MAAM6E,kBAAkB,GAAIxC,KAAK,IAAK;IAAA,IAAAyC,sBAAA,EAAAC,sBAAA;IACpC7D,qBAAqB,CAACmB,KAAK,CAAC;IAC5BzB,cAAc,CAACO,OAAO,CAACkB,KAAK,CAAC,CAAC1B,WAAW,CAAC;;IAE1C;IACA,KAAAmE,sBAAA,GAAInF,MAAM,CAACE,iBAAiB,CAAC,cAAAiF,sBAAA,gBAAAC,sBAAA,GAAzBD,sBAAA,CAA2BlB,OAAO,cAAAmB,sBAAA,eAAlCA,sBAAA,CAAqC1C,KAAK,CAAC,EAAE;MAC/CrC,OAAO,CAACL,MAAM,CAACE,iBAAiB,CAAC,CAAC+D,OAAO,CAACvB,KAAK,CAAC,CAACtC,IAAI,IAAI,EAAE,CAAC;IAC9D,CAAC,MAAM;MACLC,OAAO,CAAC,EAAE,CAAC;IACb;EACF,CAAC;;EAED;EACA,MAAMgF,SAAS,GAAGA,CAACC,YAAY,EAAEC,MAAM,KAAK;IAC1C,IAAI;MACF;MACA,IAAIA,MAAM,CAACrE,IAAI,IAAIqE,MAAM,CAACpE,IAAI,IAAIoE,MAAM,CAACnE,IAAI,IAAImE,MAAM,CAAClE,IAAI,EAAE;QAC5DmE,OAAO,CAACC,IAAI,CAAC,8DAA8D,CAAC;QAC5E,OAAO,IAAI;MACb;;MAEA;MACA,MAAM3E,KAAK,GAAGwE,YAAY,CAACxE,KAAK;MAChC,MAAMC,MAAM,GAAGuE,YAAY,CAACvE,MAAM;MAElC,IAAIwE,MAAM,CAACrE,IAAI,GAAG,CAAC,IAAIqE,MAAM,CAACnE,IAAI,GAAG,CAAC,IAAImE,MAAM,CAACpE,IAAI,GAAGL,KAAK,IAAIyE,MAAM,CAAClE,IAAI,GAAGN,MAAM,EAAE;QACrFyE,OAAO,CAACC,IAAI,CAAC,sDAAsD,CAAC;QACpE,OAAO,IAAI;MACb;;MAEA;MACA,MAAMC,SAAS,GAAGH,MAAM,CAACpE,IAAI,GAAGoE,MAAM,CAACrE,IAAI;MAC3C,MAAMyE,UAAU,GAAGJ,MAAM,CAAClE,IAAI,GAAGkE,MAAM,CAACnE,IAAI;;MAE5C;MACA,IAAIsE,SAAS,IAAI,CAAC,IAAIC,UAAU,IAAI,CAAC,EAAE;QACrCH,OAAO,CAACC,IAAI,CAAC,iDAAiD,CAAC;QAC/D,OAAO,IAAI;MACb;MAEA,MAAMtD,MAAM,GAAGyD,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;MAC/C,MAAMzD,GAAG,GAAGD,MAAM,CAACE,UAAU,CAAC,IAAI,CAAC;;MAEnC;MACAF,MAAM,CAACrB,KAAK,GAAG4E,SAAS;MACxBvD,MAAM,CAACpB,MAAM,GAAG4E,UAAU;;MAE1B;MACAvD,GAAG,CAACE,SAAS,CACXgD,YAAY,EACZC,MAAM,CAACrE,IAAI,EAAEqE,MAAM,CAACnE,IAAI,EACxBsE,SAAS,EAAEC,UAAU,EACrB,CAAC,EAAE,CAAC,EACJD,SAAS,EAAEC,UACb,CAAC;MAED,OAAOxD,MAAM,CAAC2D,SAAS,CAAC,WAAW,CAAC;IACtC,CAAC,CAAC,OAAO3B,KAAK,EAAE;MACdqB,OAAO,CAACrB,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,OAAO,IAAI;IACb;EACF,CAAC;;EAED;EACA,MAAM4B,gBAAgB,GAAGA,CAACC,QAAQ,EAAEC,YAAY,KAAK;IACnD,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,IAAI;QACF,MAAMlE,GAAG,GAAG,IAAIe,KAAK,CAAC,CAAC;QAEvBf,GAAG,CAACmE,OAAO,GAAG,MAAM;UAClBb,OAAO,CAACrB,KAAK,CAAC,sBAAsB,CAAC;UACrCgC,OAAO,CAAC;YAAE/F,IAAI,EAAE,6BAA6B;YAAEuB,gBAAgB,EAAE,IAAI;YAAEwC,KAAK,EAAE;UAAK,CAAC,CAAC;QACvF,CAAC;QAEDjC,GAAG,CAACkB,MAAM,GAAG,MAAM;UACjB,MAAMzB,gBAAgB,GAAG0D,SAAS,CAACnD,GAAG,EAAE+D,YAAY,CAAC;;UAErD;UACA,IAAI,CAACtE,gBAAgB,EAAE;YACrB6D,OAAO,CAACC,IAAI,CAAC,kCAAkC,CAAC;YAChDU,OAAO,CAAC;cACN/F,IAAI,EAAE,4CAA4C;cAClDuB,gBAAgB,EAAE,IAAI;cACtBwC,KAAK,EAAE;YACT,CAAC,CAAC;YACF;UACF;UAEA5E,SAAS,CAAC+G,SAAS,CACjB3E,gBAAgB,EAChB,KAAK,EACL;YACE4E,MAAM,EAAGC,CAAC,IAAKhB,OAAO,CAACiB,GAAG,CAACD,CAAC;UAC9B,CACF,CAAC,CACEE,IAAI,CAAC,CAAC;YAAEC,IAAI,EAAE;cAAEvG;YAAK;UAAE,CAAC,KAAK;YAC5B+F,OAAO,CAAC;cAAE/F,IAAI;cAAEuB,gBAAgB;cAAEwC,KAAK,EAAE;YAAM,CAAC,CAAC;UACnD,CAAC,CAAC,CACDyC,KAAK,CAACzC,KAAK,IAAI;YACdqB,OAAO,CAACrB,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;YACxCgC,OAAO,CAAC;cACN/F,IAAI,EAAE,8BAA8B;cACpCuB,gBAAgB;cAChBwC,KAAK,EAAE;YACT,CAAC,CAAC;UACJ,CAAC,CAAC;QACN,CAAC;QAEDjC,GAAG,CAACgB,GAAG,GAAG8C,QAAQ;MACpB,CAAC,CAAC,OAAO7B,KAAK,EAAE;QACdqB,OAAO,CAACrB,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;QACzCgC,OAAO,CAAC;UACN/F,IAAI,EAAE,kCAAkC;UACxCuB,gBAAgB,EAAE,IAAI;UACtBwC,KAAK,EAAE;QACT,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAM0C,YAAY,GAAGA,CAAA,KAAM;IACzB,IAAI,CAAC7G,MAAM,CAACE,iBAAiB,CAAC,EAAE;MAC9B0E,KAAK,CAAC,8BAA8B,CAAC;MACrC;IACF;IAEArE,YAAY,CAAC,IAAI,CAAC;IAClBwF,gBAAgB,CAAC/F,MAAM,CAACE,iBAAiB,CAAC,CAACiD,GAAG,EAAE3B,OAAO,CAACF,kBAAkB,CAAC,CAACN,WAAW,CAAC,CACrF0F,IAAI,CAAC,CAAC;MAAEtG,IAAI;MAAEuB,gBAAgB;MAAEwC;IAAM,CAAC,KAAK;MAC3C9D,OAAO,CAACD,IAAI,CAAC;;MAEb;MACAqB,UAAU,CAAC2C,IAAI,IAAI;QACjB,MAAM0C,UAAU,GAAG,CAAC,GAAG1C,IAAI,CAAC;QAC5B0C,UAAU,CAACxF,kBAAkB,CAAC,GAAG;UAC/B,GAAGwF,UAAU,CAACxF,kBAAkB,CAAC;UACjCN,WAAW,EAAEQ,OAAO,CAACF,kBAAkB,CAAC,CAACN,WAAW;UACpD+F,QAAQ,EAAE5C;QACZ,CAAC;QACD,OAAO2C,UAAU;MACnB,CAAC,CAAC;;MAEF;MACA7G,SAAS,CAACmE,IAAI,IAAI;QAChB,MAAMX,SAAS,GAAG,CAAC,GAAGW,IAAI,CAAC;QAC3B,IAAI,CAACX,SAAS,CAACvD,iBAAiB,CAAC,CAAC+D,OAAO,EAAE;UACzCR,SAAS,CAACvD,iBAAiB,CAAC,CAAC+D,OAAO,GAAGP,KAAK,CAAClC,OAAO,CAACe,MAAM,CAAC,CAAC2B,IAAI,CAAC,IAAI,CAAC,CAACN,GAAG,CAAC,OAAO;YACjFxD,IAAI,EAAE,EAAE;YACRuB,gBAAgB,EAAE,IAAI;YACtBwC,KAAK,EAAE;UACT,CAAC,CAAC,CAAC;QACL;QACAV,SAAS,CAACvD,iBAAiB,CAAC,CAAC+D,OAAO,CAAC3C,kBAAkB,CAAC,GAAG;UACzDlB,IAAI;UACJuB,gBAAgB;UAChBwC;QACF,CAAC;QACD,OAAOV,SAAS;MAClB,CAAC,CAAC;MAEFlD,YAAY,CAAC,KAAK,CAAC;IACrB,CAAC,CAAC,CACDqG,KAAK,CAACzC,KAAK,IAAI;MACdqB,OAAO,CAACrB,KAAK,CAACA,KAAK,CAAC;MACpB5D,YAAY,CAAC,KAAK,CAAC;MACnBqE,KAAK,CAAC,iDAAiD,CAAC;IAC1D,CAAC,CAAC;EACN,CAAC;;EAED;EACA,MAAMoC,sBAAsB,GAAG,MAAAA,CAAA,KAAY;IACzC,IAAI,CAAChH,MAAM,CAACE,iBAAiB,CAAC,EAAE;MAC9B0E,KAAK,CAAC,8BAA8B,CAAC;MACrC;IACF;IAEA,IAAIpD,OAAO,CAACe,MAAM,KAAK,CAAC,EAAE;MACxBqC,KAAK,CAAC,oBAAoB,CAAC;MAC3B;IACF;IAEArE,YAAY,CAAC,IAAI,CAAC;IAClBE,gBAAgB,CAAC;MAAEC,OAAO,EAAE,CAAC;MAAEC,KAAK,EAAEa,OAAO,CAACe;IAAO,CAAC,CAAC;IAEvD,IAAI;MACF,MAAM0B,OAAO,GAAG,MAAMiC,OAAO,CAACe,GAAG,CAC/BzF,OAAO,CAACoC,GAAG,CAAC,OAAOnB,MAAM,EAAEyE,GAAG,KAAK;QACjC,IAAI;UACF,MAAMC,MAAM,GAAG,MAAMpB,gBAAgB,CACnC/F,MAAM,CAACE,iBAAiB,CAAC,CAACiD,GAAG,EAC7BV,MAAM,CAACzB,WACT,CAAC;UACDP,gBAAgB,CAAC2D,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAE1D,OAAO,EAAEwG,GAAG,GAAG;UAAE,CAAC,CAAC,CAAC;UACzD,OAAOC,MAAM;QACf,CAAC,CAAC,OAAOhD,KAAK,EAAE;UACdqB,OAAO,CAACrB,KAAK,CAAC,2BAA2B+C,GAAG,GAAG,CAAC,GAAG,EAAE/C,KAAK,CAAC;UAC3D1D,gBAAgB,CAAC2D,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAE1D,OAAO,EAAEwG,GAAG,GAAG;UAAE,CAAC,CAAC,CAAC;UACzD,OAAO;YACL9G,IAAI,EAAE,2BAA2B8G,GAAG,GAAG,CAAC,EAAE;YAC1CvF,gBAAgB,EAAE,IAAI;YACtBwC,KAAK,EAAE;UACT,CAAC;QACH;MACF,CAAC,CACH,CAAC;;MAED;MACAlE,SAAS,CAACmE,IAAI,IAAI;QAChB,MAAMX,SAAS,GAAG,CAAC,GAAGW,IAAI,CAAC;QAC3BX,SAAS,CAACvD,iBAAiB,CAAC,CAAC+D,OAAO,GAAGA,OAAO;QAC9C,OAAOR,SAAS;MAClB,CAAC,CAAC;;MAEF;MACApD,OAAO,CAAC4D,OAAO,CAAC3C,kBAAkB,CAAC,CAAClB,IAAI,CAAC;MACzCG,YAAY,CAAC,KAAK,CAAC;MACnBE,gBAAgB,CAAC;QAAEC,OAAO,EAAE,CAAC;QAAEC,KAAK,EAAE;MAAE,CAAC,CAAC;IAC5C,CAAC,CAAC,OAAOwD,KAAK,EAAE;MACdqB,OAAO,CAACrB,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD5D,YAAY,CAAC,KAAK,CAAC;MACnBE,gBAAgB,CAAC;QAAEC,OAAO,EAAE,CAAC;QAAEC,KAAK,EAAE;MAAE,CAAC,CAAC;MAC1CiE,KAAK,CAAC,iGAAiG,CAAC;IAC1G;EACF,CAAC;;EAED;EACA,MAAMwC,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAIpH,MAAM,CAACuC,MAAM,KAAK,CAAC,EAAE;MACvBqC,KAAK,CAAC,4BAA4B,CAAC;MACnC;IACF;IAEArE,YAAY,CAAC,IAAI,CAAC;IAClB,MAAM8G,eAAe,GAAGrH,MAAM,CAACuC,MAAM,GAAGf,OAAO,CAACe,MAAM;IACtD9B,gBAAgB,CAAC;MAAEC,OAAO,EAAE,CAAC;MAAEC,KAAK,EAAE0G;IAAgB,CAAC,CAAC;IAExD,IAAIC,cAAc,GAAG,CAAC;IAEtB,IAAI;MAAA,IAAAC,qBAAA,EAAAC,sBAAA;MACF,MAAMC,aAAa,GAAG,MAAMvB,OAAO,CAACe,GAAG,CACrCjH,MAAM,CAAC4D,GAAG,CAAC,MAAO1B,GAAG,IAAK;QACxB,IAAI;UACF,MAAM+B,OAAO,GAAG,MAAMiC,OAAO,CAACe,GAAG,CAC/BzF,OAAO,CAACoC,GAAG,CAAC,MAAOnB,MAAM,IAAK;YAC5B,IAAI;cACF,MAAM0E,MAAM,GAAG,MAAMpB,gBAAgB,CACnC7D,GAAG,CAACiB,GAAG,EACPV,MAAM,CAACzB,WACT,CAAC;cACDsG,cAAc,EAAE;cAChB7G,gBAAgB,CAAC;gBAAEC,OAAO,EAAE4G,cAAc;gBAAE3G,KAAK,EAAE0G;cAAgB,CAAC,CAAC;cACrE,OAAOF,MAAM;YACf,CAAC,CAAC,OAAOhD,KAAK,EAAE;cACdqB,OAAO,CAACrB,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;cAChDmD,cAAc,EAAE;cAChB7G,gBAAgB,CAAC;gBAAEC,OAAO,EAAE4G,cAAc;gBAAE3G,KAAK,EAAE0G;cAAgB,CAAC,CAAC;cACrE,OAAO;gBACLjH,IAAI,EAAE,8BAA8B;gBACpCuB,gBAAgB,EAAE,IAAI;gBACtBwC,KAAK,EAAE;cACT,CAAC;YACH;UACF,CAAC,CACH,CAAC;UACD,OAAO;YAAE,GAAGjC,GAAG;YAAE+B;UAAQ,CAAC;QAC5B,CAAC,CAAC,OAAOE,KAAK,EAAE;UACdqB,OAAO,CAACrB,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;UAC/C,OAAO;YACL,GAAGjC,GAAG;YACN+B,OAAO,EAAEP,KAAK,CAAClC,OAAO,CAACe,MAAM,CAAC,CAAC2B,IAAI,CAAC,IAAI,CAAC,CAACN,GAAG,CAAC,OAAO;cACnDxD,IAAI,EAAE,6BAA6B;cACnCuB,gBAAgB,EAAE,IAAI;cACtBwC,KAAK,EAAE;YACT,CAAC,CAAC;UACJ,CAAC;QACH;MACF,CAAC,CACH,CAAC;MAEDlE,SAAS,CAACwH,aAAa,CAAC;;MAExB;MACA,KAAAF,qBAAA,GAAIE,aAAa,CAACvH,iBAAiB,CAAC,cAAAqH,qBAAA,gBAAAC,sBAAA,GAAhCD,qBAAA,CAAkCtD,OAAO,cAAAuD,sBAAA,eAAzCA,sBAAA,CAA4ClG,kBAAkB,CAAC,EAAE;QACnEjB,OAAO,CAACoH,aAAa,CAACvH,iBAAiB,CAAC,CAAC+D,OAAO,CAAC3C,kBAAkB,CAAC,CAAClB,IAAI,IAAI,EAAE,CAAC;MAClF;MAEAG,YAAY,CAAC,KAAK,CAAC;MACnBE,gBAAgB,CAAC;QAAEC,OAAO,EAAE,CAAC;QAAEC,KAAK,EAAE;MAAE,CAAC,CAAC;IAC5C,CAAC,CAAC,OAAOwD,KAAK,EAAE;MACdqB,OAAO,CAACrB,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrD5D,YAAY,CAAC,KAAK,CAAC;MACnBE,gBAAgB,CAAC;QAAEC,OAAO,EAAE,CAAC;QAAEC,KAAK,EAAE;MAAE,CAAC,CAAC;MAC1CiE,KAAK,CAAC,+FAA+F,CAAC;IACxG;EACF,CAAC;;EAED;EACA,MAAM8C,oCAAoC,GAAIpE,CAAC,IAAK;IAClD,MAAM;MAAE5B,IAAI;MAAEiG;IAAM,CAAC,GAAGrE,CAAC,CAACC,MAAM;IAChC,MAAMqE,cAAc,GAAG;MACrB,GAAG5G,WAAW;MACd,CAACU,IAAI,GAAGmG,QAAQ,CAACF,KAAK,CAAC,IAAI;IAC7B,CAAC;IACD1G,cAAc,CAAC2G,cAAc,CAAC;;IAE9B;IACAnG,UAAU,CAAC2C,IAAI,IAAI;MACjB,MAAM0C,UAAU,GAAG,CAAC,GAAG1C,IAAI,CAAC;MAC5B0C,UAAU,CAACxF,kBAAkB,CAAC,CAACN,WAAW,GAAG4G,cAAc;MAC3D,OAAOd,UAAU;IACnB,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMgB,sBAAsB,GAAIpF,KAAK,IAAK;IACxCb,oBAAoB,CAACa,KAAK,CAAC;IAC3BX,gBAAgB,CAACP,OAAO,CAACkB,KAAK,CAAC,CAAChB,IAAI,CAAC;EACvC,CAAC;;EAED;EACA,MAAMqG,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAInG,iBAAiB,KAAK,IAAI,IAAIE,aAAa,CAACkG,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MAC7DvG,UAAU,CAAC2C,IAAI,IAAI;QACjB,MAAM0C,UAAU,GAAG,CAAC,GAAG1C,IAAI,CAAC;QAC5B0C,UAAU,CAAClF,iBAAiB,CAAC,CAACF,IAAI,GAAGI,aAAa,CAACkG,IAAI,CAAC,CAAC;QACzD,OAAOlB,UAAU;MACnB,CAAC,CAAC;MACFjF,oBAAoB,CAAC,IAAI,CAAC;IAC5B;EACF,CAAC;;EAED;EACA,MAAMoG,oBAAoB,GAAGA,CAAA,KAAM;IACjCpG,oBAAoB,CAAC,IAAI,CAAC;EAC5B,CAAC;;EAED;EACA,MAAMqG,sBAAsB,GAAI5E,CAAC,IAAK;IACpCvB,gBAAgB,CAACuB,CAAC,CAACC,MAAM,CAACoE,KAAK,CAAC;EAClC,CAAC;;EAED;EACA,MAAMQ,WAAW,GAAGA,CAAA,KAAM;IACxB;IACA,IAAIC,MAAM,GAAG,YAAY;IACzB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG7G,OAAO,CAACe,MAAM,EAAE8F,CAAC,EAAE,EAAE;MACvCD,MAAM,IAAI,IAAI5G,OAAO,CAAC6G,CAAC,CAAC,CAAC3G,IAAI,EAAE;IACjC;IACA,IAAI4G,UAAU,GAAGF,MAAM,GAAG,IAAI;;IAE9B;IACApI,MAAM,CAACwC,OAAO,CAAC,CAACN,GAAG,EAAEqG,QAAQ,KAAK;MAChC;MACA,MAAMC,SAAS,GAAGtG,GAAG,CAAC8B,QAAQ,IAAI,SAASuE,QAAQ,GAAG,CAAC,EAAE;MACzD,IAAIE,GAAG,GAAG,IAAID,SAAS,GAAG;;MAE1B;MACA,IAAItG,GAAG,CAAC+B,OAAO,EAAE;QACf,KAAK,IAAIoE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG7G,OAAO,CAACe,MAAM,EAAE8F,CAAC,EAAE,EAAE;UAAA,IAAAK,cAAA;UACvC;UACA,MAAMC,UAAU,GAAG,EAAAD,cAAA,GAAAxG,GAAG,CAAC+B,OAAO,CAACoE,CAAC,CAAC,cAAAK,cAAA,uBAAdA,cAAA,CAAgBtI,IAAI,KAAI,EAAE;UAC7C;UACA,MAAMwI,WAAW,GAAGD,UAAU,CAACE,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAACA,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;UACtE;UACAJ,GAAG,IAAI,KAAKG,WAAW,GAAG;QAC5B;MACF,CAAC,MAAM;QACL;QACA,KAAK,IAAIP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG7G,OAAO,CAACe,MAAM,EAAE8F,CAAC,EAAE,EAAE;UACvCI,GAAG,IAAI,KAAK;QACd;MACF;;MAEA;MACAH,UAAU,IAAIG,GAAG,GAAG,IAAI;IAC1B,CAAC,CAAC;;IAEF;IACA,MAAMK,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACT,UAAU,CAAC,EAAE;MAAEU,IAAI,EAAE;IAA0B,CAAC,CAAC;IACxE,MAAM7F,GAAG,GAAGW,GAAG,CAACC,eAAe,CAAC+E,IAAI,CAAC;;IAErC;IACA,MAAMG,IAAI,GAAGrD,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;IACxCoD,IAAI,CAACC,YAAY,CAAC,MAAM,EAAE/F,GAAG,CAAC;IAC9B8F,IAAI,CAACC,YAAY,CAAC,UAAU,EAAE,iBAAiB,CAAC;IAChDD,IAAI,CAACE,KAAK,CAACC,UAAU,GAAG,QAAQ;;IAEhC;IACAxD,QAAQ,CAACyD,IAAI,CAACC,WAAW,CAACL,IAAI,CAAC;IAC/BA,IAAI,CAACM,KAAK,CAAC,CAAC;IACZ3D,QAAQ,CAACyD,IAAI,CAACG,WAAW,CAACP,IAAI,CAAC;EACjC,CAAC;EAED,oBACExJ,OAAA;IAAKgK,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBjK,OAAA;MAAAiK,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAG1BrK,OAAA;MAAAiK,QAAA,eACEjK,OAAA;QACEuJ,IAAI,EAAC,MAAM;QACXe,MAAM,EAAC,SAAS;QAChBC,QAAQ;QACRC,QAAQ,EAAE5G;MAAkB;QAAAsG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,EAGL9J,MAAM,CAACuC,MAAM,GAAG,CAAC,iBAChB9C,OAAA;MAAKgK,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC9BjK,OAAA;QAAAiK,QAAA,EAAI;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACtBrK,OAAA;QAAKgK,SAAS,EAAC,kBAAkB;QAAAC,QAAA,EAC9B1J,MAAM,CAAC4D,GAAG,CAAC,CAAC1B,GAAG,EAAEQ,KAAK,kBACrBjD,OAAA;UAEEgK,SAAS,EAAE,mBAAmB/G,KAAK,KAAKxC,iBAAiB,GAAG,UAAU,GAAG,EAAE,EAAG;UAC9EgK,OAAO,EAAEA,CAAA,KAAM7F,iBAAiB,CAAC3B,KAAK,CAAE;UAAAgH,QAAA,gBAExCjK,OAAA;YAAKyD,GAAG,EAAEhB,GAAG,CAACiB,GAAI;YAACgH,GAAG,EAAE,aAAazH,KAAK,GAAG,CAAC;UAAG;YAAAiH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACpDrK,OAAA;YAAAiK,QAAA,EAAOxH,GAAG,CAAC8B,QAAQ,IAAI,SAAStB,KAAK,GAAG,CAAC;UAAE;YAAAiH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC;QAAA,GAL9CpH,KAAK;UAAAiH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAMP,CACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN,EAGA9J,MAAM,CAACuC,MAAM,GAAG,CAAC,iBAChB9C,OAAA;MAAKgK,SAAS,EAAC,6BAA6B;MAAAC,QAAA,GAEzClI,OAAO,CAACe,MAAM,GAAG,CAAC,iBACjB9C,OAAA;QAAKgK,SAAS,EAAC,kBAAkB;QAAAC,QAAA,gBAC/BjK,OAAA;UAAAiK,QAAA,EAAI;QAAmC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC5CrK,OAAA;UAAKgK,SAAS,EAAC,iBAAiB;UAAAC,QAAA,gBAC9BjK,OAAA;YAAQyK,OAAO,EAAE3F,SAAU;YAACkF,SAAS,EAAC,gBAAgB;YAAAC,QAAA,EAAC;UAAU;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAC1ErK,OAAA;YAAQyK,OAAO,EAAEzF,YAAa;YAACgF,SAAS,EAAC,gBAAgB;YAAAC,QAAA,EAAC;UAAa;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC7E,CAAC,eACNrK,OAAA;UAAKgK,SAAS,EAAC,aAAa;UAAAC,QAAA,EACzBlI,OAAO,CAACoC,GAAG,CAAC,CAACnB,MAAM,EAAEC,KAAK,kBACzBjD,OAAA;YAEEgK,SAAS,EAAE,cAAc/G,KAAK,KAAKpB,kBAAkB,GAAG,UAAU,GAAG,EAAE,EAAG;YAAAoI,QAAA,EAEzE9H,iBAAiB,KAAKc,KAAK,gBAC1BjD,OAAA;cAAKgK,SAAS,EAAC,kBAAkB;cAAAC,QAAA,gBAC/BjK,OAAA;gBACEuJ,IAAI,EAAC,MAAM;gBACXrB,KAAK,EAAE7F,aAAc;gBACrBmI,QAAQ,EAAE/B,sBAAuB;gBACjCgC,OAAO,EAAG5G,CAAC,IAAKA,CAAC,CAAC8G,eAAe,CAAC,CAAE;gBACpCC,SAAS;cAAA;gBAAAV,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACV,CAAC,eACFrK,OAAA;gBAAKgK,SAAS,EAAC,cAAc;gBAAAC,QAAA,gBAC3BjK,OAAA;kBACEyK,OAAO,EAAG5G,CAAC,IAAK;oBACdA,CAAC,CAAC8G,eAAe,CAAC,CAAC;oBACnBrC,cAAc,CAAC,CAAC;kBAClB,CAAE;kBACF0B,SAAS,EAAC,aAAa;kBAAAC,QAAA,EACxB;gBAED;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC,eACTrK,OAAA;kBACEyK,OAAO,EAAG5G,CAAC,IAAK;oBACdA,CAAC,CAAC8G,eAAe,CAAC,CAAC;oBACnBnC,oBAAoB,CAAC,CAAC;kBACxB,CAAE;kBACFwB,SAAS,EAAC,eAAe;kBAAAC,QAAA,EAC1B;gBAED;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACN,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH,CAAC,gBAENrK,OAAA;cACEgK,SAAS,EAAC,qBAAqB;cAC/BS,OAAO,EAAEA,CAAA,KAAMhF,kBAAkB,CAACxC,KAAK,CAAE;cAAAgH,QAAA,gBAEzCjK,OAAA;gBAAAiK,QAAA,EAAOjH,MAAM,CAACf;cAAI;gBAAAiI,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC,eAC1BrK,OAAA;gBACEgK,SAAS,EAAC,kBAAkB;gBAC5BS,OAAO,EAAG5G,CAAC,IAAK;kBACdA,CAAC,CAAC8G,eAAe,CAAC,CAAC;kBACnBtC,sBAAsB,CAACpF,KAAK,CAAC;gBAC/B,CAAE;gBAAAgH,QAAA,EACH;cAED;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACN;UACN,GAjDIpH,KAAK;YAAAiH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAkDP,CACN;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CACN,eAGDrK,OAAA;QAAKgK,SAAS,EAAC,mBAAmB;QAAAC,QAAA,gBAChCjK,OAAA;UAAAiK,QAAA,GAAI,wBAAsB,EAAClI,OAAO,CAACF,kBAAkB,CAAC,CAACI,IAAI;QAAA;UAAAiI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACjErK,OAAA;UAAKgK,SAAS,EAAC,kBAAkB;UAAAC,QAAA,gBAC/BjK,OAAA;YAAAiK,QAAA,gBACEjK,OAAA;cAAAiK,QAAA,EAAO;YAAM;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eACrBrK,OAAA;cACEuJ,IAAI,EAAC,QAAQ;cACbtH,IAAI,EAAC,MAAM;cACXiG,KAAK,EAAE3G,WAAW,CAACE,IAAK;cACxB+I,QAAQ,EAAEvC,oCAAqC;cAC/C4C,WAAW,EAAC;YAAO;cAAAX,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACpB,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC,eACNrK,OAAA;YAAAiK,QAAA,gBACEjK,OAAA;cAAAiK,QAAA,EAAO;YAAM;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eACrBrK,OAAA;cACEuJ,IAAI,EAAC,QAAQ;cACbtH,IAAI,EAAC,MAAM;cACXiG,KAAK,EAAE3G,WAAW,CAACG,IAAK;cACxB8I,QAAQ,EAAEvC,oCAAqC;cAC/C4C,WAAW,EAAC;YAAO;cAAAX,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACpB,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC,eACNrK,OAAA;YAAAiK,QAAA,gBACEjK,OAAA;cAAAiK,QAAA,EAAO;YAAM;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eACrBrK,OAAA;cACEuJ,IAAI,EAAC,QAAQ;cACbtH,IAAI,EAAC,MAAM;cACXiG,KAAK,EAAE3G,WAAW,CAACI,IAAK;cACxB6I,QAAQ,EAAEvC,oCAAqC;cAC/C4C,WAAW,EAAC;YAAO;cAAAX,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACpB,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC,eACNrK,OAAA;YAAAiK,QAAA,gBACEjK,OAAA;cAAAiK,QAAA,EAAO;YAAM;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eACrBrK,OAAA;cACEuJ,IAAI,EAAC,QAAQ;cACbtH,IAAI,EAAC,MAAM;cACXiG,KAAK,EAAE3G,WAAW,CAACK,IAAK;cACxB4I,QAAQ,EAAEvC,oCAAqC;cAC/C4C,WAAW,EAAC;YAAO;cAAAX,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACpB,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN,EAGA9J,MAAM,CAACuC,MAAM,GAAG,CAAC,iBAChB9C,OAAA;MAAKgK,SAAS,EAAC,SAAS;MAAAC,QAAA,gBACtBjK,OAAA;QAAQyK,OAAO,EAAErD,YAAa;QAAC0D,QAAQ,EAAEjK,SAAU;QAAAoJ,QAAA,EAChDpJ,SAAS,GAAG,eAAe,GAAG;MAA2B;QAAAqJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpD,CAAC,eACTrK,OAAA;QAAQyK,OAAO,EAAElD,sBAAuB;QAACuD,QAAQ,EAAEjK,SAAU;QAACmJ,SAAS,EAAC,oBAAoB;QAAAC,QAAA,EACzFpJ,SAAS,GAAG,eAAe,GAAG;MAAwB;QAAAqJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjD,CAAC,eACTrK,OAAA;QAAQyK,OAAO,EAAE9C,eAAgB;QAACmD,QAAQ,EAAEjK,SAAU;QAACmJ,SAAS,EAAC,gBAAgB;QAAAC,QAAA,EAC9EpJ,SAAS,GAAG,cAAcE,aAAa,CAACE,OAAO,IAAIF,aAAa,CAACG,KAAK,KAAK,GAAG;MAAuB;QAAAgJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CACN,EAGA9J,MAAM,CAACuC,MAAM,GAAG,CAAC,iBAChB9C,OAAA;MAAKgK,SAAS,EAAC,yBAAyB;MAAAC,QAAA,gBAEtCjK,OAAA;QAAKgK,SAAS,EAAC,eAAe;QAAAC,QAAA,gBAC5BjK,OAAA;UAAAiK,QAAA,EAAI;QAAe;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACxBrK,OAAA;UAAQ+K,GAAG,EAAExI,SAAU;UAACmH,KAAK,EAAE;YAAEsB,QAAQ,EAAE;UAAQ;QAAE;UAAAd,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACxDrK,OAAA;UAAKgK,SAAS,EAAC,kBAAkB;UAAAC,QAAA,GAAC,QAC1B,EAAC9I,eAAe,CAACE,KAAK,EAAC,KAAG,EAACF,eAAe,CAACG,MAAM,EAAC,SAC1D;QAAA;UAAA4I,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,EAGL,EAAAlK,sBAAA,GAAAI,MAAM,CAACE,iBAAiB,CAAC,cAAAN,sBAAA,wBAAAC,sBAAA,GAAzBD,sBAAA,CAA2BqE,OAAO,cAAApE,sBAAA,uBAAlCA,sBAAA,CAAqCyB,kBAAkB,CAAC,kBACvD7B,OAAA;QAAKgK,SAAS,EAAC,eAAe;QAAAC,QAAA,gBAC5BjK,OAAA;UAAAiK,QAAA,GAAI,UAAQ,EAAClI,OAAO,CAACF,kBAAkB,CAAC,CAACI,IAAI,EAAC,GAAC;QAAA;UAAAiI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,EACnD9J,MAAM,CAACE,iBAAiB,CAAC,CAAC+D,OAAO,CAAC3C,kBAAkB,CAAC,CAAC6C,KAAK,gBAC1D1E,OAAA;UAAKgK,SAAS,EAAC,eAAe;UAAAC,QAAA,gBAC5BjK,OAAA;YAAAiK,QAAA,EAAG;UAAuD;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,eAC9DrK,OAAA;YAAAiK,QAAA,EAAG;UAAkB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,eACzBrK,OAAA;YAAAiK,QAAA,gBACEjK,OAAA;cAAAiK,QAAA,EAAI;YAAmC;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAC5CrK,OAAA;cAAAiK,QAAA,EAAI;YAAuC;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAChDrK,OAAA;cAAAiK,QAAA,EAAI;YAAqD;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC5D,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACF,CAAC,gBAENrK,OAAA;UACEyD,GAAG,EAAElD,MAAM,CAACE,iBAAiB,CAAC,CAAC+D,OAAO,CAAC3C,kBAAkB,CAAC,CAACK,gBAAiB;UAC5EwI,GAAG,EAAC,SAAS;UACbhB,KAAK,EAAE;YAAEsB,QAAQ,EAAE;UAAQ;QAAE;UAAAd,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC9B,CACF;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CACN,EAGA,EAAAhK,sBAAA,GAAAE,MAAM,CAACE,iBAAiB,CAAC,cAAAJ,sBAAA,wBAAAC,sBAAA,GAAzBD,sBAAA,CAA2BmE,OAAO,cAAAlE,sBAAA,uBAAlCA,sBAAA,CAAqCuB,kBAAkB,CAAC,kBACvD7B,OAAA;QAAKgK,SAAS,EAAC,QAAQ;QAAAC,QAAA,gBACrBjK,OAAA;UAAAiK,QAAA,GAAI,sBAAoB,EAAClI,OAAO,CAACF,kBAAkB,CAAC,CAACI,IAAI,EAAC,GAAC;QAAA;UAAAiI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,EAC/D9J,MAAM,CAACE,iBAAiB,CAAC,CAAC+D,OAAO,CAAC3C,kBAAkB,CAAC,CAAC6C,KAAK,gBAC1D1E,OAAA;UAAKgK,SAAS,EAAC,eAAe;UAAAC,QAAA,EAC3B1J,MAAM,CAACE,iBAAiB,CAAC,CAAC+D,OAAO,CAAC3C,kBAAkB,CAAC,CAAClB;QAAI;UAAAuJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxD,CAAC,gBAENrK,OAAA;UAAAiK,QAAA,EAAM1J,MAAM,CAACE,iBAAiB,CAAC,CAAC+D,OAAO,CAAC3C,kBAAkB,CAAC,CAAClB;QAAI;UAAAuJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CACvE;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CACN,EAGAxJ,SAAS,iBAAIb,OAAA;MAAAiK,QAAA,EAAG;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,EAGvC9J,MAAM,CAACuC,MAAM,GAAG,CAAC,IAAIvC,MAAM,CAAC0K,IAAI,CAACxI,GAAG,IAAIA,GAAG,CAAC+B,OAAO,IAAI/B,GAAG,CAAC+B,OAAO,CAACyG,IAAI,CAACvD,MAAM,IAAIA,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAE/G,IAAI,CAAC,CAAC,iBAC/FX,OAAA;MAAKgK,SAAS,EAAC,kBAAkB;MAAAC,QAAA,eAC/BjK,OAAA;QAAQyK,OAAO,EAAE/B,WAAY;QAACsB,SAAS,EAAC,eAAe;QAAAC,QAAA,EAAC;MAExD;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACnK,EAAA,CAryBQD,GAAG;AAAAiL,EAAA,GAAHjL,GAAG;AAuyBZ,eAAeA,GAAG;AAAC,IAAAiL,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}