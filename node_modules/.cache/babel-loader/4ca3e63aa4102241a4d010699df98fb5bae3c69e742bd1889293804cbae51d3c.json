{"ast":null,"code":"var _jsxFileName = \"/Users/yoonchulroh/Projects/ocr-app/src/App.js\",\n  _s = $RefreshSig$();\n// src/App.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport Tesseract from 'tesseract.js';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  var _images$currentImageI5, _images$currentImageI6, _images$currentImageI7, _images$currentImageI8, _images$currentImageI9, _images$currentImageI10;\n  const [images, setImages] = useState([]);\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\n  const [text, setText] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [batchProgress, setBatchProgress] = useState({\n    current: 0,\n    total: 0\n  });\n  const [imageDimensions, setImageDimensions] = useState({\n    width: 0,\n    height: 0\n  });\n  const [coordinates, setCoordinates] = useState({\n    minX: 0,\n    maxX: 0,\n    minY: 0,\n    maxY: 0\n  });\n  const [currentRegionIndex, setCurrentRegionIndex] = useState(0);\n  // Shared regions across all images\n  const [regions, setRegions] = useState([{\n    coordinates: {\n      minX: 0,\n      maxX: 0,\n      minY: 0,\n      maxY: 0\n    },\n    text: '',\n    croppedImageData: null\n  }]);\n  const canvasRef = useRef(null);\n\n  // Draw rectangles on image\n  const drawRectangles = img => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Set canvas size to match image\n    canvas.width = img.width;\n    canvas.height = img.height;\n\n    // Draw the image\n    ctx.drawImage(img, 0, 0);\n\n    // Draw all regions with different colors\n    if (regions.length > 0) {\n      regions.forEach((region, index) => {\n        // Different color for current region\n        ctx.strokeStyle = index === currentRegionIndex ? 'red' : 'blue';\n        ctx.lineWidth = 2;\n        ctx.strokeRect(region.coordinates.minX, region.coordinates.minY, region.coordinates.maxX - region.coordinates.minX, region.coordinates.maxY - region.coordinates.minY);\n\n        // Add region number label\n        ctx.fillStyle = index === currentRegionIndex ? 'red' : 'blue';\n        ctx.font = '14px Arial';\n        ctx.fillText(`Region ${index + 1}`, region.coordinates.minX, region.coordinates.minY - 5);\n      });\n    }\n  };\n\n  // Update rectangles when coordinates or regions change\n  useEffect(() => {\n    if (images[currentImageIndex]) {\n      const img = new Image();\n      img.src = images[currentImageIndex].url;\n      img.onload = () => {\n        drawRectangles(img);\n        setImageDimensions({\n          width: img.width,\n          height: img.height\n        });\n      };\n    }\n  }, [coordinates, currentImageIndex, images, currentRegionIndex, regions]);\n\n  // Handle image upload\n  const handleImageChange = e => {\n    if (e.target.files) {\n      const newImages = Array.from(e.target.files).map(file => ({\n        url: URL.createObjectURL(file),\n        results: Array(regions.length).fill(null).map(() => ({\n          text: '',\n          croppedImageData: null\n        }))\n      }));\n      setImages(prev => [...prev, ...newImages]);\n      setCurrentImageIndex(prev => prev + newImages.length - 1);\n    }\n  };\n\n  // Handle image selection\n  const handleImageSelect = index => {\n    var _images$index;\n    setCurrentImageIndex(index);\n    setCurrentRegionIndex(0);\n\n    // Update text if available for the current region\n    if ((_images$index = images[index]) !== null && _images$index !== void 0 && _images$index.results && images[index].results[0]) {\n      setText(images[index].results[0].text || '');\n    } else {\n      setText('');\n    }\n  };\n\n  // Add a new region\n  const addRegion = () => {\n    // Create new region object\n    const newRegion = {\n      coordinates: {\n        minX: 0,\n        maxX: 0,\n        minY: 0,\n        maxY: 0\n      },\n      text: '',\n      croppedImageData: null\n    };\n\n    // Add the new region to shared regions\n    setRegions(prev => [...prev, newRegion]);\n\n    // Update the images to include results for the new region\n    setImages(prev => {\n      return prev.map(img => ({\n        ...img,\n        results: [...(img.results || []), {\n          text: '',\n          croppedImageData: null\n        }]\n      }));\n    });\n\n    // Set the current region to the new one\n    setCurrentRegionIndex(regions.length);\n    setCoordinates({\n      minX: 0,\n      maxX: 0,\n      minY: 0,\n      maxY: 0\n    });\n    setText('');\n  };\n\n  // Delete current region\n  const deleteRegion = () => {\n    var _images$currentImageI, _images$currentImageI2;\n    // Don't allow deleting if only one region\n    if (regions.length <= 1) {\n      alert(\"Can't delete the only region. At least one region is required.\");\n      return;\n    }\n    const regionIndexToDelete = currentRegionIndex;\n\n    // Remove the region from shared regions\n    setRegions(prev => {\n      const updatedRegions = [...prev];\n      updatedRegions.splice(regionIndexToDelete, 1);\n      return updatedRegions;\n    });\n\n    // Update images to remove results for the deleted region\n    setImages(prev => {\n      return prev.map(img => {\n        const updatedResults = [...(img.results || [])];\n        updatedResults.splice(regionIndexToDelete, 1);\n        return {\n          ...img,\n          results: updatedResults\n        };\n      });\n    });\n\n    // Set the current region index\n    setCurrentRegionIndex(prev => prev >= regions.length - 1 ? regions.length - 2 : prev);\n\n    // Update coordinates to the new current region\n    if (regions.length > 1) {\n      const newIndex = currentRegionIndex >= regions.length - 1 ? regions.length - 2 : currentRegionIndex;\n      setCoordinates(regions[newIndex].coordinates);\n    }\n\n    // Update text\n    const newIndex = currentRegionIndex >= regions.length - 1 ? regions.length - 2 : currentRegionIndex;\n    if ((_images$currentImageI = images[currentImageIndex]) !== null && _images$currentImageI !== void 0 && (_images$currentImageI2 = _images$currentImageI.results) !== null && _images$currentImageI2 !== void 0 && _images$currentImageI2[newIndex]) {\n      setText(images[currentImageIndex].results[newIndex].text || '');\n    } else {\n      setText('');\n    }\n  };\n\n  // Handle region selection\n  const handleRegionSelect = index => {\n    var _images$currentImageI3, _images$currentImageI4;\n    setCurrentRegionIndex(index);\n    setCoordinates(regions[index].coordinates);\n\n    // Update text based on the selected region for the current image\n    if ((_images$currentImageI3 = images[currentImageIndex]) !== null && _images$currentImageI3 !== void 0 && (_images$currentImageI4 = _images$currentImageI3.results) !== null && _images$currentImageI4 !== void 0 && _images$currentImageI4[index]) {\n      setText(images[currentImageIndex].results[index].text || '');\n    } else {\n      setText('');\n    }\n  };\n\n  // Crop image using coordinates\n  const cropImage = (imageElement, coords) => {\n    try {\n      // Validate coordinates\n      if (coords.minX >= coords.maxX || coords.minY >= coords.maxY) {\n        console.warn(\"Invalid coordinates: min values must be less than max values\");\n        return null;\n      }\n\n      // Make sure coordinates are within image bounds\n      const width = imageElement.width;\n      const height = imageElement.height;\n      if (coords.minX < 0 || coords.minY < 0 || coords.maxX > width || coords.maxY > height) {\n        console.warn(\"Invalid coordinates: coordinates out of image bounds\");\n        return null;\n      }\n\n      // Calculate dimensions\n      const cropWidth = coords.maxX - coords.minX;\n      const cropHeight = coords.maxY - coords.minY;\n\n      // Check that we have a valid area to crop\n      if (cropWidth <= 0 || cropHeight <= 0) {\n        console.warn(\"Invalid coordinates: resulting crop has no area\");\n        return null;\n      }\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n\n      // Set canvas size to the specified dimensions\n      canvas.width = cropWidth;\n      canvas.height = cropHeight;\n\n      // Draw the cropped region\n      ctx.drawImage(imageElement, coords.minX, coords.minY, cropWidth, cropHeight, 0, 0, cropWidth, cropHeight);\n      return canvas.toDataURL('image/png');\n    } catch (error) {\n      console.error(\"Error cropping image:\", error);\n      return null;\n    }\n  };\n\n  // Process single region with OCR\n  const processRegionOCR = (imageUrl, regionCoords) => {\n    return new Promise((resolve, reject) => {\n      try {\n        const img = new Image();\n        img.onerror = () => {\n          console.error(\"Failed to load image\");\n          resolve({\n            text: \"Error: Failed to load image\",\n            croppedImageData: null,\n            error: true\n          });\n        };\n        img.onload = () => {\n          const croppedImageData = cropImage(img, regionCoords);\n\n          // Skip OCR if crop failed\n          if (!croppedImageData) {\n            console.warn(\"Skipping OCR due to invalid crop\");\n            resolve({\n              text: \"Error: Invalid coordinates for this region\",\n              croppedImageData: null,\n              error: true\n            });\n            return;\n          }\n          Tesseract.recognize(croppedImageData, 'eng', {\n            logger: m => console.log(m)\n          }).then(({\n            data: {\n              text\n            }\n          }) => {\n            resolve({\n              text,\n              croppedImageData,\n              error: false\n            });\n          }).catch(error => {\n            console.error(\"Tesseract error:\", error);\n            resolve({\n              text: \"Error: OCR processing failed\",\n              croppedImageData,\n              error: true\n            });\n          });\n        };\n        img.src = imageUrl;\n      } catch (error) {\n        console.error(\"Unexpected error:\", error);\n        resolve({\n          text: \"Error: Unexpected error occurred\",\n          croppedImageData: null,\n          error: true\n        });\n      }\n    });\n  };\n\n  // Process image and run OCR for current region\n  const handleRunOCR = () => {\n    if (!images[currentImageIndex]) {\n      alert('Please upload an image first');\n      return;\n    }\n    setIsLoading(true);\n    processRegionOCR(images[currentImageIndex].url, regions[currentRegionIndex].coordinates).then(({\n      text,\n      croppedImageData,\n      error\n    }) => {\n      setText(text);\n\n      // Update regions with the coordinates\n      setRegions(prev => {\n        const newRegions = [...prev];\n        newRegions[currentRegionIndex] = {\n          ...newRegions[currentRegionIndex],\n          coordinates: regions[currentRegionIndex].coordinates,\n          hasError: error\n        };\n        return newRegions;\n      });\n\n      // Update the current image's results for the current region\n      setImages(prev => {\n        const newImages = [...prev];\n        if (!newImages[currentImageIndex].results) {\n          newImages[currentImageIndex].results = Array(regions.length).fill(null).map(() => ({\n            text: '',\n            croppedImageData: null,\n            error: false\n          }));\n        }\n        newImages[currentImageIndex].results[currentRegionIndex] = {\n          text,\n          croppedImageData,\n          error\n        };\n        return newImages;\n      });\n      setIsLoading(false);\n    }).catch(error => {\n      console.error(error);\n      setIsLoading(false);\n      alert(\"An unexpected error occurred. Please try again.\");\n    });\n  };\n\n  // Process all regions in current image\n  const handleRunOCRAllRegions = async () => {\n    if (!images[currentImageIndex]) {\n      alert('Please upload an image first');\n      return;\n    }\n    if (regions.length === 0) {\n      alert('No regions defined');\n      return;\n    }\n    setIsLoading(true);\n    setBatchProgress({\n      current: 0,\n      total: regions.length\n    });\n    try {\n      const results = await Promise.all(regions.map(async (region, idx) => {\n        try {\n          const result = await processRegionOCR(images[currentImageIndex].url, region.coordinates);\n          setBatchProgress(prev => ({\n            ...prev,\n            current: idx + 1\n          }));\n          return result;\n        } catch (error) {\n          console.error(`Error processing region ${idx + 1}:`, error);\n          setBatchProgress(prev => ({\n            ...prev,\n            current: idx + 1\n          }));\n          return {\n            text: `Error processing region ${idx + 1}`,\n            croppedImageData: null,\n            error: true\n          };\n        }\n      }));\n\n      // Update the current image's results\n      setImages(prev => {\n        const newImages = [...prev];\n        newImages[currentImageIndex].results = results;\n        return newImages;\n      });\n\n      // Update text for current region\n      setText(results[currentRegionIndex].text);\n      setIsLoading(false);\n      setBatchProgress({\n        current: 0,\n        total: 0\n      });\n    } catch (error) {\n      console.error(\"Failed to process regions:\", error);\n      setIsLoading(false);\n      setBatchProgress({\n        current: 0,\n        total: 0\n      });\n      alert(\"An error occurred while processing regions. Some regions may not have been processed correctly.\");\n    }\n  };\n\n  // Process all images with OCR (all regions)\n  const handleRunOCRAll = async () => {\n    if (images.length === 0) {\n      alert('Please upload images first');\n      return;\n    }\n    setIsLoading(true);\n    const totalOperations = images.length * regions.length;\n    setBatchProgress({\n      current: 0,\n      total: totalOperations\n    });\n    let processedCount = 0;\n    try {\n      var _updatedImages$curren, _updatedImages$curren2;\n      const updatedImages = await Promise.all(images.map(async img => {\n        try {\n          const results = await Promise.all(regions.map(async region => {\n            try {\n              const result = await processRegionOCR(img.url, region.coordinates);\n              processedCount++;\n              setBatchProgress({\n                current: processedCount,\n                total: totalOperations\n              });\n              return result;\n            } catch (error) {\n              console.error(\"Error processing region:\", error);\n              processedCount++;\n              setBatchProgress({\n                current: processedCount,\n                total: totalOperations\n              });\n              return {\n                text: \"Error processing this region\",\n                croppedImageData: null,\n                error: true\n              };\n            }\n          }));\n          return {\n            ...img,\n            results\n          };\n        } catch (error) {\n          console.error(\"Error processing image:\", error);\n          return {\n            ...img,\n            results: Array(regions.length).fill(null).map(() => ({\n              text: \"Error processing this image\",\n              croppedImageData: null,\n              error: true\n            }))\n          };\n        }\n      }));\n      setImages(updatedImages);\n\n      // Update text for current image and region\n      if ((_updatedImages$curren = updatedImages[currentImageIndex]) !== null && _updatedImages$curren !== void 0 && (_updatedImages$curren2 = _updatedImages$curren.results) !== null && _updatedImages$curren2 !== void 0 && _updatedImages$curren2[currentRegionIndex]) {\n        setText(updatedImages[currentImageIndex].results[currentRegionIndex].text || '');\n      }\n      setIsLoading(false);\n      setBatchProgress({\n        current: 0,\n        total: 0\n      });\n    } catch (error) {\n      console.error(\"Failed to process all images:\", error);\n      setIsLoading(false);\n      setBatchProgress({\n        current: 0,\n        total: 0\n      });\n      alert(\"An error occurred while processing images. Some images may not have been processed correctly.\");\n    }\n  };\n\n  // Handle coordinate changes for current region\n  const handleCurrentRegionCoordinatesChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    const newCoordinates = {\n      ...coordinates,\n      [name]: parseInt(value) || 0\n    };\n    setCoordinates(newCoordinates);\n\n    // Update coordinates in the regions array\n    setRegions(prev => {\n      const newRegions = [...prev];\n      newRegions[currentRegionIndex].coordinates = newCoordinates;\n      return newRegions;\n    });\n  };\n\n  // Export results as CSV\n  const exportToCSV = () => {\n    // Create CSV header\n    let csvContent = \"Image Name,Region,OCR Result\\n\";\n\n    // Add each image and region data as rows\n    images.forEach((img, imgIndex) => {\n      if (img.results) {\n        img.results.forEach((result, regionIndex) => {\n          // Clean text data by escaping quotes and removing line breaks\n          const cleanedText = result.text ? result.text.replace(/\"/g, '\"\"').replace(/\\n/g, ' ') : '';\n          // Add row to CSV\n          csvContent += `\"Image ${imgIndex + 1}\",\"Region ${regionIndex + 1}\",\"${cleanedText}\"\\n`;\n        });\n      }\n    });\n\n    // Create a blob with the CSV content\n    const blob = new Blob([csvContent], {\n      type: 'text/csv;charset=utf-8;'\n    });\n    const url = URL.createObjectURL(blob);\n\n    // Create a link element to trigger download\n    const link = document.createElement('a');\n    link.setAttribute('href', url);\n    link.setAttribute('download', 'ocr_results.csv');\n    link.style.visibility = 'hidden';\n\n    // Add to document, click to download, then remove\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"OCR Image to Text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 528,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        multiple: true,\n        onChange: handleImageChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 531,\n      columnNumber: 7\n    }, this), images.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-selection\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Select Image:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 543,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-thumbnails\",\n        children: images.map((img, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `image-thumbnail ${index === currentImageIndex ? 'selected' : ''}`,\n          onClick: () => handleImageSelect(index),\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: img.url,\n            alt: `Thumbnail ${index + 1}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 551,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Image \", index + 1]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 552,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 546,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 544,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 542,\n      columnNumber: 9\n    }, this), images.length > 0 && regions.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"region-selection\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Regions (Shared Across All Images):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 562,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"region-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addRegion,\n          className: \"control-button\",\n          children: \"Add Region\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 564,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: deleteRegion,\n          className: \"control-button\",\n          children: \"Delete Region\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 565,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 563,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"region-tabs\",\n        children: regions.map((region, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `region-tab ${index === currentRegionIndex ? 'selected' : ''}`,\n          onClick: () => handleRegionSelect(index),\n          children: [\"Region \", index + 1]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 569,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 561,\n      columnNumber: 9\n    }, this), images.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"coordinates-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Enter Coordinates for Region \", currentRegionIndex + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 584,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"coordinate-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Min X:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 587,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            name: \"minX\",\n            value: coordinates.minX,\n            onChange: handleCurrentRegionCoordinatesChange,\n            placeholder: \"Min X\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 588,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 586,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Max X:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 597,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            name: \"maxX\",\n            value: coordinates.maxX,\n            onChange: handleCurrentRegionCoordinatesChange,\n            placeholder: \"Max X\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 598,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 596,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Min Y:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 607,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            name: \"minY\",\n            value: coordinates.minY,\n            onChange: handleCurrentRegionCoordinatesChange,\n            placeholder: \"Min Y\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 608,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 606,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Max Y:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 617,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            name: \"maxY\",\n            value: coordinates.maxY,\n            onChange: handleCurrentRegionCoordinatesChange,\n            placeholder: \"Max Y\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 618,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 616,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 585,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 583,\n      columnNumber: 9\n    }, this), images.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"run-ocr\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRunOCR,\n        disabled: isLoading,\n        children: isLoading ? 'Processing...' : 'Run OCR on Current Region'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 633,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRunOCRAllRegions,\n        disabled: isLoading,\n        className: \"run-regions-button\",\n        children: isLoading ? 'Processing...' : 'Run OCR on All Regions'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 636,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRunOCRAll,\n        disabled: isLoading,\n        className: \"run-all-button\",\n        children: isLoading ? `Processing ${batchProgress.current}/${batchProgress.total}...` : 'Run OCR on All Images'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 639,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 632,\n      columnNumber: 9\n    }, this), images.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-preview-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-preview\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Original Image:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 650,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: canvasRef,\n          style: {\n            maxWidth: '400px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 651,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image-dimensions\",\n          children: [\"Size: \", imageDimensions.width, \" x \", imageDimensions.height, \" pixels\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 652,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 649,\n        columnNumber: 11\n      }, this), ((_images$currentImageI5 = images[currentImageIndex]) === null || _images$currentImageI5 === void 0 ? void 0 : (_images$currentImageI6 = _images$currentImageI5.results) === null || _images$currentImageI6 === void 0 ? void 0 : (_images$currentImageI7 = _images$currentImageI6[currentRegionIndex]) === null || _images$currentImageI7 === void 0 ? void 0 : _images$currentImageI7.croppedImageData) && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-preview\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Cropped Region \", currentRegionIndex + 1, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 660,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: images[currentImageIndex].results[currentRegionIndex].croppedImageData,\n          alt: \"Cropped\",\n          style: {\n            maxWidth: '400px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 661,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 659,\n        columnNumber: 13\n      }, this), ((_images$currentImageI8 = images[currentImageIndex]) === null || _images$currentImageI8 === void 0 ? void 0 : (_images$currentImageI9 = _images$currentImageI8.results) === null || _images$currentImageI9 === void 0 ? void 0 : (_images$currentImageI10 = _images$currentImageI9[currentRegionIndex]) === null || _images$currentImageI10 === void 0 ? void 0 : _images$currentImageI10.text) && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Extracted Text from Region \", currentRegionIndex + 1, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 672,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: images[currentImageIndex].results[currentRegionIndex].text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 673,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 671,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 647,\n      columnNumber: 9\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Processing image...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 680,\n      columnNumber: 21\n    }, this), images.length > 0 && images.some(img => img.results && img.results.some(result => result === null || result === void 0 ? void 0 : result.text)) && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"export-container\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: exportToCSV,\n        className: \"export-button\",\n        children: \"Export Results as CSV\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 685,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 684,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 527,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"rnaTGVMrOzled1vtO5e/uNx4OP4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Tesseract","jsxDEV","_jsxDEV","App","_s","_images$currentImageI5","_images$currentImageI6","_images$currentImageI7","_images$currentImageI8","_images$currentImageI9","_images$currentImageI10","images","setImages","currentImageIndex","setCurrentImageIndex","text","setText","isLoading","setIsLoading","batchProgress","setBatchProgress","current","total","imageDimensions","setImageDimensions","width","height","coordinates","setCoordinates","minX","maxX","minY","maxY","currentRegionIndex","setCurrentRegionIndex","regions","setRegions","croppedImageData","canvasRef","drawRectangles","img","canvas","ctx","getContext","drawImage","length","forEach","region","index","strokeStyle","lineWidth","strokeRect","fillStyle","font","fillText","Image","src","url","onload","handleImageChange","e","target","files","newImages","Array","from","map","file","URL","createObjectURL","results","fill","prev","handleImageSelect","_images$index","addRegion","newRegion","deleteRegion","_images$currentImageI","_images$currentImageI2","alert","regionIndexToDelete","updatedRegions","splice","updatedResults","newIndex","handleRegionSelect","_images$currentImageI3","_images$currentImageI4","cropImage","imageElement","coords","console","warn","cropWidth","cropHeight","document","createElement","toDataURL","error","processRegionOCR","imageUrl","regionCoords","Promise","resolve","reject","onerror","recognize","logger","m","log","then","data","catch","handleRunOCR","newRegions","hasError","handleRunOCRAllRegions","all","idx","result","handleRunOCRAll","totalOperations","processedCount","_updatedImages$curren","_updatedImages$curren2","updatedImages","handleCurrentRegionCoordinatesChange","name","value","newCoordinates","parseInt","exportToCSV","csvContent","imgIndex","regionIndex","cleanedText","replace","blob","Blob","type","link","setAttribute","style","visibility","body","appendChild","click","removeChild","className","children","fileName","_jsxFileName","lineNumber","columnNumber","accept","multiple","onChange","onClick","alt","placeholder","disabled","ref","maxWidth","some","_c","$RefreshReg$"],"sources":["/Users/yoonchulroh/Projects/ocr-app/src/App.js"],"sourcesContent":["// src/App.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport Tesseract from 'tesseract.js';\nimport './App.css';\n\nfunction App() {\n  const [images, setImages] = useState([]);\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\n  const [text, setText] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [batchProgress, setBatchProgress] = useState({ current: 0, total: 0 });\n  const [imageDimensions, setImageDimensions] = useState({ width: 0, height: 0 });\n  const [coordinates, setCoordinates] = useState({\n    minX: 0,\n    maxX: 0,\n    minY: 0,\n    maxY: 0\n  });\n  const [currentRegionIndex, setCurrentRegionIndex] = useState(0);\n  // Shared regions across all images\n  const [regions, setRegions] = useState([{\n    coordinates: { minX: 0, maxX: 0, minY: 0, maxY: 0 },\n    text: '',\n    croppedImageData: null\n  }]);\n  const canvasRef = useRef(null);\n\n  // Draw rectangles on image\n  const drawRectangles = (img) => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    \n    // Set canvas size to match image\n    canvas.width = img.width;\n    canvas.height = img.height;\n    \n    // Draw the image\n    ctx.drawImage(img, 0, 0);\n    \n    // Draw all regions with different colors\n    if (regions.length > 0) {\n      regions.forEach((region, index) => {\n        // Different color for current region\n        ctx.strokeStyle = index === currentRegionIndex ? 'red' : 'blue';\n        ctx.lineWidth = 2;\n        ctx.strokeRect(\n          region.coordinates.minX,\n          region.coordinates.minY,\n          region.coordinates.maxX - region.coordinates.minX,\n          region.coordinates.maxY - region.coordinates.minY\n        );\n        \n        // Add region number label\n        ctx.fillStyle = index === currentRegionIndex ? 'red' : 'blue';\n        ctx.font = '14px Arial';\n        ctx.fillText(`Region ${index + 1}`, region.coordinates.minX, region.coordinates.minY - 5);\n      });\n    }\n  };\n\n  // Update rectangles when coordinates or regions change\n  useEffect(() => {\n    if (images[currentImageIndex]) {\n      const img = new Image();\n      img.src = images[currentImageIndex].url;\n      img.onload = () => {\n        drawRectangles(img);\n        setImageDimensions({ width: img.width, height: img.height });\n      };\n    }\n  }, [coordinates, currentImageIndex, images, currentRegionIndex, regions]);\n\n  // Handle image upload\n  const handleImageChange = (e) => {\n    if (e.target.files) {\n      const newImages = Array.from(e.target.files).map(file => ({\n        url: URL.createObjectURL(file),\n        results: Array(regions.length).fill(null).map(() => ({\n          text: '',\n          croppedImageData: null\n        }))\n      }));\n      setImages(prev => [...prev, ...newImages]);\n      setCurrentImageIndex(prev => prev + newImages.length - 1);\n    }\n  };\n\n  // Handle image selection\n  const handleImageSelect = (index) => {\n    setCurrentImageIndex(index);\n    setCurrentRegionIndex(0);\n    \n    // Update text if available for the current region\n    if (images[index]?.results && images[index].results[0]) {\n      setText(images[index].results[0].text || '');\n    } else {\n      setText('');\n    }\n  };\n\n  // Add a new region\n  const addRegion = () => {\n    // Create new region object\n    const newRegion = {\n      coordinates: { minX: 0, maxX: 0, minY: 0, maxY: 0 },\n      text: '',\n      croppedImageData: null\n    };\n    \n    // Add the new region to shared regions\n    setRegions(prev => [...prev, newRegion]);\n    \n    // Update the images to include results for the new region\n    setImages(prev => {\n      return prev.map(img => ({\n        ...img,\n        results: [...(img.results || []), { text: '', croppedImageData: null }]\n      }));\n    });\n    \n    // Set the current region to the new one\n    setCurrentRegionIndex(regions.length);\n    setCoordinates({ minX: 0, maxX: 0, minY: 0, maxY: 0 });\n    setText('');\n  };\n\n  // Delete current region\n  const deleteRegion = () => {\n    // Don't allow deleting if only one region\n    if (regions.length <= 1) {\n      alert(\"Can't delete the only region. At least one region is required.\");\n      return;\n    }\n    \n    const regionIndexToDelete = currentRegionIndex;\n    \n    // Remove the region from shared regions\n    setRegions(prev => {\n      const updatedRegions = [...prev];\n      updatedRegions.splice(regionIndexToDelete, 1);\n      return updatedRegions;\n    });\n    \n    // Update images to remove results for the deleted region\n    setImages(prev => {\n      return prev.map(img => {\n        const updatedResults = [...(img.results || [])];\n        updatedResults.splice(regionIndexToDelete, 1);\n        return {\n          ...img,\n          results: updatedResults\n        };\n      });\n    });\n    \n    // Set the current region index\n    setCurrentRegionIndex(prev => \n      prev >= regions.length - 1 ? regions.length - 2 : prev\n    );\n    \n    // Update coordinates to the new current region\n    if (regions.length > 1) {\n      const newIndex = currentRegionIndex >= regions.length - 1 ? \n        regions.length - 2 : currentRegionIndex;\n      setCoordinates(regions[newIndex].coordinates);\n    }\n    \n    // Update text\n    const newIndex = currentRegionIndex >= regions.length - 1 ? \n      regions.length - 2 : currentRegionIndex;\n    if (images[currentImageIndex]?.results?.[newIndex]) {\n      setText(images[currentImageIndex].results[newIndex].text || '');\n    } else {\n      setText('');\n    }\n  };\n\n  // Handle region selection\n  const handleRegionSelect = (index) => {\n    setCurrentRegionIndex(index);\n    setCoordinates(regions[index].coordinates);\n    \n    // Update text based on the selected region for the current image\n    if (images[currentImageIndex]?.results?.[index]) {\n      setText(images[currentImageIndex].results[index].text || '');\n    } else {\n      setText('');\n    }\n  };\n\n  // Crop image using coordinates\n  const cropImage = (imageElement, coords) => {\n    try {\n      // Validate coordinates\n      if (coords.minX >= coords.maxX || coords.minY >= coords.maxY) {\n        console.warn(\"Invalid coordinates: min values must be less than max values\");\n        return null;\n      }\n      \n      // Make sure coordinates are within image bounds\n      const width = imageElement.width;\n      const height = imageElement.height;\n      \n      if (coords.minX < 0 || coords.minY < 0 || coords.maxX > width || coords.maxY > height) {\n        console.warn(\"Invalid coordinates: coordinates out of image bounds\");\n        return null;\n      }\n      \n      // Calculate dimensions\n      const cropWidth = coords.maxX - coords.minX;\n      const cropHeight = coords.maxY - coords.minY;\n      \n      // Check that we have a valid area to crop\n      if (cropWidth <= 0 || cropHeight <= 0) {\n        console.warn(\"Invalid coordinates: resulting crop has no area\");\n        return null;\n      }\n      \n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      \n      // Set canvas size to the specified dimensions\n      canvas.width = cropWidth;\n      canvas.height = cropHeight;\n      \n      // Draw the cropped region\n      ctx.drawImage(\n        imageElement,\n        coords.minX, coords.minY,\n        cropWidth, cropHeight,\n        0, 0,\n        cropWidth, cropHeight\n      );\n      \n      return canvas.toDataURL('image/png');\n    } catch (error) {\n      console.error(\"Error cropping image:\", error);\n      return null;\n    }\n  };\n\n  // Process single region with OCR\n  const processRegionOCR = (imageUrl, regionCoords) => {\n    return new Promise((resolve, reject) => {\n      try {\n        const img = new Image();\n        \n        img.onerror = () => {\n          console.error(\"Failed to load image\");\n          resolve({ text: \"Error: Failed to load image\", croppedImageData: null, error: true });\n        };\n        \n        img.onload = () => {\n          const croppedImageData = cropImage(img, regionCoords);\n          \n          // Skip OCR if crop failed\n          if (!croppedImageData) {\n            console.warn(\"Skipping OCR due to invalid crop\");\n            resolve({ \n              text: \"Error: Invalid coordinates for this region\", \n              croppedImageData: null, \n              error: true \n            });\n            return;\n          }\n          \n          Tesseract.recognize(\n            croppedImageData,\n            'eng',\n            {\n              logger: (m) => console.log(m)\n            }\n          )\n            .then(({ data: { text } }) => {\n              resolve({ text, croppedImageData, error: false });\n            })\n            .catch(error => {\n              console.error(\"Tesseract error:\", error);\n              resolve({ \n                text: \"Error: OCR processing failed\", \n                croppedImageData, \n                error: true \n              });\n            });\n        };\n        \n        img.src = imageUrl;\n      } catch (error) {\n        console.error(\"Unexpected error:\", error);\n        resolve({ \n          text: \"Error: Unexpected error occurred\", \n          croppedImageData: null, \n          error: true \n        });\n      }\n    });\n  };\n\n  // Process image and run OCR for current region\n  const handleRunOCR = () => {\n    if (!images[currentImageIndex]) {\n      alert('Please upload an image first');\n      return;\n    }\n\n    setIsLoading(true);\n    processRegionOCR(images[currentImageIndex].url, regions[currentRegionIndex].coordinates)\n      .then(({ text, croppedImageData, error }) => {\n        setText(text);\n        \n        // Update regions with the coordinates\n        setRegions(prev => {\n          const newRegions = [...prev];\n          newRegions[currentRegionIndex] = {\n            ...newRegions[currentRegionIndex],\n            coordinates: regions[currentRegionIndex].coordinates,\n            hasError: error\n          };\n          return newRegions;\n        });\n        \n        // Update the current image's results for the current region\n        setImages(prev => {\n          const newImages = [...prev];\n          if (!newImages[currentImageIndex].results) {\n            newImages[currentImageIndex].results = Array(regions.length).fill(null).map(() => ({\n              text: '',\n              croppedImageData: null,\n              error: false\n            }));\n          }\n          newImages[currentImageIndex].results[currentRegionIndex] = {\n            text,\n            croppedImageData,\n            error\n          };\n          return newImages;\n        });\n        \n        setIsLoading(false);\n      })\n      .catch(error => {\n        console.error(error);\n        setIsLoading(false);\n        alert(\"An unexpected error occurred. Please try again.\");\n      });\n  };\n\n  // Process all regions in current image\n  const handleRunOCRAllRegions = async () => {\n    if (!images[currentImageIndex]) {\n      alert('Please upload an image first');\n      return;\n    }\n\n    if (regions.length === 0) {\n      alert('No regions defined');\n      return;\n    }\n\n    setIsLoading(true);\n    setBatchProgress({ current: 0, total: regions.length });\n\n    try {\n      const results = await Promise.all(\n        regions.map(async (region, idx) => {\n          try {\n            const result = await processRegionOCR(\n              images[currentImageIndex].url, \n              region.coordinates\n            );\n            setBatchProgress(prev => ({ ...prev, current: idx + 1 }));\n            return result;\n          } catch (error) {\n            console.error(`Error processing region ${idx + 1}:`, error);\n            setBatchProgress(prev => ({ ...prev, current: idx + 1 }));\n            return { \n              text: `Error processing region ${idx + 1}`, \n              croppedImageData: null,\n              error: true\n            };\n          }\n        })\n      );\n\n      // Update the current image's results\n      setImages(prev => {\n        const newImages = [...prev];\n        newImages[currentImageIndex].results = results;\n        return newImages;\n      });\n      \n      // Update text for current region\n      setText(results[currentRegionIndex].text);\n      setIsLoading(false);\n      setBatchProgress({ current: 0, total: 0 });\n    } catch (error) {\n      console.error(\"Failed to process regions:\", error);\n      setIsLoading(false);\n      setBatchProgress({ current: 0, total: 0 });\n      alert(\"An error occurred while processing regions. Some regions may not have been processed correctly.\");\n    }\n  };\n\n  // Process all images with OCR (all regions)\n  const handleRunOCRAll = async () => {\n    if (images.length === 0) {\n      alert('Please upload images first');\n      return;\n    }\n\n    setIsLoading(true);\n    const totalOperations = images.length * regions.length;\n    setBatchProgress({ current: 0, total: totalOperations });\n    \n    let processedCount = 0;\n\n    try {\n      const updatedImages = await Promise.all(\n        images.map(async (img) => {\n          try {\n            const results = await Promise.all(\n              regions.map(async (region) => {\n                try {\n                  const result = await processRegionOCR(\n                    img.url, \n                    region.coordinates\n                  );\n                  processedCount++;\n                  setBatchProgress({ current: processedCount, total: totalOperations });\n                  return result;\n                } catch (error) {\n                  console.error(\"Error processing region:\", error);\n                  processedCount++;\n                  setBatchProgress({ current: processedCount, total: totalOperations });\n                  return { \n                    text: \"Error processing this region\", \n                    croppedImageData: null,\n                    error: true\n                  };\n                }\n              })\n            );\n            return { ...img, results };\n          } catch (error) {\n            console.error(\"Error processing image:\", error);\n            return {\n              ...img,\n              results: Array(regions.length).fill(null).map(() => ({\n                text: \"Error processing this image\",\n                croppedImageData: null,\n                error: true\n              }))\n            };\n          }\n        })\n      );\n\n      setImages(updatedImages);\n      \n      // Update text for current image and region\n      if (updatedImages[currentImageIndex]?.results?.[currentRegionIndex]) {\n        setText(updatedImages[currentImageIndex].results[currentRegionIndex].text || '');\n      }\n      \n      setIsLoading(false);\n      setBatchProgress({ current: 0, total: 0 });\n    } catch (error) {\n      console.error(\"Failed to process all images:\", error);\n      setIsLoading(false);\n      setBatchProgress({ current: 0, total: 0 });\n      alert(\"An error occurred while processing images. Some images may not have been processed correctly.\");\n    }\n  };\n\n  // Handle coordinate changes for current region\n  const handleCurrentRegionCoordinatesChange = (e) => {\n    const { name, value } = e.target;\n    const newCoordinates = {\n      ...coordinates,\n      [name]: parseInt(value) || 0\n    };\n    setCoordinates(newCoordinates);\n    \n    // Update coordinates in the regions array\n    setRegions(prev => {\n      const newRegions = [...prev];\n      newRegions[currentRegionIndex].coordinates = newCoordinates;\n      return newRegions;\n    });\n  };\n\n  // Export results as CSV\n  const exportToCSV = () => {\n    // Create CSV header\n    let csvContent = \"Image Name,Region,OCR Result\\n\";\n    \n    // Add each image and region data as rows\n    images.forEach((img, imgIndex) => {\n      if (img.results) {\n        img.results.forEach((result, regionIndex) => {\n          // Clean text data by escaping quotes and removing line breaks\n          const cleanedText = result.text ? result.text.replace(/\"/g, '\"\"').replace(/\\n/g, ' ') : '';\n          // Add row to CSV\n          csvContent += `\"Image ${imgIndex + 1}\",\"Region ${regionIndex + 1}\",\"${cleanedText}\"\\n`;\n        });\n      }\n    });\n    \n    // Create a blob with the CSV content\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const url = URL.createObjectURL(blob);\n    \n    // Create a link element to trigger download\n    const link = document.createElement('a');\n    link.setAttribute('href', url);\n    link.setAttribute('download', 'ocr_results.csv');\n    link.style.visibility = 'hidden';\n    \n    // Add to document, click to download, then remove\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>OCR Image to Text</h1>\n      \n      {/* Image Upload */}\n      <div>\n        <input\n          type=\"file\"\n          accept=\"image/*\"\n          multiple\n          onChange={handleImageChange}\n        />\n      </div>\n\n      {/* Image Selection */}\n      {images.length > 0 && (\n        <div className=\"image-selection\">\n          <h3>Select Image:</h3>\n          <div className=\"image-thumbnails\">\n            {images.map((img, index) => (\n              <div \n                key={index}\n                className={`image-thumbnail ${index === currentImageIndex ? 'selected' : ''}`}\n                onClick={() => handleImageSelect(index)}\n              >\n                <img src={img.url} alt={`Thumbnail ${index + 1}`} />\n                <span>Image {index + 1}</span>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Region Selection - now shared across all images */}\n      {images.length > 0 && regions.length > 0 && (\n        <div className=\"region-selection\">\n          <h3>Regions (Shared Across All Images):</h3>\n          <div className=\"region-controls\">\n            <button onClick={addRegion} className=\"control-button\">Add Region</button>\n            <button onClick={deleteRegion} className=\"control-button\">Delete Region</button>\n          </div>\n          <div className=\"region-tabs\">\n            {regions.map((region, index) => (\n              <div \n                key={index}\n                className={`region-tab ${index === currentRegionIndex ? 'selected' : ''}`}\n                onClick={() => handleRegionSelect(index)}\n              >\n                Region {index + 1}\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Coordinate Inputs */}\n      {images.length > 0 && (\n        <div className=\"coordinates-input\">\n          <h3>Enter Coordinates for Region {currentRegionIndex + 1}</h3>\n          <div className=\"coordinate-group\">\n            <div>\n              <label>Min X:</label>\n              <input\n                type=\"number\"\n                name=\"minX\"\n                value={coordinates.minX}\n                onChange={handleCurrentRegionCoordinatesChange}\n                placeholder=\"Min X\"\n              />\n            </div>\n            <div>\n              <label>Max X:</label>\n              <input\n                type=\"number\"\n                name=\"maxX\"\n                value={coordinates.maxX}\n                onChange={handleCurrentRegionCoordinatesChange}\n                placeholder=\"Max X\"\n              />\n            </div>\n            <div>\n              <label>Min Y:</label>\n              <input\n                type=\"number\"\n                name=\"minY\"\n                value={coordinates.minY}\n                onChange={handleCurrentRegionCoordinatesChange}\n                placeholder=\"Min Y\"\n              />\n            </div>\n            <div>\n              <label>Max Y:</label>\n              <input\n                type=\"number\"\n                name=\"maxY\"\n                value={coordinates.maxY}\n                onChange={handleCurrentRegionCoordinatesChange}\n                placeholder=\"Max Y\"\n              />\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* OCR Buttons */}\n      {images.length > 0 && (\n        <div className=\"run-ocr\">\n          <button onClick={handleRunOCR} disabled={isLoading}>\n            {isLoading ? 'Processing...' : 'Run OCR on Current Region'}\n          </button>\n          <button onClick={handleRunOCRAllRegions} disabled={isLoading} className=\"run-regions-button\">\n            {isLoading ? 'Processing...' : 'Run OCR on All Regions'}\n          </button>\n          <button onClick={handleRunOCRAll} disabled={isLoading} className=\"run-all-button\">\n            {isLoading ? `Processing ${batchProgress.current}/${batchProgress.total}...` : 'Run OCR on All Images'}\n          </button>\n        </div>\n      )}\n\n      {/* Image Previews Container */}\n      {images.length > 0 && (\n        <div className=\"image-preview-container\">\n          {/* Original Image with Rectangle */}\n          <div className=\"image-preview\">\n            <h2>Original Image:</h2>\n            <canvas ref={canvasRef} style={{ maxWidth: '400px' }} />\n            <div className=\"image-dimensions\">\n              Size: {imageDimensions.width} x {imageDimensions.height} pixels\n            </div>\n          </div>\n\n          {/* Cropped Image Preview */}\n          {images[currentImageIndex]?.results?.[currentRegionIndex]?.croppedImageData && (\n            <div className=\"image-preview\">\n              <h2>Cropped Region {currentRegionIndex + 1}:</h2>\n              <img \n                src={images[currentImageIndex].results[currentRegionIndex].croppedImageData} \n                alt=\"Cropped\" \n                style={{ maxWidth: '400px' }} \n              />\n            </div>\n          )}\n\n          {/* Extracted Text */}\n          {images[currentImageIndex]?.results?.[currentRegionIndex]?.text && (\n            <div className=\"result\">\n              <h2>Extracted Text from Region {currentRegionIndex + 1}:</h2>\n              <pre>{images[currentImageIndex].results[currentRegionIndex].text}</pre>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Loading Indicator */}\n      {isLoading && <p>Processing image...</p>}\n      \n      {/* Export Button */}\n      {images.length > 0 && images.some(img => img.results && img.results.some(result => result?.text)) && (\n        <div className=\"export-container\">\n          <button onClick={exportToCSV} className=\"export-button\">\n            Export Results as CSV\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}